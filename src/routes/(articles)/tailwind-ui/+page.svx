<script lang="ts">
    import Showcase from "$lib/ui/Showcase.svelte";
    import MoneyInput from "./MoneyInput.svelte";
    import MoneyInputModified from "./MoneyInputModified.svelte";

	import BannerSrc from "./banner.png?format=webp"
	import BannerSize from "./banner.png?size"
	import BannerColor from "./banner.png?color"
    import { onMount } from "svelte";

    import { writable } from "svelte/store";

    const currency = writable("USD");
	const variant = writable("adaptive");
</script>

<img 
	src={BannerSrc} 
	width={BannerSize.width}
	height={BannerSize.height}
	style:background-color={BannerColor}
	alt="The Tailwind UI Landing Page showing a bunch of beautiful components"
/>

# Is Tailwind UI worth it?

[Tailwind UI](https://tailwindui.com/) is a collection of high-quality components and templates built by the creators of [Tailwind CSS](https://tailwindcss.com). It's 300$ price-tag for a single developer license is quite steep when considering all the free alternatives out there. Could it really be worth it?

I've been using Tailwind UI for a couple months now. In this article, I'll go through how it has affected my workflow, what I liked and disliked about it, and who should consider buying it.

> Since Tailwind UI and Tailwind CSS share similar, verbose names, I'll refer to them as TUI and TCSS respectively.

## The TUI workflow

TUI components and templates are provided as markup with TCSS classes. You then copy-paste the markup into your project. In true Tailwind fashion, this seems a bit backwards at first. Why would you want to copy-paste markup if you could just install a library? Customization. If you've ever tried to modify something like [MUI](https://mui.com) you know it's insufferable. Owning the markup and styles saves you from a lot of headaches.

Let's say you wanted to add a money input to your site. You would first browse through the TUI components to find one that looks like you want.

<Showcase>
    <MoneyInput bind:currency={$currency} />
</Showcase>

```html
<div>
  <label for="price" class="block text-sm font-medium leading-6 text-gray-900">Price</label>
  <div class="relative mt-2 rounded-md shadow-sm">
    <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
      <span class="text-gray-500 sm:text-sm">$</span>
    </div>
    <input type="text" name="price" id="price" class="block w-full rounded-md border-0 py-1.5 pl-7 pr-12 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" placeholder="0.00" aria-describedby="price-currency">
    <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3">
      <span class="text-gray-500 sm:text-sm" id="price-currency">USD</span>
    </div>
  </div>
</div>
```

Then you would copy-paste the markup into your project and modify it to fit your theme, changing colors, shapes, fonts and sizes.

<Showcase>
    <MoneyInputModified bind:currency={$currency} />
</Showcase>

For more complex components that require interactivity TUI also provides React and Vue components. If you aren't using these frameworks, the markup also includes comments that explain how the component should behave. This makes it easy to adapt the components to whatever you're using.

## Looking good has never been this easy

Obviously TUI looks great, you just need to browse their site to see that. What's more impressive is how easy it is to actually achieve similar results in your own project. 

I'm used to Bootstrap, MUI or custom CSS. With these, I would spend a lot of time fiddling to get the look right. Promises of "easy styling" and "beautiful components" would often go unfulfilled. 

With TUI, I just copy-paste the markup and it looks great. This effortless beauty has been a novel experience for me. 

## Framework agnostic\*

Components are provided as markup with TCSS classes. The _appearance_ of the components is not tied to any specific framework. However, the _behavior_ of the components needs to be implemented separately for each framework.

TUI provides prebuilt React & Vue components that implement expected behavior. If you are using a different framework or no framework you'll have to implement the behavior yourself. Fortunately, this is rarely difficult. The markup includes comments that explain what each part is for and how it should behave. 

I've personally adapted many TUI components to [Svelte](https://svelte.dev), using [Melt UI](https://melt-ui.com) as the behavior library. It's been a very smooth experience.

Even when I was using a Server-Side only framework, [Symfony](https://symfony.com), this still worked great. I feel comfortable calling TUI framework agnostic, even though there is an asterisk.

## It's not perfect

There are things that I find frustrating about TUI and wish I had been aware of these before purchasing. Hopefully they will be addressed in future.

### Components come in just one theme

All, or at least most, TUI components come in a single theme. Either light or dark. This is unfortunate, since one of TCSS's nicest features is it's easy multi-theme styling.

It's especially odd when a component appears in both light and dark across different pages. Clearly both variants exist, so why not make them available?

The thinking here was likely that developers would not expected a component to differ visually from the preview page. If you are building a light-theme site and you copy-paste light theme components, having them suddenly turn dark would be unexpected. This is likely why they decided to make the components single-theme.

I would appreciate components being provided in three variants: `light`, `dark` and `adaptive`.

### Tailwind CSS limitations show

TUI has limited itself to just using TCSS classes. This is great, as all components are easy to copy-paste and customize. However, occasionally the limitations of TCSS shine through.

While TCSS can do pretty much anything CSS can when styling a single element. However, it does not match CSS when it comes to multi-element interaction and styling, it's most powerful feature. TUI has to abstain from this, which results in some awkward recommendations, usually manifesting in an overreliance on JS.

For example, it recommends opening dropdowns by adding/removing an element JS. That part of the site won't work without JS. This is a shame, since this could easily be solved with a few lines of CSS. Failing to adhere to the [Least Power Principle](https://en.wikipedia.org/wiki/Rule_of_least_power) like this makes your sites more fragile for no benefit.

The solution here isn't to add custom CSS to TUI, but to expand TCSS's capabilities. Until that happens I will continue to be frustrated by this.

### No Offline Support
I'm currently writing this on a train and I'm unable to access TUI in any way. This is a rather glaring oversight, as it would be very straight forward to enable offline access. A basic [ServiceWorker](https://developers.mozilla.org/en-US/docs/Web/API/Service_Worker_API) would do. Caching static assets isn't hard.

## Is it worth it?
I have yet to answer the ultimate question: _Is it worth it?_ I would give the usual "it depends", because it really does depend, but that's not fair. It's not fair because you have to buy it to try it and therefore can't know on which side of the fence you'll land. That's no good. 




> TODO


*[TCSS]: Tailwind CSS
*[TUI]: Tailwind UI