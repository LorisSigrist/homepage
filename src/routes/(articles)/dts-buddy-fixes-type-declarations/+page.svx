# DTS-Buddy fixes Type-Declarations


There are some common pitfalls surrounding type-declarations that pretty much all TypeScript packages fall into, especially ones with subpackages. [`dts-buddy`](https://www.npmjs.com/package/dts-buddy) is a tool that helps you avoid them.

## An anecdote about using types & subpackages

This section is kind of like the bit at the start of the recipe where the author tells you their whole life story. If you don't care, you can [skip this section](#the-solution).

I've been finding myself copy-pasting a lot of code between projects. To make my life easier, I've been building a package where I would keep all my commonly reused code. Using subpackages for this seemed quite natural, as it would allow me to group my code by domain, while still only having to install one thing. I would have a `@sigrist.dev/framework/pdf` package for all my PDF-related code, a `@sigrist.dev/framework/ui` package for all my UI-related code, and so on.

I expected to often be re-authoring parts of the package while working on another project. To do this conveniently I decided to go with JSDoc types, as they would not require me to rebuild my package every time I made a change. I could just edit the source code directly in `node_modules`. I would still have to re-generate the type-declarations, but only when I was done with my changes.

While doing this, I quickly learned about the pitfalls of using subpackages. I was using the TypeScript compiler, so I was generating one type-declaration per file. This caused many problems when importing from a subpackage. Whenever I started typing `import {` the IDE would show me a list of all the types present in the package, including ones that were not meant to be public. This was very irritating.

Another issue I ran into is that "go to definition" didn't work. I couldn't see the implementation of a type, because the IDE didn't know how to map the type-declaration to the actual source code. It wasn't that bad, since the declaration was always next to the JS file, but it still slowed me down a lot. Since I authored this package myself it didn't have any documentation, so I often had to glance at the implementation to understand what something was doing.


## The Solution
`dts-buddy` solves all these things in a very clever way. Instead of colocating each type-declaration with the JS file it belongs to, it generates just one `.d.ts` file for the entire package. This is then referenced by the `types` field in your `package.json`.
The file contains module declarations for the public interface of the package and it's subpackages, using the `declare module` syntax. 

Here's an example output it generated for one of my (private, sorry) packages:

```ts
declare module '@sigrist.dev/framework/esr' {
    /**
    * Adds a QR-ESR Invoice footer to the given PDF.
    * Assumes the current page has A4 portrait format.
    * 
    * @see https://www.swiss-qr-invoice.org/validator/?lang=de for a validator
    */
    export function addQrEsrFooter(pdf: import("jspdf").jsPDF, data: ESRData) : import("jspdf").jsPDF;

    export type ESRData = {
        amount: number;
        reference: string;
        ...
    }
    ...
}

declare module '@sigrist.dev/framework/ui' {
  ...
}
```

Alongside this, it also generates a `.map.d.ts` file, which maps the public types onto the actual source code. This allows the IDE to "go to definition" and "peek definition" reliably.


## How to use it



## Should you use it?
`dts-buddy` is a tool that solves the subpackage-problem very very well. Outside of that, the regular TypeScript compiler is good enough. It's going to be more familiar to most developers and is maintained more actively. But when you do need `dts-buddy`, it's a lifesaver.