import{s as an,n as tl}from"../chunks/scheduler.IgQUtjbl.js";import{S as tn,i as on,g as o,s as a,H as r,h as p,C as c,c as t,G as C,k as f,a as n,f as e}from"../chunks/index.BUVdxXQj.js";function pn($l){let i,ol='<a href="#adding-devtools-to-vite-plugins">Adding Devtools to Vite plugins</a>',hs,h,pl="One of my favorite features in any framework is the <em>Svelte Inspector</em>. It allows you to click on a component and then it magically opens the relevant file in your editor.",vs,v,cl="In order to accomplish this, without the user’s having to do additional setup, they have to inject their devtool code into the browser during development. Today we will learn how to do that, so that you too can build great devtools!",Es,y,rl='<a href="#getting-a-foothold---injecting-js-into-the-browser">Getting a Foothold - Injecting JS into the Browser</a>',Bs,E,Cl="The key is to inject code into vite’s client side entry point. This is surprisingly straight forward since a vite-plugin can just modify any js file using the <code>transform</code> hook.",xs,N,Kl=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#767C9DB0;font-style:italic">/** </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">returns</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">import('vite').Plugin</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#767C9DB0;font-style:italic"> */</span></span>
<span class="line"><span style="color:#91B4D5">const</span><span style="color:#ADD7FF"> devtoolsPlugin</span><span style="color:#91B4D5"> =</span><span style="color:#A6ACCD"> () </span><span style="color:#91B4D5">=></span><span style="color:#A6ACCD"> (&#123;</span></span>
<span class="line"><span style="color:#ADD7FF">  name</span><span style="color:#A6ACCD">:</span><span style="color:#A6ACCD"> "</span><span style="color:#5DE4C7">devtools</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#ADD7FF">  enforce</span><span style="color:#A6ACCD">:</span><span style="color:#A6ACCD"> "</span><span style="color:#5DE4C7">pre</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">,</span><span style="color:#767C9DB0;font-style:italic"> //run before the vite's built-in transformations</span></span>
<span class="line"><span style="color:#ADD7FF">  apply</span><span style="color:#A6ACCD">:</span><span style="color:#A6ACCD"> "</span><span style="color:#5DE4C7">serve</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">,</span><span style="color:#767C9DB0;font-style:italic"> //only run in dev mode</span></span>
<span class="line"><span style="color:#ADD7FF">  transform</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">code</span><span style="color:#A6ACCD">,</span><span style="color:#E4F0FB"> id</span><span style="color:#A6ACCD">,</span><span style="color:#E4F0FB"> options</span><span style="color:#A6ACCD">)</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">    if(</span><span style="color:#E4F0FB">options</span><span style="color:#A6ACCD">?.</span><span style="color:#E4F0FB">ssr</span><span style="color:#A6ACCD">)</span><span style="color:#5DE4C7C0"> return</span><span style="color:#A6ACCD">;</span><span style="color:#767C9DB0;font-style:italic"> //Don't run in SSR mode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">    //Inject some code into the vite's client side entry point</span></span>
<span class="line"><span style="color:#A6ACCD">    if</span><span style="color:#A6ACCD"> (</span><span style="color:#E4F0FB">id</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">includes</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">vite/dist/client/client.mjs</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">))</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#5DE4C7C0">      return</span><span style="color:#A6ACCD"> &#123;</span><span style="color:#ADD7FF"> code</span><span style="color:#A6ACCD">:</span><span style="color:#E4F0FB"> code</span><span style="color:#91B4D5"> +</span><span style="color:#A6ACCD"> "</span><span style="color:#5FB3A1">&#92;n</span><span style="color:#A6ACCD">"</span><span style="color:#91B4D5"> +</span><span style="color:#A6ACCD"> "</span><span style="color:#5DE4C7">console.log('Hello World!')</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD"> &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">    &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">  &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;)</span></span></code></pre>`,Z,B,il=`Opening the dev-site now shows the message in the console.
That’s the foothold we need.`,ws,A,yl='<a href="#importing-our-own-modules">Importing our own modules</a>',_s,x,Al="But to ship non-trivial devtools, we need more than just a foothold. We need more than just appending some code at the end of a file. We need to import our own modules.",bs,w,Dl="Unfortunately, this isn’t so straight forward. Our plugin is likely part of an external package and we don’t know where that package will be installed, so we can’t import our own modules using relative paths.",ks,ss,Ql=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#E4F0FBD0">transform</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">code</span><span style="color:#A6ACCD">, </span><span style="color:#E4F0FB">id</span><span style="color:#A6ACCD">, </span><span style="color:#E4F0FB">options</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">  if (</span><span style="color:#E4F0FB">id</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">includes</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">vite/dist/client/client.mjs</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">)) &#123;</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">    //How do we import our own modules?</span></span>
<span class="line"><span style="color:#5DE4C7C0">    return</span><span style="color:#A6ACCD"> &#123;</span><span style="color:#ADD7FF"> code</span><span style="color:#A6ACCD">:</span><span style="color:#E4F0FB"> code</span><span style="color:#91B4D5"> +</span><span style="color:#A6ACCD"> "</span><span style="color:#5FB3A1">&#92;n</span><span style="color:#A6ACCD">"</span><span style="color:#91B4D5"> +</span><span style="color:#A6ACCD"> "</span><span style="color:#5DE4C7">import(????)</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD"> &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">  &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span></code></pre>`,ls,_,dl="I offer a few solutions here:",gs,b,ul="<li>Export the devtools browser code from the plugin package</li> <li>Use a sub-package</li> <li>Magic Module Resolution (preferred)</li>",Ts,D,Fl='<a href="#option-1-exporting-the-runtime-code-from-the-package">Option 1: Exporting the runtime code from the package</a>',Ms,k,ml="This one is very straight forward. We just export the entry point of our devtools from our package. This way all we need to do is to inject an import statement to it in the client side js.",Hs,ns,Yl=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#767C9DB0;font-style:italic">//in the entry point of our package</span></span>
<span class="line"><span style="color:#5DE4C7">export</span><span style="color:#91B4D5"> function</span><span style="color:#ADD7FF"> bootstrapDevtools</span><span style="color:#A6ACCD">() &#123;</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">    // Devtool Browser code here</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">//in the plugin</span></span>
<span class="line"><span style="color:#E4F0FBD0">transform</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">code</span><span style="color:#A6ACCD">, </span><span style="color:#E4F0FB">id</span><span style="color:#A6ACCD">, </span><span style="color:#E4F0FB">options</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">  if (</span><span style="color:#E4F0FB">id</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">includes</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">vite/dist/client/client.mjs</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">)) &#123;</span></span>
<span class="line"><span style="color:#5DE4C7C0">    return</span><span style="color:#A6ACCD"> &#123;</span><span style="color:#ADD7FF"> code</span><span style="color:#A6ACCD">:</span><span style="color:#E4F0FB"> code</span><span style="color:#91B4D5"> +</span><span style="color:#A6ACCD"> "</span><span style="color:#5FB3A1">&#92;n</span><span style="color:#A6ACCD">"</span><span style="color:#91B4D5"> +</span><span style="color:#A6ACCD"> '</span><span style="color:#5DE4C7">import("my-devtools-plugin").then(module => module.bootstrapDevtools())</span><span style="color:#A6ACCD">'</span><span style="color:#A6ACCD"> &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">  &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span></code></pre>`,es,g,fl="This works and is very simple, but it has some downsides.",Ls,T,hl="<li>It clutters up the exports of our package.</li> <li>It mixes browser code with plugin code.</li>",Ps,M,vl="<p>It’s probably possible to hide the export from the IDE by modifying the package’s type definitions, but that’s more work than the other solutions.</p>",js,d,El='<a href="#option-2-using-a-sub-package">Option 2: Using a sub-package</a>',Is,H,Bl="Sub packages are a feature of npm that allow you to have multiple entry points in a single package. For example, the <code>svelte</code> package has a sub-package <code>svelte/stores</code> which contains store implementations.",Os,L,xl="In this approach, we still export the runtime code from our package, but we give it it’s own entry point. This way we don’t clutter up the exports and we don’t mix concerns.",qs,P,wl="Here is the setup:",Us,as,Jl=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span>src</span></span>
<span class="line"><span>|- plugin.js</span></span>
<span class="line"><span>|- devtools</span></span>
<span class="line"><span>   |- entry.js</span></span></code></pre>`,ts,j,_l="Then, in the <code>package.json</code>, add an exports field with two entries: one for the plugin and one for the devtools.",Ws,os,Vl=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#A6ACCD">&#123;</span></span>
<span class="line"><span style="color:#A6ACCD">  "</span><span style="color:#E4F0FB">name</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">: </span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">my-devtools-plugin</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#A6ACCD">  "</span><span style="color:#E4F0FB">exports</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">: &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">    "</span><span style="color:#ADD7FF">.</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">: &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">        "</span><span style="color:#91B4D5">import</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">: </span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">./plugin.js</span><span style="color:#A6ACCD">"</span></span>
<span class="line"><span style="color:#A6ACCD">        "</span><span style="color:#5DE4C7">types</span><span style="color:#A6ACCD">"</span><span style="color:#D0679D">:</span><span style="color:#A6ACCD"> "</span><span style="color:#5DE4C7">./plugin.d.ts</span><span style="color:#A6ACCD">"</span><span style="color:#767C9DB0;font-style:italic"> //If you have types. link to them here</span></span>
<span class="line"><span style="color:#A6ACCD">    &#125;,</span></span>
<span class="line"><span style="color:#A6ACCD">    "</span><span style="color:#ADD7FF">./internal</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">: &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">        "</span><span style="color:#91B4D5">import</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">: </span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">./devtools/entry.js</span><span style="color:#A6ACCD">"</span></span>
<span class="line"><span style="color:#A6ACCD">    &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">  &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span></code></pre>`,ps,I,bl="You can then inject an import statement to <code>my-devtools-plugin/internal</code> in the client side js.",Rs,cs,Nl=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#767C9DB0;font-style:italic">//in the plugin</span></span>
<span class="line"><span style="color:#E4F0FBD0">transform</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">code</span><span style="color:#A6ACCD">, </span><span style="color:#E4F0FB">id</span><span style="color:#A6ACCD">, </span><span style="color:#E4F0FB">options</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">  if (</span><span style="color:#E4F0FB">id</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">includes</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">vite/dist/client/client.mjs</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">)) &#123;</span></span>
<span class="line"><span style="color:#5DE4C7C0">    return</span><span style="color:#A6ACCD"> &#123;</span><span style="color:#ADD7FF"> code</span><span style="color:#A6ACCD">:</span><span style="color:#E4F0FB"> code</span><span style="color:#91B4D5"> +</span><span style="color:#A6ACCD"> "</span><span style="color:#5FB3A1">&#92;n</span><span style="color:#A6ACCD">"</span><span style="color:#91B4D5"> +</span><span style="color:#A6ACCD"> '</span><span style="color:#5DE4C7">import("my-devtools-plugin/internal").then(module => module.bootstrap())</span><span style="color:#A6ACCD">'</span><span style="color:#A6ACCD"> &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">  &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span></code></pre>`,rs,O,kl=`This eliminates the code-mixing problem, but does not quite eliminated the import cluttering.
While the <code>my-devtools-plugin</code> package does not have private exports, IDEs might still suggest <code>my-devtools-plugin/internal</code> as an import option. Developers are unlikely to use it, but it’s still a bit annoying.`,zs,q,gl='<p>If you generate your type definitions using <a href="https://www.github.com/Rich-Harris/dts-buddy" rel="noopener noreferrer" target="_blank"><code>dts-buddy</code></a> instead of <code>tsc</code>, you can sidestep this problem by not generating type declarations for the <code>internal</code> sub-package. Otherwise use Option 3.</p>',Gs,u,Tl='<a href="#option-3-magic-module-resolution-preferred">Option 3: Magic Module Resolution (preferred)</a>',Ss,U,Ml="If you <em>really</em> don’t want to clutter your exports, this is the best way to go, but it’s a bit of work to set up.",Xs,W,Hl="The idea is to define a magic module-id that our plugin resolves to the absolute path of our entry point.",$s,R,Ll="(Eg: <code>import(&quot;my-package:devtools&quot;)</code> resolves to <code>import(&quot;/home/user/project/node_modules/my-package/devtools/entry.js&quot;)</code> or whatever)",Ks,z,Pl="But how can we know the absolute path of our entry point? The trick is that we know the relative path to the entry point <em>from</em> our plugin file.",Qs,G,jl="We can get the absolute path of our plugin’s file using <code>import.meta.url</code>. We can then combine that with the relative path to our entry point to get the absolute path to our entry point.",Ys,Cs,Zl=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span>src</span></span>
<span class="line"><span>|- plugin.js</span></span>
<span class="line"><span>|- devtools</span></span>
<span class="line"><span>   |- entry.js</span></span></code></pre>`,is,ys,sn=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#767C9DB0;font-style:italic">//plugin.js </span></span>
<span class="line"><span style="color:#5DE4C7">import </span><span style="color:#A6ACCD">&#123;</span><span style="color:#ADD7FF"> dirname</span><span style="color:#A6ACCD"> &#125;</span><span style="color:#A6ACCD"> from</span><span style="color:#A6ACCD"> "</span><span style="color:#5DE4C7">node:path</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#5DE4C7">import </span><span style="color:#A6ACCD">&#123;</span><span style="color:#ADD7FF"> fileURLToPath</span><span style="color:#A6ACCD"> &#125;</span><span style="color:#A6ACCD"> from</span><span style="color:#A6ACCD"> "</span><span style="color:#5DE4C7">node:url</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#5DE4C7">import </span><span style="color:#A6ACCD">&#123;</span><span style="color:#ADD7FF"> normalizePath</span><span style="color:#A6ACCD"> &#125;</span><span style="color:#A6ACCD"> from</span><span style="color:#A6ACCD"> "</span><span style="color:#5DE4C7">vite</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">function</span><span style="color:#ADD7FF"> getDevtoolsEntryPath</span><span style="color:#A6ACCD">() &#123;</span></span>
<span class="line"><span style="color:#91B4D5">    const</span><span style="color:#E4F0FB"> srcFolderPath</span><span style="color:#91B4D5"> =</span><span style="color:#E4F0FBD0"> normalizePath</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FBD0">dirname</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FBD0">fileURLToPath</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">import</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">meta</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">url</span><span style="color:#A6ACCD">)));</span></span>
<span class="line"><span style="color:#5DE4C7C0">    return</span><span style="color:#E4F0FB"> srcFolderPath</span><span style="color:#91B4D5"> +</span><span style="color:#A6ACCD"> "</span><span style="color:#5DE4C7">/devtools/entry.js</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span></code></pre>`,As,S,Il="Using this, we can then resolve our magic module id to the absolute path of our entry point.",Js,Ds,ln=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#767C9DB0;font-style:italic">//plugin.js</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">//...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">const</span><span style="color:#E4F0FB"> MAGIC_MODULE_ID</span><span style="color:#91B4D5"> =</span><span style="color:#A6ACCD"> "</span><span style="color:#5DE4C7">my-package:devtools</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#5DE4C7">export</span><span style="color:#91B4D5"> const</span><span style="color:#ADD7FF"> devtoolsPlugin</span><span style="color:#91B4D5"> =</span><span style="color:#A6ACCD"> () </span><span style="color:#91B4D5">=></span><span style="color:#A6ACCD"> (&#123;</span></span>
<span class="line"><span style="color:#ADD7FF">    name</span><span style="color:#A6ACCD">:</span><span style="color:#A6ACCD"> "</span><span style="color:#5DE4C7">devtools</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#ADD7FF">    enforce</span><span style="color:#A6ACCD">:</span><span style="color:#A6ACCD"> "</span><span style="color:#5DE4C7">pre</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#ADD7FF">    apply</span><span style="color:#A6ACCD">:</span><span style="color:#A6ACCD"> "</span><span style="color:#5DE4C7">serve</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#ADD7FF">    resolveId</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">id</span><span style="color:#A6ACCD">)</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">        if</span><span style="color:#A6ACCD"> (</span><span style="color:#E4F0FB">id </span><span style="color:#91B4D5">===</span><span style="color:#E4F0FB"> MAGIC_MODULE_ID</span><span style="color:#A6ACCD">)</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#5DE4C7C0">            return</span><span style="color:#E4F0FBD0"> getDevtoolsEntryPath</span><span style="color:#A6ACCD">();</span></span>
<span class="line"><span style="color:#A6ACCD">        &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">    &#125;,</span><span style="color:#E4F0FB"> </span></span>
<span class="line"><span style="color:#ADD7FF">    transform</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">code</span><span style="color:#A6ACCD">,</span><span style="color:#E4F0FB"> id</span><span style="color:#A6ACCD">,</span><span style="color:#E4F0FB"> options</span><span style="color:#A6ACCD">)</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">        if</span><span style="color:#A6ACCD"> (</span><span style="color:#E4F0FB">id</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">includes</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">vite/dist/client/client.mjs</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">))</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#5DE4C7C0">            return</span><span style="color:#A6ACCD"> &#123;</span><span style="color:#ADD7FF"> code</span><span style="color:#A6ACCD">:</span><span style="color:#E4F0FB"> code</span><span style="color:#91B4D5"> +</span><span style="color:#A6ACCD"> "</span><span style="color:#5FB3A1">&#92;n</span><span style="color:#A6ACCD">"</span><span style="color:#91B4D5"> +</span><span style="color:#A6ACCD"> &#96;</span><span style="color:#5DE4C7">import("</span><span style="color:#A6ACCD">$&#123;</span><span style="color:#E4F0FB">MAGIC_MODULE_ID</span><span style="color:#A6ACCD">&#125;</span><span style="color:#5DE4C7">").then(module => module.bootstrapDevtools())</span><span style="color:#A6ACCD">&#96;</span><span style="color:#A6ACCD"> &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">        &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">    &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;)</span></span></code></pre>`,ds,X,Ol="If you’re going to use this, make sure that the relative path to your entry point is correct. Compiling or Bundling your plugin code may change the relative path.",Vs,F,ql='<a href="#addendum-dealing-with-fsallow">Addendum: Dealing with <code>fs.allow</code></a>',Ns,$,Ul="<code>vite</code> has a configuration option called <code>fs.allow</code>. It decides which paths vite’s file-imports are allowed to read. This prevents path-traversal attacks. If your user’s use this and haven’t allowed paths inside your package folder the above code will break. You could just instruct them to allow these paths, but that’s not very user friendly.",Zs,K,Wl="We can sidestep this by loading the code ourselves using the <code>load</code> hook and <code>fs.readFile</code>. We need to do this for all devtool files, not just the entry point.",sl,Q,Rl="To do this, we will not use a <em>magic id</em>, but a <em>magic prefix</em>. We will check if an import id starts with the prefix, and if it does, replace the prefix with the path to our <em>src/devtools/</em> folder and load the files ourselves.",ll,us,nn=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span>src</span></span>
<span class="line"><span>|- plugin.js</span></span>
<span class="line"><span>|- devtools</span></span>
<span class="line"><span>   |- entry.js</span></span>
<span class="line"><span>   |- imported-by-entry.js</span></span></code></pre>`,Fs,Y,zl="Eg:",nl,J,Gl="<li>“my-package:devtools/entry.js” -&gt; “/home/user/project/node_modules/my-package/devtools/entry.js”</li> <li>“my-package:devtools/imported-by-entry.js” -&gt; “/home/user/project/node_modules/my-package/devtools/imported-by-entry.js</li>",el,ms,en=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#767C9DB0;font-style:italic">//...</span></span>
<span class="line"><span style="color:#91B4D5">const</span><span style="color:#E4F0FB"> srcFolderPath</span><span style="color:#91B4D5"> =</span><span style="color:#E4F0FBD0"> normalizePath</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FBD0">dirname</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FBD0">fileURLToPath</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">import</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">meta</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">url</span><span style="color:#A6ACCD">)));</span></span>
<span class="line"><span style="color:#91B4D5">const</span><span style="color:#E4F0FB"> devtoolsFolderPath</span><span style="color:#91B4D5"> =</span><span style="color:#E4F0FB"> srcFolderPath</span><span style="color:#91B4D5"> +</span><span style="color:#A6ACCD"> "</span><span style="color:#5DE4C7">/devtools</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">const</span><span style="color:#E4F0FB"> MAGIC_MODULE_PREFIX</span><span style="color:#91B4D5"> =</span><span style="color:#A6ACCD"> "</span><span style="color:#5DE4C7">my-package:devtools</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#5DE4C7">export</span><span style="color:#91B4D5"> const</span><span style="color:#ADD7FF"> devtoolsPlugin</span><span style="color:#91B4D5"> =</span><span style="color:#A6ACCD"> () </span><span style="color:#91B4D5">=></span><span style="color:#A6ACCD"> (&#123;</span></span>
<span class="line"><span style="color:#ADD7FF">    name</span><span style="color:#A6ACCD">:</span><span style="color:#A6ACCD"> "</span><span style="color:#5DE4C7">devtools</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#ADD7FF">    enforce</span><span style="color:#A6ACCD">:</span><span style="color:#A6ACCD"> "</span><span style="color:#5DE4C7">pre</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">,</span><span style="color:#E4F0FB"> </span></span>
<span class="line"><span style="color:#ADD7FF">    apply</span><span style="color:#A6ACCD">:</span><span style="color:#A6ACCD"> "</span><span style="color:#5DE4C7">serve</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADD7FF">    resolveId</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">id</span><span style="color:#A6ACCD">)</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">        if</span><span style="color:#A6ACCD"> (</span><span style="color:#E4F0FB">id</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">startsWith</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">MAGIC_MODULE_PREFIX</span><span style="color:#A6ACCD">))</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#5DE4C7C0">            return</span><span style="color:#E4F0FB"> id</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">replace</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">MAGIC_MODULE_PREFIX</span><span style="color:#A6ACCD">,</span><span style="color:#E4F0FB"> devtoolsFolderPath</span><span style="color:#A6ACCD">);</span></span>
<span class="line"><span style="color:#A6ACCD">        &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">    &#125;,</span><span style="color:#E4F0FB"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADD7FF">    load</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">path</span><span style="color:#A6ACCD">)</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">        if</span><span style="color:#A6ACCD"> (</span><span style="color:#E4F0FB">path</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">startsWith</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">devtoolsFolderPath</span><span style="color:#A6ACCD">))</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#91B4D5">            let</span><span style="color:#E4F0FB"> cleanPath </span><span style="color:#91B4D5">=</span><span style="color:#E4F0FB"> id</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">split</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">?</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">)[</span><span style="color:#5DE4C7">0</span><span style="color:#A6ACCD">]</span><span style="color:#91B4D5"> ??</span><span style="color:#A6ACCD"> ""</span><span style="color:#A6ACCD">;</span><span style="color:#767C9DB0;font-style:italic"> //remove query params</span></span>
<span class="line"><span style="color:#E4F0FB">            cleanPath </span><span style="color:#91B4D5">=</span><span style="color:#E4F0FB"> cleanId</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">split</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">#</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">)[</span><span style="color:#5DE4C7">0</span><span style="color:#A6ACCD">]</span><span style="color:#91B4D5"> ??</span><span style="color:#A6ACCD"> ""</span><span style="color:#A6ACCD">;</span><span style="color:#767C9DB0;font-style:italic"> //remove hash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD">            if(</span><span style="color:#E4F0FB">fs</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">existsSync</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">cleanPath</span><span style="color:#A6ACCD">))</span><span style="color:#5DE4C7C0"> return</span><span style="color:#E4F0FB"> fs</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">readFile</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">cleanPath</span><span style="color:#A6ACCD">,</span><span style="color:#A6ACCD"> "</span><span style="color:#5DE4C7">utf-8</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">);</span></span>
<span class="line"><span style="color:#A6ACCD">            else</span><span style="color:#E4F0FB"> console</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">warn</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCD">&#96;</span><span style="color:#5DE4C7">Could not find file </span><span style="color:#A6ACCD">$&#123;</span><span style="color:#E4F0FB">cleanPath</span><span style="color:#A6ACCD">&#125;&#96;</span><span style="color:#A6ACCD">);</span></span>
<span class="line"><span style="color:#A6ACCD">        &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADD7FF">    transform</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">code</span><span style="color:#A6ACCD">,</span><span style="color:#E4F0FB"> id</span><span style="color:#A6ACCD">,</span><span style="color:#E4F0FB"> options</span><span style="color:#A6ACCD">)</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">        if</span><span style="color:#A6ACCD"> (</span><span style="color:#E4F0FB">id</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">includes</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">vite/dist/client/client.mjs</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">))</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#5DE4C7C0">            return</span><span style="color:#A6ACCD"> &#123;</span><span style="color:#ADD7FF"> code</span><span style="color:#A6ACCD">:</span><span style="color:#E4F0FB"> code</span><span style="color:#91B4D5"> +</span><span style="color:#A6ACCD"> "</span><span style="color:#5FB3A1">&#92;n</span><span style="color:#A6ACCD">"</span><span style="color:#91B4D5"> +</span><span style="color:#A6ACCD"> &#96;</span><span style="color:#5DE4C7">import("</span><span style="color:#A6ACCD">$&#123;</span><span style="color:#E4F0FB">MAGIC_MODULE_ID</span><span style="color:#A6ACCD">&#125;</span><span style="color:#5DE4C7">/entry.js").then(module => module.bootstrap())</span><span style="color:#A6ACCD">&#96;</span><span style="color:#A6ACCD"> &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">        &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">    &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;)</span></span></code></pre>`,fs,m,Sl='<a href="#in-conclusion">In Conclusion</a>',al,V,Xl="It’s not hard, but it’s a hassle. Fortunately, you only need to do this once.";return{c(){i=o("h1"),i.innerHTML=ol,hs=a(),h=o("p"),h.innerHTML=pl,vs=a(),v=o("p"),v.textContent=cl,Es=a(),y=o("h2"),y.innerHTML=rl,Bs=a(),E=o("p"),E.innerHTML=Cl,xs=a(),N=new r(!1),Z=a(),B=o("p"),B.textContent=il,ws=a(),A=o("h2"),A.innerHTML=yl,_s=a(),x=o("p"),x.textContent=Al,bs=a(),w=o("p"),w.textContent=Dl,ks=a(),ss=new r(!1),ls=a(),_=o("p"),_.textContent=dl,gs=a(),b=o("ol"),b.innerHTML=ul,Ts=a(),D=o("h3"),D.innerHTML=Fl,Ms=a(),k=o("p"),k.textContent=ml,Hs=a(),ns=new r(!1),es=a(),g=o("p"),g.textContent=fl,Ls=a(),T=o("ul"),T.innerHTML=hl,Ps=a(),M=o("blockquote"),M.innerHTML=vl,js=a(),d=o("h3"),d.innerHTML=El,Is=a(),H=o("p"),H.innerHTML=Bl,Os=a(),L=o("p"),L.textContent=xl,qs=a(),P=o("p"),P.textContent=wl,Us=a(),as=new r(!1),ts=a(),j=o("p"),j.innerHTML=_l,Ws=a(),os=new r(!1),ps=a(),I=o("p"),I.innerHTML=bl,Rs=a(),cs=new r(!1),rs=a(),O=o("p"),O.innerHTML=kl,zs=a(),q=o("blockquote"),q.innerHTML=gl,Gs=a(),u=o("h3"),u.innerHTML=Tl,Ss=a(),U=o("p"),U.innerHTML=Ml,Xs=a(),W=o("p"),W.textContent=Hl,$s=a(),R=o("p"),R.innerHTML=Ll,Ks=a(),z=o("p"),z.innerHTML=Pl,Qs=a(),G=o("p"),G.innerHTML=jl,Ys=a(),Cs=new r(!1),is=a(),ys=new r(!1),As=a(),S=o("p"),S.textContent=Il,Js=a(),Ds=new r(!1),ds=a(),X=o("p"),X.textContent=Ol,Vs=a(),F=o("h4"),F.innerHTML=ql,Ns=a(),$=o("p"),$.innerHTML=Ul,Zs=a(),K=o("p"),K.innerHTML=Wl,sl=a(),Q=o("p"),Q.innerHTML=Rl,ll=a(),us=new r(!1),Fs=a(),Y=o("p"),Y.textContent=zl,nl=a(),J=o("ul"),J.innerHTML=Gl,el=a(),ms=new r(!1),fs=a(),m=o("h2"),m.innerHTML=Sl,al=a(),V=o("p"),V.textContent=Xl,this.h()},l(s){i=p(s,"H1",{id:!0,"data-svelte-h":!0}),c(i)!=="svelte-149hxn8"&&(i.innerHTML=ol),hs=t(s),h=p(s,"P",{"data-svelte-h":!0}),c(h)!=="svelte-f4e11x"&&(h.innerHTML=pl),vs=t(s),v=p(s,"P",{"data-svelte-h":!0}),c(v)!=="svelte-1gnlx2z"&&(v.textContent=cl),Es=t(s),y=p(s,"H2",{id:!0,"data-svelte-h":!0}),c(y)!=="svelte-13bm82k"&&(y.innerHTML=rl),Bs=t(s),E=p(s,"P",{"data-svelte-h":!0}),c(E)!=="svelte-139m8pm"&&(E.innerHTML=Cl),xs=t(s),N=C(s,!1),Z=t(s),B=p(s,"P",{"data-svelte-h":!0}),c(B)!=="svelte-dykwd4"&&(B.textContent=il),ws=t(s),A=p(s,"H2",{id:!0,"data-svelte-h":!0}),c(A)!=="svelte-wuufpu"&&(A.innerHTML=yl),_s=t(s),x=p(s,"P",{"data-svelte-h":!0}),c(x)!=="svelte-1q4s0sc"&&(x.textContent=Al),bs=t(s),w=p(s,"P",{"data-svelte-h":!0}),c(w)!=="svelte-1kcsokb"&&(w.textContent=Dl),ks=t(s),ss=C(s,!1),ls=t(s),_=p(s,"P",{"data-svelte-h":!0}),c(_)!=="svelte-ujsyuk"&&(_.textContent=dl),gs=t(s),b=p(s,"OL",{"data-svelte-h":!0}),c(b)!=="svelte-1de6fwn"&&(b.innerHTML=ul),Ts=t(s),D=p(s,"H3",{id:!0,"data-svelte-h":!0}),c(D)!=="svelte-hi4waj"&&(D.innerHTML=Fl),Ms=t(s),k=p(s,"P",{"data-svelte-h":!0}),c(k)!=="svelte-18yov4n"&&(k.textContent=ml),Hs=t(s),ns=C(s,!1),es=t(s),g=p(s,"P",{"data-svelte-h":!0}),c(g)!=="svelte-d8lfxd"&&(g.textContent=fl),Ls=t(s),T=p(s,"UL",{"data-svelte-h":!0}),c(T)!=="svelte-8xnolz"&&(T.innerHTML=hl),Ps=t(s),M=p(s,"BLOCKQUOTE",{"data-svelte-h":!0}),c(M)!=="svelte-1mtvoal"&&(M.innerHTML=vl),js=t(s),d=p(s,"H3",{id:!0,"data-svelte-h":!0}),c(d)!=="svelte-13xa7ud"&&(d.innerHTML=El),Is=t(s),H=p(s,"P",{"data-svelte-h":!0}),c(H)!=="svelte-ok68q6"&&(H.innerHTML=Bl),Os=t(s),L=p(s,"P",{"data-svelte-h":!0}),c(L)!=="svelte-anwskw"&&(L.textContent=xl),qs=t(s),P=p(s,"P",{"data-svelte-h":!0}),c(P)!=="svelte-hih30e"&&(P.textContent=wl),Us=t(s),as=C(s,!1),ts=t(s),j=p(s,"P",{"data-svelte-h":!0}),c(j)!=="svelte-tqh44r"&&(j.innerHTML=_l),Ws=t(s),os=C(s,!1),ps=t(s),I=p(s,"P",{"data-svelte-h":!0}),c(I)!=="svelte-zeazju"&&(I.innerHTML=bl),Rs=t(s),cs=C(s,!1),rs=t(s),O=p(s,"P",{"data-svelte-h":!0}),c(O)!=="svelte-mk2ame"&&(O.innerHTML=kl),zs=t(s),q=p(s,"BLOCKQUOTE",{"data-svelte-h":!0}),c(q)!=="svelte-4otrga"&&(q.innerHTML=gl),Gs=t(s),u=p(s,"H3",{id:!0,"data-svelte-h":!0}),c(u)!=="svelte-1vol08d"&&(u.innerHTML=Tl),Ss=t(s),U=p(s,"P",{"data-svelte-h":!0}),c(U)!=="svelte-d4i2kr"&&(U.innerHTML=Ml),Xs=t(s),W=p(s,"P",{"data-svelte-h":!0}),c(W)!=="svelte-1bug3ei"&&(W.textContent=Hl),$s=t(s),R=p(s,"P",{"data-svelte-h":!0}),c(R)!=="svelte-1kdpnj3"&&(R.innerHTML=Ll),Ks=t(s),z=p(s,"P",{"data-svelte-h":!0}),c(z)!=="svelte-qoqrfj"&&(z.innerHTML=Pl),Qs=t(s),G=p(s,"P",{"data-svelte-h":!0}),c(G)!=="svelte-m7512w"&&(G.innerHTML=jl),Ys=t(s),Cs=C(s,!1),is=t(s),ys=C(s,!1),As=t(s),S=p(s,"P",{"data-svelte-h":!0}),c(S)!=="svelte-zni08o"&&(S.textContent=Il),Js=t(s),Ds=C(s,!1),ds=t(s),X=p(s,"P",{"data-svelte-h":!0}),c(X)!=="svelte-l3cmum"&&(X.textContent=Ol),Vs=t(s),F=p(s,"H4",{id:!0,"data-svelte-h":!0}),c(F)!=="svelte-1185fxd"&&(F.innerHTML=ql),Ns=t(s),$=p(s,"P",{"data-svelte-h":!0}),c($)!=="svelte-koxrm5"&&($.innerHTML=Ul),Zs=t(s),K=p(s,"P",{"data-svelte-h":!0}),c(K)!=="svelte-16494hq"&&(K.innerHTML=Wl),sl=t(s),Q=p(s,"P",{"data-svelte-h":!0}),c(Q)!=="svelte-1lbja3y"&&(Q.innerHTML=Rl),ll=t(s),us=C(s,!1),Fs=t(s),Y=p(s,"P",{"data-svelte-h":!0}),c(Y)!=="svelte-yave0q"&&(Y.textContent=zl),nl=t(s),J=p(s,"UL",{"data-svelte-h":!0}),c(J)!=="svelte-1yfszir"&&(J.innerHTML=Gl),el=t(s),ms=C(s,!1),fs=t(s),m=p(s,"H2",{id:!0,"data-svelte-h":!0}),c(m)!=="svelte-oyeq2k"&&(m.innerHTML=Sl),al=t(s),V=p(s,"P",{"data-svelte-h":!0}),c(V)!=="svelte-3f38rf"&&(V.textContent=Xl),this.h()},h(){f(i,"id","adding-devtools-to-vite-plugins"),f(y,"id","getting-a-foothold---injecting-js-into-the-browser"),N.a=Z,f(A,"id","importing-our-own-modules"),ss.a=ls,f(D,"id","option-1-exporting-the-runtime-code-from-the-package"),ns.a=es,f(d,"id","option-2-using-a-sub-package"),as.a=ts,os.a=ps,cs.a=rs,f(u,"id","option-3-magic-module-resolution-preferred"),Cs.a=is,ys.a=As,Ds.a=ds,f(F,"id","addendum-dealing-with-fsallow"),us.a=Fs,ms.a=fs,f(m,"id","in-conclusion")},m(s,l){n(s,i,l),n(s,hs,l),n(s,h,l),n(s,vs,l),n(s,v,l),n(s,Es,l),n(s,y,l),n(s,Bs,l),n(s,E,l),n(s,xs,l),N.m(Kl,s,l),n(s,Z,l),n(s,B,l),n(s,ws,l),n(s,A,l),n(s,_s,l),n(s,x,l),n(s,bs,l),n(s,w,l),n(s,ks,l),ss.m(Ql,s,l),n(s,ls,l),n(s,_,l),n(s,gs,l),n(s,b,l),n(s,Ts,l),n(s,D,l),n(s,Ms,l),n(s,k,l),n(s,Hs,l),ns.m(Yl,s,l),n(s,es,l),n(s,g,l),n(s,Ls,l),n(s,T,l),n(s,Ps,l),n(s,M,l),n(s,js,l),n(s,d,l),n(s,Is,l),n(s,H,l),n(s,Os,l),n(s,L,l),n(s,qs,l),n(s,P,l),n(s,Us,l),as.m(Jl,s,l),n(s,ts,l),n(s,j,l),n(s,Ws,l),os.m(Vl,s,l),n(s,ps,l),n(s,I,l),n(s,Rs,l),cs.m(Nl,s,l),n(s,rs,l),n(s,O,l),n(s,zs,l),n(s,q,l),n(s,Gs,l),n(s,u,l),n(s,Ss,l),n(s,U,l),n(s,Xs,l),n(s,W,l),n(s,$s,l),n(s,R,l),n(s,Ks,l),n(s,z,l),n(s,Qs,l),n(s,G,l),n(s,Ys,l),Cs.m(Zl,s,l),n(s,is,l),ys.m(sn,s,l),n(s,As,l),n(s,S,l),n(s,Js,l),Ds.m(ln,s,l),n(s,ds,l),n(s,X,l),n(s,Vs,l),n(s,F,l),n(s,Ns,l),n(s,$,l),n(s,Zs,l),n(s,K,l),n(s,sl,l),n(s,Q,l),n(s,ll,l),us.m(nn,s,l),n(s,Fs,l),n(s,Y,l),n(s,nl,l),n(s,J,l),n(s,el,l),ms.m(en,s,l),n(s,fs,l),n(s,m,l),n(s,al,l),n(s,V,l)},p:tl,i:tl,o:tl,d(s){s&&(e(i),e(hs),e(h),e(vs),e(v),e(Es),e(y),e(Bs),e(E),e(xs),N.d(),e(Z),e(B),e(ws),e(A),e(_s),e(x),e(bs),e(w),e(ks),ss.d(),e(ls),e(_),e(gs),e(b),e(Ts),e(D),e(Ms),e(k),e(Hs),ns.d(),e(es),e(g),e(Ls),e(T),e(Ps),e(M),e(js),e(d),e(Is),e(H),e(Os),e(L),e(qs),e(P),e(Us),as.d(),e(ts),e(j),e(Ws),os.d(),e(ps),e(I),e(Rs),cs.d(),e(rs),e(O),e(zs),e(q),e(Gs),e(u),e(Ss),e(U),e(Xs),e(W),e($s),e(R),e(Ks),e(z),e(Qs),e(G),e(Ys),Cs.d(),e(is),ys.d(),e(As),e(S),e(Js),Ds.d(),e(ds),e(X),e(Vs),e(F),e(Ns),e($),e(Zs),e(K),e(sl),e(Q),e(ll),us.d(),e(Fs),e(Y),e(nl),e(J),e(el),ms.d(),e(fs),e(m),e(al),e(V))}}}class Cn extends tn{constructor(i){super(),on(this,i,null,pn,an,{})}}export{Cn as component};
