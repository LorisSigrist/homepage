import{d as Os}from"../chunks/environment.9aa685ef.js";import{S as Ws,i as Rs,s as Cs,k as o,q as l,a as i,l as p,m as c,r as u,h as s,c as r,n as k,b as t,D as e,E as ts}from"../chunks/index.328d30d5.js";const Gs=Os;function Js(){return{title:"Never write Mock Data again, with Zocker",description:"Over tha last couple weeks I've been building a library to generate mock data for my projects. Today I'm happy to announce the first stable release of Zocker, a Schema first Mock Data Generator.",published:new Date("2023-05-09"),author:"Loris Sigrist"}}const Ys=Object.freeze(Object.defineProperty({__proto__:null,csr:Gs,load:Js},Symbol.toStringTag,{value:"Module"}));function Ns(gs){let f,Tn,Y,P,xn,$,I,gn,F,D,Pn,K,m,In,v,Dn,Mn,Q,M,Sn,U,S,Hn,V,w,b,Zn,jn,X,H,An,nn,Z,Ln,sn,_,Ps='<code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev zocker</code>',an,h,On,q,Wn,Rn,tn,z,Is=`<code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> z <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'zod'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> zocker <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'zocker'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> schema <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
	name<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	age<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	isAwesome<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> mockData <span class="token operator">=</span> <span class="token function">zocker</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#123; name: "Jimmy Smith", age: 42, isAwesome: true &#125;</span></code>`,en,j,Cn,on,A,Gn,pn,E,Ds=`<code class="language-typescript"><span class="token keyword">const</span> difficult_schema <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
	id<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	name<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	age<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multipleOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	isAwesome<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	friends<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	zip<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">regex</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]&#123;5&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	children<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
		z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		z<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> difficult_schema<span class="token punctuation">)</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> mockData <span class="token operator">=</span> <span class="token function">zocker</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,cn,L,Jn,ln,O,Nn,un,W,qn,rn,R,Bn,kn,T,Ms=`<code class="language-typescript"><span class="token keyword">const</span> user <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
	name<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	age<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> mockData <span class="token operator">=</span> <span class="token function">zocker</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">supply</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>shape<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'Jimmy Smith'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// &#123; name: "Jimmy Smith", age: 42 &#125; - The name is now fixed</span></code>`,fn,C,Yn,mn,G,$n,hn,J,Fn,yn,y,Kn,B,Qn,Un,dn,x,Ss='<code class="language-typescript"><span class="token keyword">const</span> mockData <span class="token operator">=</span> <span class="token function">zocker</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSeed</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',vn,N,Vn,wn,d,Xn,g,ns,ss;return{c(){f=o("h1"),Tn=l("Never write Mock-Data again, with Zocker"),Y=i(),P=o("p"),xn=l(`The trend of zod-driven-development continues! This time, we’re going to use zod to generate
sensible mock-data for our tests.`),$=i(),I=o("h2"),gn=l("Writing Mock Data is the worst"),F=i(),D=o("p"),Pn=l("When writing tests, you often need to provide some mock-data to test your code against. This can be a real pain, especially if you need lot’s of it, and if it’s complex."),K=i(),m=o("p"),In=l("Most mock-data generation libraries, such as the excellent "),v=o("a"),Dn=l("faker"),Mn=l(", supply only individual fields, not entire data-structures."),Q=i(),M=o("p"),Sn=l("Manually assembling these fields into a data-structure is tedious, and maintenance-heavy."),U=i(),S=o("h2"),Hn=l("Enter Zocker"),V=i(),w=o("p"),b=o("a"),Zn=l("Zocker"),jn=l(` is a library I’ve built to forever
eliminate the pain of writing and maintaining mock-data. It uses your zod-schemas as a guide to generate sensible and realistic mock-data for you. This way you can focus on writing tests, not on writing mock-data. Data generation does not get harder if you need more data, or if your data gets more complex. It’s all handled for you.`),X=i(),H=o("h3"),An=l("Getting Started"),nn=i(),Z=o("p"),Ln=l("Obviously, install it first:"),sn=i(),_=o("pre"),an=i(),h=o("p"),On=l("Then, in your test-file, import the "),q=o("code"),Wn=l("zocker"),Rn=l(" function and pass it your zod-schema:"),tn=i(),z=o("pre"),en=i(),j=o("p"),Cn=l("And voilà! You have your mock-data."),on=i(),A=o("p"),Gn=l(`That was obviously a very simple example. Zocker can handle much more complex schemas, including
cyclic schemas, anys, unkowns, regular expressions, and much more. This here works just fine:`),pn=i(),E=o("pre"),cn=i(),L=o("h3"),Jn=l("Supplying values"),ln=i(),O=o("p"),Nn=l("When testing specific edge-cases, you often want to supply your own values for certain fields."),un=i(),W=o("p"),qn=l(`This can be done by “supplying” your own value, or generator function, for a schema. That value is then
used whenever a value is needed for a (sub)schema that matches the given schema by reference.`),rn=i(),R=o("p"),Bn=l("This is easier to undestand with an example:"),kn=i(),T=o("pre"),fn=i(),C=o("h3"),Yn=l("Limitations"),mn=i(),G=o("p"),$n=l(`There are a few limitations though. Zocker will never be able to generate data for preprocess or
refinement functions. At least not out of the box. We can however supply our own values for those
(sub)schemas, and side-step the issue.`),hn=i(),J=o("h3"),Fn=l("Repeatability"),yn=i(),y=o("p"),Kn=l(`By default, zocker will generate a new random value for each schema. This is great for most cases,
but can lead to flaky tests if you’re not careful. If you want to generate the same data every
time, you can set a seed using the `),B=o("code"),Qn=l("setSeed"),Un=l(" method. This will generate the same data every time."),dn=i(),x=o("pre"),vn=i(),N=o("h2"),Vn=l("Conclusion"),wn=i(),d=o("p"),Xn=l(`I hope this article has given you a taste of what zocker can do. If you want to learn more, check out
the `),g=o("a"),ns=l("documentation"),ss=l(`. In my own use, zocker has
been a huge time-saver. I hope it can help you too!`),this.h()},l(n){f=p(n,"H1",{});var a=c(f);Tn=u(a,"Never write Mock-Data again, with Zocker"),a.forEach(s),Y=r(n),P=p(n,"P",{});var es=c(P);xn=u(es,`The trend of zod-driven-development continues! This time, we’re going to use zod to generate
sensible mock-data for our tests.`),es.forEach(s),$=r(n),I=p(n,"H2",{});var os=c(I);gn=u(os,"Writing Mock Data is the worst"),os.forEach(s),F=r(n),D=p(n,"P",{});var ps=c(D);Pn=u(ps,"When writing tests, you often need to provide some mock-data to test your code against. This can be a real pain, especially if you need lot’s of it, and if it’s complex."),ps.forEach(s),K=r(n),m=p(n,"P",{});var bn=c(m);In=u(bn,"Most mock-data generation libraries, such as the excellent "),v=p(bn,"A",{href:!0,rel:!0});var cs=c(v);Dn=u(cs,"faker"),cs.forEach(s),Mn=u(bn,", supply only individual fields, not entire data-structures."),bn.forEach(s),Q=r(n),M=p(n,"P",{});var ls=c(M);Sn=u(ls,"Manually assembling these fields into a data-structure is tedious, and maintenance-heavy."),ls.forEach(s),U=r(n),S=p(n,"H2",{});var us=c(S);Hn=u(us,"Enter Zocker"),us.forEach(s),V=r(n),w=p(n,"P",{});var as=c(w);b=p(as,"A",{href:!0,rel:!0});var is=c(b);Zn=u(is,"Zocker"),is.forEach(s),jn=u(as,` is a library I’ve built to forever
eliminate the pain of writing and maintaining mock-data. It uses your zod-schemas as a guide to generate sensible and realistic mock-data for you. This way you can focus on writing tests, not on writing mock-data. Data generation does not get harder if you need more data, or if your data gets more complex. It’s all handled for you.`),as.forEach(s),X=r(n),H=p(n,"H3",{});var rs=c(H);An=u(rs,"Getting Started"),rs.forEach(s),nn=r(n),Z=p(n,"P",{});var ks=c(Z);Ln=u(ks,"Obviously, install it first:"),ks.forEach(s),sn=r(n),_=p(n,"PRE",{class:!0});var Hs=c(_);Hs.forEach(s),an=r(n),h=p(n,"P",{});var _n=c(h);On=u(_n,"Then, in your test-file, import the "),q=p(_n,"CODE",{});var fs=c(q);Wn=u(fs,"zocker"),fs.forEach(s),Rn=u(_n," function and pass it your zod-schema:"),_n.forEach(s),tn=r(n),z=p(n,"PRE",{class:!0});var Zs=c(z);Zs.forEach(s),en=r(n),j=p(n,"P",{});var ms=c(j);Cn=u(ms,"And voilà! You have your mock-data."),ms.forEach(s),on=r(n),A=p(n,"P",{});var hs=c(A);Gn=u(hs,`That was obviously a very simple example. Zocker can handle much more complex schemas, including
cyclic schemas, anys, unkowns, regular expressions, and much more. This here works just fine:`),hs.forEach(s),pn=r(n),E=p(n,"PRE",{class:!0});var js=c(E);js.forEach(s),cn=r(n),L=p(n,"H3",{});var ys=c(L);Jn=u(ys,"Supplying values"),ys.forEach(s),ln=r(n),O=p(n,"P",{});var ds=c(O);Nn=u(ds,"When testing specific edge-cases, you often want to supply your own values for certain fields."),ds.forEach(s),un=r(n),W=p(n,"P",{});var vs=c(W);qn=u(vs,`This can be done by “supplying” your own value, or generator function, for a schema. That value is then
used whenever a value is needed for a (sub)schema that matches the given schema by reference.`),vs.forEach(s),rn=r(n),R=p(n,"P",{});var ws=c(R);Bn=u(ws,"This is easier to undestand with an example:"),ws.forEach(s),kn=r(n),T=p(n,"PRE",{class:!0});var As=c(T);As.forEach(s),fn=r(n),C=p(n,"H3",{});var bs=c(C);Yn=u(bs,"Limitations"),bs.forEach(s),mn=r(n),G=p(n,"P",{});var _s=c(G);$n=u(_s,`There are a few limitations though. Zocker will never be able to generate data for preprocess or
refinement functions. At least not out of the box. We can however supply our own values for those
(sub)schemas, and side-step the issue.`),_s.forEach(s),hn=r(n),J=p(n,"H3",{});var zs=c(J);Fn=u(zs,"Repeatability"),zs.forEach(s),yn=r(n),y=p(n,"P",{});var zn=c(y);Kn=u(zn,`By default, zocker will generate a new random value for each schema. This is great for most cases,
but can lead to flaky tests if you’re not careful. If you want to generate the same data every
time, you can set a seed using the `),B=p(zn,"CODE",{});var Es=c(B);Qn=u(Es,"setSeed"),Es.forEach(s),Un=u(zn," method. This will generate the same data every time."),zn.forEach(s),dn=r(n),x=p(n,"PRE",{class:!0});var Ls=c(x);Ls.forEach(s),vn=r(n),N=p(n,"H2",{});var Ts=c(N);Vn=u(Ts,"Conclusion"),Ts.forEach(s),wn=r(n),d=p(n,"P",{});var En=c(d);Xn=u(En,`I hope this article has given you a taste of what zocker can do. If you want to learn more, check out
the `),g=p(En,"A",{href:!0,rel:!0});var xs=c(g);ns=u(xs,"documentation"),xs.forEach(s),ss=u(En,`. In my own use, zocker has
been a huge time-saver. I hope it can help you too!`),En.forEach(s),this.h()},h(){k(v,"href","https://www.npmjs.com/package/@faker-js/faker"),k(v,"rel","nofollow"),k(b,"href","https://zocker.sigrist.dev"),k(b,"rel","nofollow"),k(_,"class","language-bash"),k(z,"class","language-typescript"),k(E,"class","language-typescript"),k(T,"class","language-typescript"),k(x,"class","language-typescript"),k(g,"href","https://zocker.sigrist.dev"),k(g,"rel","nofollow")},m(n,a){t(n,f,a),e(f,Tn),t(n,Y,a),t(n,P,a),e(P,xn),t(n,$,a),t(n,I,a),e(I,gn),t(n,F,a),t(n,D,a),e(D,Pn),t(n,K,a),t(n,m,a),e(m,In),e(m,v),e(v,Dn),e(m,Mn),t(n,Q,a),t(n,M,a),e(M,Sn),t(n,U,a),t(n,S,a),e(S,Hn),t(n,V,a),t(n,w,a),e(w,b),e(b,Zn),e(w,jn),t(n,X,a),t(n,H,a),e(H,An),t(n,nn,a),t(n,Z,a),e(Z,Ln),t(n,sn,a),t(n,_,a),_.innerHTML=Ps,t(n,an,a),t(n,h,a),e(h,On),e(h,q),e(q,Wn),e(h,Rn),t(n,tn,a),t(n,z,a),z.innerHTML=Is,t(n,en,a),t(n,j,a),e(j,Cn),t(n,on,a),t(n,A,a),e(A,Gn),t(n,pn,a),t(n,E,a),E.innerHTML=Ds,t(n,cn,a),t(n,L,a),e(L,Jn),t(n,ln,a),t(n,O,a),e(O,Nn),t(n,un,a),t(n,W,a),e(W,qn),t(n,rn,a),t(n,R,a),e(R,Bn),t(n,kn,a),t(n,T,a),T.innerHTML=Ms,t(n,fn,a),t(n,C,a),e(C,Yn),t(n,mn,a),t(n,G,a),e(G,$n),t(n,hn,a),t(n,J,a),e(J,Fn),t(n,yn,a),t(n,y,a),e(y,Kn),e(y,B),e(B,Qn),e(y,Un),t(n,dn,a),t(n,x,a),x.innerHTML=Ss,t(n,vn,a),t(n,N,a),e(N,Vn),t(n,wn,a),t(n,d,a),e(d,Xn),e(d,g),e(g,ns),e(d,ss)},p:ts,i:ts,o:ts,d(n){n&&s(f),n&&s(Y),n&&s(P),n&&s($),n&&s(I),n&&s(F),n&&s(D),n&&s(K),n&&s(m),n&&s(Q),n&&s(M),n&&s(U),n&&s(S),n&&s(V),n&&s(w),n&&s(X),n&&s(H),n&&s(nn),n&&s(Z),n&&s(sn),n&&s(_),n&&s(an),n&&s(h),n&&s(tn),n&&s(z),n&&s(en),n&&s(j),n&&s(on),n&&s(A),n&&s(pn),n&&s(E),n&&s(cn),n&&s(L),n&&s(ln),n&&s(O),n&&s(un),n&&s(W),n&&s(rn),n&&s(R),n&&s(kn),n&&s(T),n&&s(fn),n&&s(C),n&&s(mn),n&&s(G),n&&s(hn),n&&s(J),n&&s(yn),n&&s(y),n&&s(dn),n&&s(x),n&&s(vn),n&&s(N),n&&s(wn),n&&s(d)}}}class $s extends Ws{constructor(f){super(),Rs(this,f,null,Ns,Cs,{})}}export{$s as component,Ys as universal};
