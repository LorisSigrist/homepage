import{s as Xa,j as fn,n as xs}from"../chunks/scheduler.IgQUtjbl.js";import{S as Za,i as nt,g as e,s as p,h as o,C as i,c as l,j as u,f as s,k as c,l as yn,a as t}from"../chunks/index.D4Vnkr5k.js";const st=""+new URL("../assets/for-await-of-compat._bERJMJ2.webp",import.meta.url).href,da={width:1575,height:588},at="#dfdedf",tt=""+new URL("../assets/raw-stream.DkUx9HyX.gif",import.meta.url).href,ha={width:1146,height:906},et="#e0e3df",ot=""+new URL("../assets/text-stream.BFOpZF0n.gif",import.meta.url).href,ma={width:818,height:568},pt="#e2e4d7",lt=""+new URL("../assets/parse-result-value-stream.Boa0oDeb.gif",import.meta.url).href,wa={width:818,height:568},ct="#f2f3ac",it=""+new URL("../assets/final-stream.BHcIhiV8.gif",import.meta.url).href,fa={width:1178,height:568},ut="#e2e5d8",rt=""+new URL("../assets/non-stream-load.BSLSw6KO.gif",import.meta.url).href,ya={width:1178,height:788},kt="#ecedcc",dt=""+new URL("../assets/stream-load.CH72huFO.gif",import.meta.url).href,ga={width:1178,height:788},ht="#ededcd";function mt(va){let w,_s='<a href="#the-better-way-to-load-data">The Better Way to load data</a>',gn,g,Ss="When we are loading lists in out web-apps, we usually do the following. Our app makes a fetch request to a server, waits for all the data to arrive, maybe the app validates it, and then displays the items.",vn,v,ba=`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> TodosSchema<span class="token punctuation">,</span> <span class="token keyword">type</span> <span class="token class-name">Todo</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./model"</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> display <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"my-framework"</span>

<span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/todos"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//fetch</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//wait</span>
<span class="token keyword">const</span> todos <span class="token operator">=</span> TodosSchema<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>     <span class="token comment">//validate</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> todo <span class="token keyword">of</span> todos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">display</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,bn,b,Cs="But what if there are hundreds of items and the connection to the server is slow. If we wait for the entire response to arrive the user is going to see absolutely nothing for several seconds, and then see all the items at once. This feels sluggish. Unfortunately, for anyone taking the subway, this is a daily experience.",Tn,f,Ls,xn,T,Ps="There might be a better way though. We don’t actually need to wait for all the data before we start displaying it. Once the data for the first item has made it over the network, we should be able display it. Having the items trickle in as the data arrives over the network would be a much nicer user experience.",_n,x,Ms="In this post we are going to implement this using streams.",Sn,_,Hs="<p>Quick note: In the Javascript world there are two different Stream APIs: Node Streams, and Web streams. Node Streams only work in Node, whereas Web Streams work both in Browsers and Node. Also, web-streams are sometimes called WHATWG-streams, after the standards organisation, It’s a mess.</p> <p>We will be using web-streams.</p>",Cn,S,Is="Fortunately this won’t be that hard.",Ln,C,Es="Our trusty fetch API is designed to make streaming easy. <code>response.body</code> is actually a stream that will give you access to the raw data coming in over the network, as it is coming in.",Pn,L,Os=`Let’s visualise that by logging each chunk of data as it arrives.
We can access a stream’s data by getting it’s reader and waiting for a value to arrive. Once a value arrives we log it and again wait for the next value, and then the next value, etc, until the stream is done.`,Mn,P,Ta=`<code class="language-ts"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> stream <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token punctuation">;</span>

<span class="token keyword">const</span> reader <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Get reader (boilerplate)</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value<span class="token punctuation">,</span> done <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//wait for value</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Hn,M,js="We now see see a bunch of <code>Uint8Arrays</code> in the console. This is the raw binary data arriving over the network.",In,y,Rs,En,H,Ws=`But we want text, so let’s convert the raw data to text. We can modify a stream’s data using a TransformStream. A TransformStream takes in a stream, runs some logic on each chunk of data as it arrives, and writes the result to an outgoing stream.
In our case, we want a TransformStream that takes in a stream of raw binary data and outputs a stream of strings. This is such a common task that there actually is a built in one, the <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextDecoderStream" rel="noopener noreferrer" target="_blank"><code>TextDecoderStream</code></a>. Let’s use that. Don’t worry, we will be creating our own TransformStreams later on.`,On,I,Gs="Let’s hook the TextDecoder up to our stream using the <code>pipeThrough</code> method. This will return a new stream with the transform applied.",jn,E,xa='<code class="language-ts"><span class="token keyword">const</span> stream <span class="token operator">=</span> request<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">pipeThrough</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextDecoderStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',Rn,O,zs="We now have a bunch of readable strings in the console.",Wn,r,As,Gn,j,Ns="But we really want a stream of objects that represent our items. We can’t just <code>JSON.parse</code> each string-chunk, they don’t line up with the JSON structure; What we need is a streaming JSON parser.",zn,R,qs='Writing our own would be hard and undifferentiated work, so instead we’re going to use a library. There is a fantastic one called <a href="https://www.npmjs.com/package/@streamparser/json-whatwg" rel="noopener noreferrer" target="_blank"><code>@streamparser/json-whatwg</code></a> which can create a TransformStream that takes in json-data and returns parsed objects.',An,W,_a='<code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> @streamparser/json-whatwg</code>',Nn,G,Js="We can initialise the TransformStream using the <code>JSONParser</code> constructor. We want each object in our todo-array to be emitted one after the other as they trickle in so let’s configure the parser for that. We can provide a pattern of which paths should be emitted as the <code>paths</code> option; like a regex that runs on the paths. We want each child of the top-level array to be emitted. This can be expressed using the <code>$.*</code> pattern. The dollar-sign is always the top-level object, the array in our case, and the star is a wildcard that matches each direct child.",qn,z,Us="Let’s add this parser to our stream-chain. This parser can also do the text-decoding internally so we don’t need the <code>TextDecoderStream</code> anymore.",Jn,A,Sa=`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> JSONParser <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@streamparser/json-whatwg"</span>
<span class="token operator">...</span>
<span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONParser</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> paths<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"$.*"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> stream <span class="token operator">=</span> response<span class="token punctuation">.</span>body
	<span class="token punctuation">.</span><span class="token function">pipeThrough</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span></code>`,Un,N,Bs="<p>Optional Performance optimization: Add <code>keepStack: false, stringBufferSize: undefined</code> along with the paths option.</p>",Bn,q,Ds="In the console we now see a bunch of weird objects. The <code>value</code> property in each one contains our list items in their fully parsed glory. <code>JSONParser</code> emits what it calls “ParsedElementInfo” objects, which contain the parsed values as well as some extra metadata. That’s what we’re seeing.",Dn,k,Fs,Fn,J,Vs="Since we only care about the parsed values, let’s map over each element in the stream using, you guessed it, another Transform Stream. This time we’ll create our own. The constructor takes an object with some lifecycle methods. The <code>start</code> method runs when the stream starts, the <code>flush</code> method runs if the stream is about to be closed, and the <code>transform</code> method runs whenever a new chunk of data arrives. We will only be using <code>transform</code> . It takes two arguments the first one is the chunk of incoming data, in our case that is the ParsedElementInfo object from the JSONParser, and the second one is a stream-controller for the output stream. The stream-controller is how we write to or close the output stream. Here we enqueue the value property of each parsed element.",Vn,U,Ca=`<code class="language-ts"><span class="token keyword">const</span> mapToValueStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransformStream</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
	<span class="token function">transform</span><span class="token punctuation">(</span>parsedElementInfo<span class="token punctuation">,</span> controller<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		controller<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>parsedElementInfo<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Kn,B,Ks="Let’s tack on our TransformStream and look at the console.",Qn,D,La=`<code class="language-ts"><span class="token keyword">const</span> stream <span class="token operator">=</span> response<span class="token punctuation">.</span>body
	<span class="token punctuation">.</span><span class="token function">pipeThrough</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">pipeThrough</span><span class="token punctuation">(</span>valueStream<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,$n,d,Qs,Yn,F,$s="That’s looking good already! We get list-items trickling in as the data is arriving over the network!",Xn,V,Ys="Let’s replace the log-statement with our rendering logic. I want to keep this post framework agnostic, so I won’t spend much time here. This is where you would hook into your UI framework.",Zn,K,Pa=`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> display <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"my-framework"</span>
<span class="token operator">...</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value<span class="token punctuation">,</span> done <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token function">display</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,ns,h,Xs,ss,Q,Zs="Just what we wanted!",as,$,na="The original code we had did one more thing that we are not yet doing. It validated the data. Let’s add that. We’re going to need another TransformStream. This one is very similar to the one we already made. We need to validate each element in the stream, and write it to the output if and only if it’s valid. You could throw an error if an item is invalid; I’m just going to fail silently.",ts,Y,Ma=`<code class="language-ts"><span class="token keyword">const</span> validateItemStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransformStream<span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token punctuation">,</span> Item<span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
	<span class="token function">transform</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> controller<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
			controller<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>ItemSchema<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,es,X,sa="Let’s add it to the stream-chain. Still Works!",os,Z,Ha=`<code class="language-ts"><span class="token keyword">const</span> stream <span class="token operator">=</span> response<span class="token punctuation">.</span>body
	<span class="token punctuation">.</span><span class="token function">pipeThrough</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">pipeThrough</span><span class="token punctuation">(</span>valueStream<span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">pipeThrough</span><span class="token punctuation">(</span>validateTodoStream<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,ps,nn,aa="We’ve now implemented all the original functionality in a streaming manner, but there is an opportunity to refactor here. Our two TransformStreams are very similar. They each execute a mapping function over every element, and emit the result. Let’s DRY that up. We’re going to make a helper called MapStream that takes the mapping-function as an argument and returns a TransformStream that runs it for each chunk. If it throws, we ignore the element.",ls,sn,Ia=`<code class="language-js"><span class="token comment">// helpers.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> MapStream<span class="token operator">&lt;</span><span class="token constant">I</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function-variable function">map</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">i</span><span class="token operator">:</span> <span class="token constant">I</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">O</span><span class="token punctuation">)</span><span class="token operator">:</span> TransformStream<span class="token operator">&lt;</span><span class="token constant">I</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TransformStream</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
		<span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">chunk<span class="token punctuation">,</span> controller</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
				controller<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token function">map</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,cs,an,ta="We can now rewrite both our TransformStreams using the helper.",is,tn,Ea=`<code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> MapStream <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./helpers"</span>
<span class="token operator">...</span>
<span class="token keyword">const</span> stream <span class="token operator">=</span> response<span class="token punctuation">.</span>body
	<span class="token punctuation">.</span><span class="token function">pipeThrough</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">pipeThrough</span><span class="token punctuation">(</span><span class="token function">MapStream</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=></span> result<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">pipeThrough</span><span class="token punctuation">(</span><span class="token function">MapStream</span><span class="token punctuation">(</span>TodoSchema<span class="token punctuation">.</span>parse<span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,us,en,ea="Very expressive, isn’t it?",rs,on,oa="With that, our implementation is done. But there is one more thing I would like to refactor; this while loop at the bottom. According to the spec, you’re supposed to be able to consume streams using a <code>for await of</code> loop, but not everyone implements this.",ks,pn,Oa=`<code class="language-js"><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> todo <span class="token keyword">of</span> stream<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">display</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ds,m,pa,hs,ln,la="Let’s write another helper that let’s us use the nicer syntax. If you’ve never used async-generators before, this will look unintelligible. That’s ok, this is entirely optional; Just stick with the while loop.",ms,cn,ja=`<code class="language-ts"><span class="token comment">// helpers.ts</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">asIterable</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>stream<span class="token operator">:</span> ReadableStream<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> AsyncGenerator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> reader <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value<span class="token punctuation">,</span> done <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">yield</span> value<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,ws,un,ca="We can now use <code>for await (const todo of asIterable(stream))</code> to asynchronously loop over the elements in the stream. I find this easier to read, since there is no control-flow.",fs,rn,Ra=`<code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> MapStream<span class="token punctuation">,</span> asIterable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./helpers"</span>
<span class="token operator">...</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> todo <span class="token keyword">of</span> <span class="token function">asIterable</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">display</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ys,kn,ia="The final code looks like this:",gs,dn,Wa=`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> JSONParser <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@streamparser/json-whatwg'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> MapStream<span class="token punctuation">,</span> asIterable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./helpers'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> TodoSchema <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./TodoSchema'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/todos.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONParser</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
	paths<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'$.*'</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> stream <span class="token operator">=</span> response<span class="token punctuation">.</span>body
	<span class="token punctuation">.</span><span class="token function">pipeThrough</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">pipeThrough</span><span class="token punctuation">(</span><span class="token function">MapStream</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=></span> result<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">pipeThrough</span><span class="token punctuation">(</span><span class="token function">MapStream</span><span class="token punctuation">(</span>TodoSchema<span class="token punctuation">.</span>parse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> todo <span class="token keyword">of</span> <span class="token function">asIterable</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">display</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,vs,hn,ua="A few observations to close out.",bs,mn,ra="<li>On slow connections, the Streaming version is both faster to show stuff to the user and also finishes earlier, since the parsing and validation happen in parallel with the fetching. On fast connections, the performance difference is negligible.</li> <li>Once the <code>MapStream</code> and <code>asIterable</code> helpers are defined, the streaming version of the code isn’t meaningfully longer. The effort for both versions is about the same.</li> <li>The bundle size for the streaming versions is slightly larger than the non-streaming version since we need to ship the JSONParser (+20kB). This isn’t always worth it. On sites with long session times it likely <em>is</em> worth it, since the extra code is only sent once and every subsequent request can be sped up. In PWAs, where your code is already cached on the client, streaming is a no brainer.</li>",Ts,wn,ka="There is a lot more you can do with streams, I really encourage you to play around with them. They’re a really powerful idea that applies to much more than just data-fetching. I hope you’ve learned something and have a good day.";return{c(){w=e("h1"),w.innerHTML=_s,gn=p(),g=e("p"),g.textContent=Ss,vn=p(),v=e("pre"),bn=p(),b=e("p"),b.textContent=Cs,Tn=p(),f=e("img"),xn=p(),T=e("p"),T.textContent=Ps,_n=p(),x=e("p"),x.textContent=Ms,Sn=p(),_=e("blockquote"),_.innerHTML=Hs,Cn=p(),S=e("p"),S.textContent=Is,Ln=p(),C=e("p"),C.innerHTML=Es,Pn=p(),L=e("p"),L.textContent=Os,Mn=p(),P=e("pre"),Hn=p(),M=e("p"),M.innerHTML=js,In=p(),y=e("img"),En=p(),H=e("p"),H.innerHTML=Ws,On=p(),I=e("p"),I.innerHTML=Gs,jn=p(),E=e("pre"),Rn=p(),O=e("p"),O.textContent=zs,Wn=p(),r=e("img"),Gn=p(),j=e("p"),j.innerHTML=Ns,zn=p(),R=e("p"),R.innerHTML=qs,An=p(),W=e("pre"),Nn=p(),G=e("p"),G.innerHTML=Js,qn=p(),z=e("p"),z.innerHTML=Us,Jn=p(),A=e("pre"),Un=p(),N=e("blockquote"),N.innerHTML=Bs,Bn=p(),q=e("p"),q.innerHTML=Ds,Dn=p(),k=e("img"),Fn=p(),J=e("p"),J.innerHTML=Vs,Vn=p(),U=e("pre"),Kn=p(),B=e("p"),B.textContent=Ks,Qn=p(),D=e("pre"),$n=p(),d=e("img"),Yn=p(),F=e("p"),F.textContent=$s,Xn=p(),V=e("p"),V.textContent=Ys,Zn=p(),K=e("pre"),ns=p(),h=e("img"),ss=p(),Q=e("p"),Q.textContent=Zs,as=p(),$=e("p"),$.textContent=na,ts=p(),Y=e("pre"),es=p(),X=e("p"),X.textContent=sa,os=p(),Z=e("pre"),ps=p(),nn=e("p"),nn.textContent=aa,ls=p(),sn=e("pre"),cs=p(),an=e("p"),an.textContent=ta,is=p(),tn=e("pre"),us=p(),en=e("p"),en.textContent=ea,rs=p(),on=e("p"),on.innerHTML=oa,ks=p(),pn=e("pre"),ds=p(),m=e("img"),hs=p(),ln=e("p"),ln.textContent=la,ms=p(),cn=e("pre"),ws=p(),un=e("p"),un.innerHTML=ca,fs=p(),rn=e("pre"),ys=p(),kn=e("p"),kn.textContent=ia,gs=p(),dn=e("pre"),vs=p(),hn=e("p"),hn.textContent=ua,bs=p(),mn=e("ol"),mn.innerHTML=ra,Ts=p(),wn=e("p"),wn.textContent=ka,this.h()},l(n){w=o(n,"H1",{id:!0,"data-svelte-h":!0}),i(w)!=="svelte-1tquwwz"&&(w.innerHTML=_s),gn=l(n),g=o(n,"P",{"data-svelte-h":!0}),i(g)!=="svelte-10izeu3"&&(g.textContent=Ss),vn=l(n),v=o(n,"PRE",{class:!0});var a=u(v);a.forEach(s),bn=l(n),b=o(n,"P",{"data-svelte-h":!0}),i(b)!=="svelte-1waqisa"&&(b.textContent=Cs),Tn=l(n),f=o(n,"IMG",{src:!0,width:!0,height:!0,alt:!0}),xn=l(n),T=o(n,"P",{"data-svelte-h":!0}),i(T)!=="svelte-1e5tf9p"&&(T.textContent=Ps),_n=l(n),x=o(n,"P",{"data-svelte-h":!0}),i(x)!=="svelte-1mgs7p8"&&(x.textContent=Ms),Sn=l(n),_=o(n,"BLOCKQUOTE",{"data-svelte-h":!0}),i(_)!=="svelte-14ytl9r"&&(_.innerHTML=Hs),Cn=l(n),S=o(n,"P",{"data-svelte-h":!0}),i(S)!=="svelte-166in9b"&&(S.textContent=Is),Ln=l(n),C=o(n,"P",{"data-svelte-h":!0}),i(C)!=="svelte-1pdvwy4"&&(C.innerHTML=Es),Pn=l(n),L=o(n,"P",{"data-svelte-h":!0}),i(L)!=="svelte-h55bag"&&(L.textContent=Os),Mn=l(n),P=o(n,"PRE",{class:!0});var Ga=u(P);Ga.forEach(s),Hn=l(n),M=o(n,"P",{"data-svelte-h":!0}),i(M)!=="svelte-fcg9yf"&&(M.innerHTML=js),In=l(n),y=o(n,"IMG",{src:!0,width:!0,height:!0,alt:!0}),En=l(n),H=o(n,"P",{"data-svelte-h":!0}),i(H)!=="svelte-n1hc4n"&&(H.innerHTML=Ws),On=l(n),I=o(n,"P",{"data-svelte-h":!0}),i(I)!=="svelte-owqyst"&&(I.innerHTML=Gs),jn=l(n),E=o(n,"PRE",{class:!0});var za=u(E);za.forEach(s),Rn=l(n),O=o(n,"P",{"data-svelte-h":!0}),i(O)!=="svelte-1igzqy3"&&(O.textContent=zs),Wn=l(n),r=o(n,"IMG",{src:!0,width:!0,height:!0,alt:!0,loading:!0}),Gn=l(n),j=o(n,"P",{"data-svelte-h":!0}),i(j)!=="svelte-14fgtdo"&&(j.innerHTML=Ns),zn=l(n),R=o(n,"P",{"data-svelte-h":!0}),i(R)!=="svelte-1nabusx"&&(R.innerHTML=qs),An=l(n),W=o(n,"PRE",{class:!0});var Aa=u(W);Aa.forEach(s),Nn=l(n),G=o(n,"P",{"data-svelte-h":!0}),i(G)!=="svelte-19puwgb"&&(G.innerHTML=Js),qn=l(n),z=o(n,"P",{"data-svelte-h":!0}),i(z)!=="svelte-1ir7oz5"&&(z.innerHTML=Us),Jn=l(n),A=o(n,"PRE",{class:!0});var Na=u(A);Na.forEach(s),Un=l(n),N=o(n,"BLOCKQUOTE",{"data-svelte-h":!0}),i(N)!=="svelte-1en34yb"&&(N.innerHTML=Bs),Bn=l(n),q=o(n,"P",{"data-svelte-h":!0}),i(q)!=="svelte-18hh2of"&&(q.innerHTML=Ds),Dn=l(n),k=o(n,"IMG",{src:!0,width:!0,height:!0,alt:!0,loading:!0}),Fn=l(n),J=o(n,"P",{"data-svelte-h":!0}),i(J)!=="svelte-1bec8xu"&&(J.innerHTML=Vs),Vn=l(n),U=o(n,"PRE",{class:!0});var qa=u(U);qa.forEach(s),Kn=l(n),B=o(n,"P",{"data-svelte-h":!0}),i(B)!=="svelte-1r27hss"&&(B.textContent=Ks),Qn=l(n),D=o(n,"PRE",{class:!0});var Ja=u(D);Ja.forEach(s),$n=l(n),d=o(n,"IMG",{src:!0,width:!0,height:!0,alt:!0,loading:!0}),Yn=l(n),F=o(n,"P",{"data-svelte-h":!0}),i(F)!=="svelte-2kxuce"&&(F.textContent=$s),Xn=l(n),V=o(n,"P",{"data-svelte-h":!0}),i(V)!=="svelte-1sp1uam"&&(V.textContent=Ys),Zn=l(n),K=o(n,"PRE",{class:!0});var Ua=u(K);Ua.forEach(s),ns=l(n),h=o(n,"IMG",{src:!0,width:!0,height:!0,alt:!0,loading:!0}),ss=l(n),Q=o(n,"P",{"data-svelte-h":!0}),i(Q)!=="svelte-8o6b7i"&&(Q.textContent=Zs),as=l(n),$=o(n,"P",{"data-svelte-h":!0}),i($)!=="svelte-26lz5m"&&($.textContent=na),ts=l(n),Y=o(n,"PRE",{class:!0});var Ba=u(Y);Ba.forEach(s),es=l(n),X=o(n,"P",{"data-svelte-h":!0}),i(X)!=="svelte-143g0y4"&&(X.textContent=sa),os=l(n),Z=o(n,"PRE",{class:!0});var Da=u(Z);Da.forEach(s),ps=l(n),nn=o(n,"P",{"data-svelte-h":!0}),i(nn)!=="svelte-z1901r"&&(nn.textContent=aa),ls=l(n),sn=o(n,"PRE",{class:!0});var Fa=u(sn);Fa.forEach(s),cs=l(n),an=o(n,"P",{"data-svelte-h":!0}),i(an)!=="svelte-16ergwb"&&(an.textContent=ta),is=l(n),tn=o(n,"PRE",{class:!0});var Va=u(tn);Va.forEach(s),us=l(n),en=o(n,"P",{"data-svelte-h":!0}),i(en)!=="svelte-1levvwx"&&(en.textContent=ea),rs=l(n),on=o(n,"P",{"data-svelte-h":!0}),i(on)!=="svelte-7lz10"&&(on.innerHTML=oa),ks=l(n),pn=o(n,"PRE",{class:!0});var Ka=u(pn);Ka.forEach(s),ds=l(n),m=o(n,"IMG",{src:!0,width:!0,height:!0,alt:!0,loading:!0}),hs=l(n),ln=o(n,"P",{"data-svelte-h":!0}),i(ln)!=="svelte-jzzcb8"&&(ln.textContent=la),ms=l(n),cn=o(n,"PRE",{class:!0});var Qa=u(cn);Qa.forEach(s),ws=l(n),un=o(n,"P",{"data-svelte-h":!0}),i(un)!=="svelte-3mjbt0"&&(un.innerHTML=ca),fs=l(n),rn=o(n,"PRE",{class:!0});var $a=u(rn);$a.forEach(s),ys=l(n),kn=o(n,"P",{"data-svelte-h":!0}),i(kn)!=="svelte-vzc5cp"&&(kn.textContent=ia),gs=l(n),dn=o(n,"PRE",{class:!0});var Ya=u(dn);Ya.forEach(s),vs=l(n),hn=o(n,"P",{"data-svelte-h":!0}),i(hn)!=="svelte-1vn92sb"&&(hn.textContent=ua),bs=l(n),mn=o(n,"OL",{"data-svelte-h":!0}),i(mn)!=="svelte-5fot8a"&&(mn.innerHTML=ra),Ts=l(n),wn=o(n,"P",{"data-svelte-h":!0}),i(wn)!=="svelte-mnwotl"&&(wn.textContent=ka),this.h()},h(){c(w,"id","the-better-way-to-load-data"),c(v,"class","language-ts"),fn(f.src,Ls=rt)||c(f,"src",Ls),c(f,"width",ya.width),c(f,"height",ya.height),c(f,"alt","A list of items loading for a long time, and then being filled all at once"),yn(f,"background-color",kt),c(P,"class","language-ts"),fn(y.src,Rs=tt)||c(y,"src",Rs),c(y,"width",ha.width),c(y,"height",ha.height),c(y,"alt","A bunch of Uint8Arrays being logged to the console"),yn(y,"background-color",et),c(E,"class","language-ts"),fn(r.src,As=ot)||c(r,"src",As),c(r,"width",ma.width),c(r,"height",ma.height),c(r,"alt","A bunch of strings being logged to the console, with each being a chunk of a big JSON string"),c(r,"loading","lazy"),yn(r,"background-color",pt),c(W,"class","language-bash"),c(A,"class","language-ts"),fn(k.src,Fs=lt)||c(k,"src",Fs),c(k,"width",wa.width),c(k,"height",wa.height),c(k,"alt","A bunch of objects with the properties value,key,parent and stack being logged to the console"),c(k,"loading","lazy"),yn(k,"background-color",ct),c(U,"class","language-ts"),c(D,"class","language-ts"),fn(d.src,Qs=it)||c(d,"src",Qs),c(d,"width",fa.width),c(d,"height",fa.height),c(d,"alt","Each object in the list being logged out one after the other"),c(d,"loading","lazy"),yn(d,"background-color",ut),c(K,"class","language-ts"),fn(h.src,Xs=dt)||c(h,"src",Xs),c(h,"width",ga.width),c(h,"height",ga.height),c(h,"alt","The list being rendered one item at a time"),c(h,"loading","lazy"),yn(h,"background-color",ht),c(Y,"class","language-ts"),c(Z,"class","language-ts"),c(sn,"class","language-js"),c(tn,"class","language-js"),c(pn,"class","language-js"),fn(m.src,pa=st)||c(m,"src",pa),c(m,"width",da.width),c(m,"height",da.height),c(m,"alt","Table showing that the 'for await of' syntax is only supported in Node, Deno and Firefox"),c(m,"loading","lazy"),yn(m,"background-color",at),c(cn,"class","language-ts"),c(rn,"class","language-js"),c(dn,"class","language-ts")},m(n,a){t(n,w,a),t(n,gn,a),t(n,g,a),t(n,vn,a),t(n,v,a),v.innerHTML=ba,t(n,bn,a),t(n,b,a),t(n,Tn,a),t(n,f,a),t(n,xn,a),t(n,T,a),t(n,_n,a),t(n,x,a),t(n,Sn,a),t(n,_,a),t(n,Cn,a),t(n,S,a),t(n,Ln,a),t(n,C,a),t(n,Pn,a),t(n,L,a),t(n,Mn,a),t(n,P,a),P.innerHTML=Ta,t(n,Hn,a),t(n,M,a),t(n,In,a),t(n,y,a),t(n,En,a),t(n,H,a),t(n,On,a),t(n,I,a),t(n,jn,a),t(n,E,a),E.innerHTML=xa,t(n,Rn,a),t(n,O,a),t(n,Wn,a),t(n,r,a),t(n,Gn,a),t(n,j,a),t(n,zn,a),t(n,R,a),t(n,An,a),t(n,W,a),W.innerHTML=_a,t(n,Nn,a),t(n,G,a),t(n,qn,a),t(n,z,a),t(n,Jn,a),t(n,A,a),A.innerHTML=Sa,t(n,Un,a),t(n,N,a),t(n,Bn,a),t(n,q,a),t(n,Dn,a),t(n,k,a),t(n,Fn,a),t(n,J,a),t(n,Vn,a),t(n,U,a),U.innerHTML=Ca,t(n,Kn,a),t(n,B,a),t(n,Qn,a),t(n,D,a),D.innerHTML=La,t(n,$n,a),t(n,d,a),t(n,Yn,a),t(n,F,a),t(n,Xn,a),t(n,V,a),t(n,Zn,a),t(n,K,a),K.innerHTML=Pa,t(n,ns,a),t(n,h,a),t(n,ss,a),t(n,Q,a),t(n,as,a),t(n,$,a),t(n,ts,a),t(n,Y,a),Y.innerHTML=Ma,t(n,es,a),t(n,X,a),t(n,os,a),t(n,Z,a),Z.innerHTML=Ha,t(n,ps,a),t(n,nn,a),t(n,ls,a),t(n,sn,a),sn.innerHTML=Ia,t(n,cs,a),t(n,an,a),t(n,is,a),t(n,tn,a),tn.innerHTML=Ea,t(n,us,a),t(n,en,a),t(n,rs,a),t(n,on,a),t(n,ks,a),t(n,pn,a),pn.innerHTML=Oa,t(n,ds,a),t(n,m,a),t(n,hs,a),t(n,ln,a),t(n,ms,a),t(n,cn,a),cn.innerHTML=ja,t(n,ws,a),t(n,un,a),t(n,fs,a),t(n,rn,a),rn.innerHTML=Ra,t(n,ys,a),t(n,kn,a),t(n,gs,a),t(n,dn,a),dn.innerHTML=Wa,t(n,vs,a),t(n,hn,a),t(n,bs,a),t(n,mn,a),t(n,Ts,a),t(n,wn,a)},p:xs,i:xs,o:xs,d(n){n&&(s(w),s(gn),s(g),s(vn),s(v),s(bn),s(b),s(Tn),s(f),s(xn),s(T),s(_n),s(x),s(Sn),s(_),s(Cn),s(S),s(Ln),s(C),s(Pn),s(L),s(Mn),s(P),s(Hn),s(M),s(In),s(y),s(En),s(H),s(On),s(I),s(jn),s(E),s(Rn),s(O),s(Wn),s(r),s(Gn),s(j),s(zn),s(R),s(An),s(W),s(Nn),s(G),s(qn),s(z),s(Jn),s(A),s(Un),s(N),s(Bn),s(q),s(Dn),s(k),s(Fn),s(J),s(Vn),s(U),s(Kn),s(B),s(Qn),s(D),s($n),s(d),s(Yn),s(F),s(Xn),s(V),s(Zn),s(K),s(ns),s(h),s(ss),s(Q),s(as),s($),s(ts),s(Y),s(es),s(X),s(os),s(Z),s(ps),s(nn),s(ls),s(sn),s(cs),s(an),s(is),s(tn),s(us),s(en),s(rs),s(on),s(ks),s(pn),s(ds),s(m),s(hs),s(ln),s(ms),s(cn),s(ws),s(un),s(fs),s(rn),s(ys),s(kn),s(gs),s(dn),s(vs),s(hn),s(bs),s(mn),s(Ts),s(wn))}}}class yt extends Za{constructor(w){super(),nt(this,w,null,mt,Xa,{})}}export{yt as component};
