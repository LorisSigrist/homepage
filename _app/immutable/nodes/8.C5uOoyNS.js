import{s as gs,n as ts}from"../chunks/scheduler.IgQUtjbl.js";import{S as _s,i as Ms,g as o,s as t,H as U,e as xs,h as p,C as c,c as e,G as I,k as j,a,f as n}from"../chunks/index.BUVdxXQj.js";function Ss(ws){let y,es='<a href="#declarative-exception-handling">Declarative Exception Handling</a>',q,D,os="In this article we will explore a potential remedy to the nightmare that is error handling in JS.",W,i,ps='<a href="#the-state-of-error-handling-in-js">The State of Error Handling in JS</a>',z,f,cs="If you have a function that might fail, you would probably do something like this.",J,b,Hs=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">let</span><span style="color:#E4F0FB"> result</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#D0679D">try</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#91B4D5">  const</span><span style="color:#E4F0FB"> user</span><span style="color:#91B4D5"> =</span><span style="color:#E4F0FBD0"> unsafe</span><span style="color:#A6ACCD">();</span></span>
<span class="line"><span style="color:#E4F0FB">  result</span><span style="color:#91B4D5"> =</span><span style="color:#E4F0FB"> user</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">name</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#D0679D">catch</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">e</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#E4F0FB">  result</span><span style="color:#91B4D5"> =</span><span style="color:#D0679D"> null</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span></code></pre>`,k,B,ys=`This very common implementation has a bug though. It handles all exceptions, not just the ones we expect to happen during normal operation.
If <code>usafe</code> has a Syntax error in it’s implementation this would silently swallow it. We don’t want that.`,O,F,is=`A better implementation would be to throw custom error-types for all your expected exceptions
and test anything that’s thrown against those.`,G,T,vs=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">class</span><span style="color:#ADD7FF"> CustomException1</span><span style="color:#5DE4C7"> extends</span><span style="color:#ADD7FF"> Error</span><span style="color:#A6ACCD"> &#123;&#125;</span></span>
<span class="line"><span style="color:#91B4D5">class</span><span style="color:#ADD7FF"> CustomException2</span><span style="color:#5DE4C7"> extends</span><span style="color:#ADD7FF"> Error</span><span style="color:#A6ACCD"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">let</span><span style="color:#E4F0FB"> result</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#D0679D">try</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#91B4D5">   const</span><span style="color:#E4F0FB"> user</span><span style="color:#91B4D5"> =</span><span style="color:#E4F0FBD0"> unsafe</span><span style="color:#A6ACCD">(); </span><span style="color:#767C9DB0;font-style:italic">//throws CustomException1 &#x26; 2</span></span>
<span class="line"><span style="color:#E4F0FB">   result</span><span style="color:#91B4D5"> =</span><span style="color:#E4F0FB"> user</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">name</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#D0679D">catch</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">e</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">  if(</span><span style="color:#E4F0FB">e</span><span style="color:#91B4D5"> instanceof</span><span style="color:#A6ACCDC0"> CustomException1</span><span style="color:#A6ACCD">) </span><span style="color:#E4F0FB">result</span><span style="color:#91B4D5"> =</span><span style="color:#D0679D"> null</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#A6ACCD">  else if (</span><span style="color:#E4F0FB">e</span><span style="color:#91B4D5"> instanceof</span><span style="color:#A6ACCDC0"> CustomException2</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#E4F0FB">    console</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">warn</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">CustomeException2</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">);</span></span>
<span class="line"><span style="color:#E4F0FB">    result</span><span style="color:#91B4D5"> =</span><span style="color:#D0679D"> null</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#A6ACCD">  &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">  else </span><span style="color:#D0679D">throw</span><span style="color:#E4F0FB"> e</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span></code></pre>`,g,u,rs=`But the code here gets really really ugly really really fast. We have to imperatively check which Execution path we should take,
opening up the door to many silly bugs.`,V,r,Cs='<a href="#what-we-want">What we want</a>',Y,h,As=`Wouldn’t it be really nice if we could declaratively define each execution path an the right thing just happened?
Other languages like Rust would make this pretty easy using Errors-As-Values and <code>match</code> statements. Something like this:`,K,_,bs=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">let</span><span style="color:#E4F0FB"> result</span><span style="color:#91B4D5"> =</span><span style="color:#A6ACCD"> match </span><span style="color:#ADD7FF">unsafe_fn</span><span style="color:#A6ACCD">() &#123;</span></span>
<span class="line"><span style="color:#A6ACCDC0">    Ok</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">user</span><span style="color:#A6ACCD">) </span><span style="color:#91B4D5">=></span><span style="color:#E4F0FB"> user</span><span style="color:#91B4D5">.</span><span style="color:#A6ACCD">name,</span></span>
<span class="line"><span style="color:#A6ACCDC0">    Err</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCDC0">CustomExceptions</span><span style="color:#91B4D5">::</span><span style="color:#5DE4C7">1</span><span style="color:#A6ACCD">) </span><span style="color:#91B4D5">=></span><span style="color:#E4F0FB"> null</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#A6ACCDC0">    Err</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCDC0">CustomExceptions</span><span style="color:#91B4D5">::</span><span style="color:#5DE4C7">2</span><span style="color:#A6ACCD">) </span><span style="color:#91B4D5">=></span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#ADD7FF">      print!</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">CustomeException2</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">);</span></span>
<span class="line"><span style="color:#E4F0FB">      null</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#A6ACCD">    &#125;,</span></span>
<span class="line"><span style="color:#A6ACCDC0">    Err</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">error</span><span style="color:#A6ACCD">) </span><span style="color:#91B4D5">=></span><span style="color:#ADD7FF"> panic!</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">Unexpected Error: </span><span style="color:#A6ACCD">&#123;</span><span style="color:#5DE4C7">:?</span><span style="color:#A6ACCD">&#125;"</span><span style="color:#A6ACCD">, </span><span style="color:#E4F0FB">error</span><span style="color:#A6ACCD">),</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;;</span></span></code></pre>`,M,E,Ds="This way we can declaratively define each possible execution branch, drastically reducing the chance of bugs.",N,C,fs='<a href="#resultmatcher-a-potential-solution"><code>ResultMatcher</code> a potential solution</a>',Q,d,Bs="I took a stab at implementing a similar API in JS, and I came up with the <code>ResultMatcher</code> class. You can find the full source code at the bottom of this article. It is used like this:",X,S,ks=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">const</span><span style="color:#E4F0FB"> result</span><span style="color:#91B4D5"> =</span><span style="color:#5DE4C7"> new</span><span style="color:#E4F0FBD0"> ResultMatcher</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">unsafe</span><span style="color:#A6ACCD">)</span></span>
<span class="line"><span style="color:#A6ACCD">    .</span><span style="color:#E4F0FBD0">ok</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">user</span><span style="color:#91B4D5"> =></span><span style="color:#E4F0FB"> user</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">name</span><span style="color:#A6ACCD">)</span></span>
<span class="line"><span style="color:#A6ACCD">    .</span><span style="color:#E4F0FBD0">catch</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">CustomException1</span><span style="color:#A6ACCD">, </span><span style="color:#E4F0FB">e</span><span style="color:#91B4D5"> =></span><span style="color:#D0679D"> null</span><span style="color:#A6ACCD">)</span></span>
<span class="line"><span style="color:#A6ACCD">    .</span><span style="color:#E4F0FBD0">catch</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">CustomException2</span><span style="color:#A6ACCD">, </span><span style="color:#E4F0FB">e</span><span style="color:#91B4D5"> =></span><span style="color:#A6ACCD"> &#123; </span><span style="color:#E4F0FB">console</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">warn</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">CustomException2</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">); </span><span style="color:#5DE4C7C0">return</span><span style="color:#D0679D"> null</span><span style="color:#A6ACCD">&#125;)</span></span>
<span class="line"><span style="color:#A6ACCD">    .</span><span style="color:#E4F0FBD0">run</span><span style="color:#A6ACCD">()</span></span></code></pre>`,R,m,Fs="It is fully typesafe making it a breeze to work with.",Z,x,us="Let’s take a look at each part:",$,w,hs="<li><code>const result</code> will be the return value of whatever execution branch is taken. In the snippet above the return type would be <code>string | null</code></li> <li><code>ResultMatcher(unsafe)</code> constructs a matcher instance for the function <code>unsafe</code></li> <li><code>.ok()</code> takes a callback that handles the return value of <code>unsafe</code> if it succeeds. If <code>.ok</code> is not used on the Matcher it will default to the identity function.</li> <li><code>.catch(CustomException1, e =&gt; null)</code> Will only run if <code>unsafe</code> throws a <code>CustomException1</code>. It may return a value.</li> <li><code>.run()</code> Actually calls <code>unsafe</code>. If unsafe takes args, you will pass them here (Eg: <code>run(&quot;Hello&quot;, {option: &quot;a&quot;})</code>). TS will enforce this.</li>",ss,H,Es="Sometimes you <em>do</em> want to react to all errors that are thrown. Maybe just to log them. For that we have the <code>catchAll</code> method.",ls,v,ds="<li><code>.catchAll(e =&gt; {console.error(e); throw e})</code></li>",as,A,ms='<a href="#the-snippet">The Snippet</a>',ns,L,Ts=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#767C9DB0;font-style:italic">/**</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> * The configuration for a ResultMatcher Strategy.</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> *</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">template</span><span style="color:#E4F0FB;font-style:italic"> Prototype</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">template</span><span style="color:#E4F0FB;font-style:italic"> ReturnType</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">typedef</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">&#123;</span></span>
<span class="line"><span style="color:#A6ACCDC0;font-style:italic"> *    prototype: &#123; new (): Prototype;  &#125; | &#123; prototype: Prototype; &#125;,</span></span>
<span class="line"><span style="color:#A6ACCDC0;font-style:italic"> *    handler: (instance: Prototype) => ReturnType;</span></span>
<span class="line"><span style="color:#A6ACCDC0;font-style:italic"> * &#125;</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#A6ACCDC0;font-style:italic"> Strategy</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">/**</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> * Declaratively define what should happen for all the possible outcomes of a function.</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> * This follows an immutable builder pattern, so each method returns a new instance of the ResultMatcher class.</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> *</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">template</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">(...args: any) => any</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#E4F0FB;font-style:italic"> UnsafeFunc</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">template</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">(result: ReturnType&#x3C;UnsafeFunc>) => any</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#767C9DB0;font-style:italic"> [</span><span style="color:#E4F0FB;font-style:italic">SuccessHandler</span><span style="color:#767C9DB0;font-style:italic">=((result: ReturnType&#x3C;UnsafeFunc>) => ReturnType&#x3C;UnsafeFunc>)]</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">template</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">Strategy&#x3C;any, any>[]</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#767C9DB0;font-style:italic"> [</span><span style="color:#E4F0FB;font-style:italic">Strategies</span><span style="color:#767C9DB0;font-style:italic">=[]]</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">template</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">((e: unknown) => any)</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#767C9DB0;font-style:italic"> [</span><span style="color:#E4F0FB;font-style:italic">FallbackHandler</span><span style="color:#767C9DB0;font-style:italic">=(e: unknown) => never]</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> */</span></span>
<span class="line"><span style="color:#5DE4C7">export</span><span style="color:#91B4D5"> class</span><span style="color:#ADD7FF"> ResultMatcher</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">  /** </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">type</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">UnsafeFunc</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#767C9DB0;font-style:italic"> */</span></span>
<span class="line"><span style="color:#A6ACCD">  #unsafeFunction;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">  /** </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">type</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">Strategies</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#767C9DB0;font-style:italic"> */</span></span>
<span class="line"><span style="color:#A6ACCD">  #strategies;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">  /** </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">type</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">SuccessHandler</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#767C9DB0;font-style:italic"> */</span></span>
<span class="line"><span style="color:#A6ACCD">  #successHandler;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">  /** </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">type</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">FallbackHandler</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#767C9DB0;font-style:italic"> */</span></span>
<span class="line"><span style="color:#A6ACCD">  #fallbackHandler;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">  /**</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">param</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">UnsafeFunc</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#E4F0FB;font-style:italic"> func</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">param</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">Strategies</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#E4F0FB;font-style:italic"> strategies</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">param</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">SuccessHandler</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#E4F0FB;font-style:italic"> successHandler</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">param</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">FallbackHandler</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#E4F0FB;font-style:italic"> fallbackHandler</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   */</span></span>
<span class="line"><span style="color:#91B4D5">  constructor</span><span style="color:#A6ACCD">(</span></span>
<span class="line"><span style="color:#E4F0FB">    func</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#E4F0FB">    strategies</span><span style="color:#91B4D5"> =</span><span style="color:#767C9DB0;font-style:italic"> /**</span><span style="color:#A6ACCD;font-style:italic"> @</span><span style="color:#91B4D5;font-style:italic">type</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">any</span><span style="color:#A6ACCD;font-style:italic">&#125; </span><span style="color:#767C9DB0;font-style:italic">*/</span><span style="color:#A6ACCD"> ([]),</span></span>
<span class="line"><span style="color:#E4F0FB">    successHandler</span><span style="color:#91B4D5"> =</span><span style="color:#767C9DB0;font-style:italic"> /**</span><span style="color:#A6ACCD;font-style:italic"> @</span><span style="color:#91B4D5;font-style:italic">type</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">any</span><span style="color:#A6ACCD;font-style:italic">&#125; </span><span style="color:#767C9DB0;font-style:italic">*/</span><span style="color:#A6ACCD"> (</span><span style="color:#E4F0FB">identity</span><span style="color:#A6ACCD">),</span></span>
<span class="line"><span style="color:#E4F0FB">    fallbackHandler</span><span style="color:#91B4D5"> =</span><span style="color:#767C9DB0;font-style:italic"> /**</span><span style="color:#A6ACCD;font-style:italic"> @</span><span style="color:#91B4D5;font-style:italic">type</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">any</span><span style="color:#A6ACCD;font-style:italic">&#125; </span><span style="color:#767C9DB0;font-style:italic">*/</span><span style="color:#A6ACCD"> (</span><span style="color:#E4F0FB">raise</span><span style="color:#A6ACCD">),</span></span>
<span class="line"><span style="color:#A6ACCD">  ) &#123;</span></span>
<span class="line"><span style="color:#5DE4C7;font-style:italic">    this</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">#unsafeFunction</span><span style="color:#91B4D5"> =</span><span style="color:#E4F0FB"> func</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#5DE4C7;font-style:italic">    this</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">#strategies</span><span style="color:#91B4D5"> =</span><span style="color:#E4F0FB"> strategies</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#5DE4C7;font-style:italic">    this</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">#successHandler</span><span style="color:#91B4D5"> =</span><span style="color:#E4F0FB"> successHandler</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#5DE4C7;font-style:italic">    this</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">#fallbackHandler</span><span style="color:#91B4D5"> =</span><span style="color:#E4F0FB"> fallbackHandler</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#A6ACCD">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">  /**</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * Defines a strategy for a given error type.</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   *</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">template</span><span style="color:#E4F0FB;font-style:italic"> Prototype</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">template</span><span style="color:#E4F0FB;font-style:italic"> StrategyReturnType</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   *</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">param</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">&#123; new (): Prototype;&#125; | &#123; prototype: Prototype; &#125;</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#E4F0FB;font-style:italic"> prototype</span><span style="color:#767C9DB0;font-style:italic"> - The error type to handle. Thrown things will be compared against this with &#96;instanceof&#96;.</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">param</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">(instance: Prototype) => StrategyReturnType</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#E4F0FB;font-style:italic"> handler</span><span style="color:#767C9DB0;font-style:italic"> - Callback to handle the error.</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">returns</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">ResultMatcher&#x3C;UnsafeFunc, SuccessHandler, [...Strategies, Strategy&#x3C;Prototype, StrategyReturnType>], FallbackHandler></span><span style="color:#A6ACCD;font-style:italic">&#125;</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   */</span></span>
<span class="line"><span style="color:#ADD7FF">  catch</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">prototype</span><span style="color:#A6ACCD">, </span><span style="color:#E4F0FB">handler</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#91B4D5">    const</span><span style="color:#E4F0FB"> registeredStrategy</span><span style="color:#91B4D5"> =</span><span style="color:#A6ACCD"> &#123;</span><span style="color:#E4F0FB"> prototype</span><span style="color:#A6ACCD">,</span><span style="color:#E4F0FB"> handler</span><span style="color:#A6ACCD"> &#125;;</span></span>
<span class="line"><span style="color:#5DE4C7C0">    return</span><span style="color:#5DE4C7"> new</span><span style="color:#E4F0FBD0"> ResultMatcher</span><span style="color:#A6ACCD">(</span></span>
<span class="line"><span style="color:#5DE4C7;font-style:italic">      this</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">#unsafeFunction</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#A6ACCD">      [</span><span style="color:#91B4D5">...</span><span style="color:#5DE4C7;font-style:italic">this</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">#strategies</span><span style="color:#A6ACCD">, </span><span style="color:#E4F0FB">registeredStrategy</span><span style="color:#A6ACCD">],</span></span>
<span class="line"><span style="color:#5DE4C7;font-style:italic">      this</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">#successHandler</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#5DE4C7;font-style:italic">      this</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">#fallbackHandler</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#A6ACCD">    );</span></span>
<span class="line"><span style="color:#A6ACCD">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">  /**</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">template</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">(e:unknown) => any</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#E4F0FB;font-style:italic"> Handler</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   *</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">param</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">Handler</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#E4F0FB;font-style:italic"> handler</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">returns</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">ResultMatcher&#x3C;UnsafeFunc, SuccessHandler, Strategies, Handler></span><span style="color:#A6ACCD;font-style:italic">&#125;</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   */</span></span>
<span class="line"><span style="color:#ADD7FF">  catchAll</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">handler</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#5DE4C7C0">    return</span><span style="color:#5DE4C7"> new</span><span style="color:#E4F0FBD0"> ResultMatcher</span><span style="color:#A6ACCD">(</span></span>
<span class="line"><span style="color:#5DE4C7;font-style:italic">      this</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">#unsafeFunction</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#5DE4C7;font-style:italic">      this</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">#strategies</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#5DE4C7;font-style:italic">      this</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">#successHandler</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#E4F0FB">      handler</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#A6ACCD">    );</span></span>
<span class="line"><span style="color:#A6ACCD">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">  /**</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * Handle the happy path</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   *</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">template</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">(result: ReturnType&#x3C;UnsafeFunc>) => any</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#E4F0FB;font-style:italic"> Handler</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">param</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">Handler</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#E4F0FB;font-style:italic"> handler</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">returns</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">ResultMatcher&#x3C;UnsafeFunc, Handler, Strategies, FallbackHandler></span><span style="color:#A6ACCD;font-style:italic">&#125;</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   */</span></span>
<span class="line"><span style="color:#ADD7FF">  ok</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">handler</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#5DE4C7C0">    return</span><span style="color:#5DE4C7"> new</span><span style="color:#E4F0FBD0"> ResultMatcher</span><span style="color:#A6ACCD">(</span></span>
<span class="line"><span style="color:#5DE4C7;font-style:italic">      this</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">#unsafeFunction</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#5DE4C7;font-style:italic">      this</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">#strategies</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#E4F0FB">      handler</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#5DE4C7;font-style:italic">      this</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">#fallbackHandler</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#A6ACCD">    );</span></span>
<span class="line"><span style="color:#A6ACCD">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">  /**</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * Calls the unsafe function with the given parameters and handles any errors that may be thrown</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * according to the registered strategies.</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   *</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">param</span><span style="color:#A6ACCD;font-style:italic">  &#123;</span><span style="color:#A6ACCDC0;font-style:italic">Parameters&#x3C;UnsafeFunc></span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#E4F0FB;font-style:italic"> params</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">returns</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">ReturnType&#x3C;SuccessHandler> | ReturnType&#x3C;Strategies[number]["handler"]> | ReturnType&#x3C;FallbackHandler></span><span style="color:#A6ACCD;font-style:italic">&#125;</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">   */</span></span>
<span class="line"><span style="color:#ADD7FF">  run</span><span style="color:#A6ACCD">(</span><span style="color:#91B4D5">...</span><span style="color:#E4F0FB">params</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#91B4D5">    let</span><span style="color:#E4F0FB"> successResult</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#D0679D">    try</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">      // @ts-ignore</span></span>
<span class="line"><span style="color:#E4F0FB">      successResult</span><span style="color:#91B4D5"> =</span><span style="color:#5DE4C7;font-style:italic"> this</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">#unsafeFunction</span><span style="color:#A6ACCD">(</span><span style="color:#91B4D5">...</span><span style="color:#E4F0FB">params</span><span style="color:#A6ACCD">);</span></span>
<span class="line"><span style="color:#A6ACCD">    &#125; </span><span style="color:#D0679D">catch</span><span style="color:#A6ACCD"> (</span><span style="color:#E4F0FB">e</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">      for (</span><span style="color:#91B4D5">const</span><span style="color:#E4F0FB"> strategy</span><span style="color:#91B4D5"> of</span><span style="color:#5DE4C7;font-style:italic"> this</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">#strategies</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">        if (</span><span style="color:#E4F0FB">e</span><span style="color:#91B4D5"> instanceof</span><span style="color:#767C9DB0;font-style:italic"> /** </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">type</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">any</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#767C9DB0;font-style:italic"> */</span><span style="color:#A6ACCD"> (</span><span style="color:#A6ACCDC0">strategy</span><span style="color:#A6ACCD">.</span><span style="color:#A6ACCDC0">prototype</span><span style="color:#A6ACCD">)) &#123;</span></span>
<span class="line"><span style="color:#5DE4C7C0">          return</span><span style="color:#E4F0FB"> strategy</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">handler</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">e</span><span style="color:#A6ACCD">);</span></span>
<span class="line"><span style="color:#A6ACCD">        &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">      &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#5DE4C7C0">      return</span><span style="color:#5DE4C7;font-style:italic"> this</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">#fallbackHandler</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">e</span><span style="color:#A6ACCD">);</span></span>
<span class="line"><span style="color:#A6ACCD">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#5DE4C7C0">    return</span><span style="color:#5DE4C7;font-style:italic"> this</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">#successHandler</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">successResult</span><span style="color:#A6ACCD">);</span></span>
<span class="line"><span style="color:#A6ACCD">  &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">/**</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> * The identity function</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">template</span><span style="color:#E4F0FB;font-style:italic"> T</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">param</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">T</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#E4F0FB;font-style:italic"> x</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">returns</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">T</span><span style="color:#A6ACCD;font-style:italic">&#125;</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> */</span></span>
<span class="line"><span style="color:#91B4D5">const</span><span style="color:#ADD7FF"> identity</span><span style="color:#91B4D5"> =</span><span style="color:#A6ACCD"> (</span><span style="color:#E4F0FB">x</span><span style="color:#A6ACCD">) </span><span style="color:#91B4D5">=></span><span style="color:#E4F0FB"> x</span><span style="color:#A6ACCD">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">/**</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">template</span><span style="color:#E4F0FB;font-style:italic"> T</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">param</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">T</span><span style="color:#A6ACCD;font-style:italic">&#125;</span><span style="color:#E4F0FB;font-style:italic"> e</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">returns</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">never</span><span style="color:#A6ACCD;font-style:italic">&#125;</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">throws</span><span style="color:#A6ACCD;font-style:italic"> &#123;</span><span style="color:#A6ACCDC0;font-style:italic">T</span><span style="color:#A6ACCD;font-style:italic">&#125;</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic"> */</span></span>
<span class="line"><span style="color:#91B4D5">const</span><span style="color:#ADD7FF"> raise</span><span style="color:#91B4D5"> =</span><span style="color:#A6ACCD"> (</span><span style="color:#E4F0FB">e</span><span style="color:#A6ACCD">) </span><span style="color:#91B4D5">=></span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#D0679D">  throw</span><span style="color:#E4F0FB"> e</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;;</span></span></code></pre>`,P;return{c(){y=o("h1"),y.innerHTML=es,q=t(),D=o("p"),D.textContent=os,W=t(),i=o("h2"),i.innerHTML=ps,z=t(),f=o("p"),f.textContent=cs,J=t(),b=new U(!1),k=t(),B=o("p"),B.innerHTML=ys,O=t(),F=o("p"),F.textContent=is,G=t(),T=new U(!1),g=t(),u=o("p"),u.textContent=rs,V=t(),r=o("h2"),r.innerHTML=Cs,Y=t(),h=o("p"),h.innerHTML=As,K=t(),_=new U(!1),M=t(),E=o("p"),E.textContent=Ds,N=t(),C=o("h2"),C.innerHTML=fs,Q=t(),d=o("p"),d.innerHTML=Bs,X=t(),S=new U(!1),R=t(),m=o("p"),m.textContent=Fs,Z=t(),x=o("p"),x.textContent=us,$=t(),w=o("ul"),w.innerHTML=hs,ss=t(),H=o("p"),H.innerHTML=Es,ls=t(),v=o("ul"),v.innerHTML=ds,as=t(),A=o("h2"),A.innerHTML=ms,ns=t(),L=new U(!1),P=xs(),this.h()},l(s){y=p(s,"H1",{id:!0,"data-svelte-h":!0}),c(y)!=="svelte-z0u4rw"&&(y.innerHTML=es),q=e(s),D=p(s,"P",{"data-svelte-h":!0}),c(D)!=="svelte-xe0fn0"&&(D.textContent=os),W=e(s),i=p(s,"H2",{id:!0,"data-svelte-h":!0}),c(i)!=="svelte-xa1j4"&&(i.innerHTML=ps),z=e(s),f=p(s,"P",{"data-svelte-h":!0}),c(f)!=="svelte-j0y3la"&&(f.textContent=cs),J=e(s),b=I(s,!1),k=e(s),B=p(s,"P",{"data-svelte-h":!0}),c(B)!=="svelte-86uv7g"&&(B.innerHTML=ys),O=e(s),F=p(s,"P",{"data-svelte-h":!0}),c(F)!=="svelte-7telbu"&&(F.textContent=is),G=e(s),T=I(s,!1),g=e(s),u=p(s,"P",{"data-svelte-h":!0}),c(u)!=="svelte-1kgaj31"&&(u.textContent=rs),V=e(s),r=p(s,"H2",{id:!0,"data-svelte-h":!0}),c(r)!=="svelte-kzejms"&&(r.innerHTML=Cs),Y=e(s),h=p(s,"P",{"data-svelte-h":!0}),c(h)!=="svelte-dvkkc4"&&(h.innerHTML=As),K=e(s),_=I(s,!1),M=e(s),E=p(s,"P",{"data-svelte-h":!0}),c(E)!=="svelte-xy7f4b"&&(E.textContent=Ds),N=e(s),C=p(s,"H2",{id:!0,"data-svelte-h":!0}),c(C)!=="svelte-9hqu1k"&&(C.innerHTML=fs),Q=e(s),d=p(s,"P",{"data-svelte-h":!0}),c(d)!=="svelte-tiiv16"&&(d.innerHTML=Bs),X=e(s),S=I(s,!1),R=e(s),m=p(s,"P",{"data-svelte-h":!0}),c(m)!=="svelte-h0ke80"&&(m.textContent=Fs),Z=e(s),x=p(s,"P",{"data-svelte-h":!0}),c(x)!=="svelte-aex9p"&&(x.textContent=us),$=e(s),w=p(s,"UL",{"data-svelte-h":!0}),c(w)!=="svelte-1rlehpz"&&(w.innerHTML=hs),ss=e(s),H=p(s,"P",{"data-svelte-h":!0}),c(H)!=="svelte-12ouq9h"&&(H.innerHTML=Es),ls=e(s),v=p(s,"UL",{"data-svelte-h":!0}),c(v)!=="svelte-1fgu1t0"&&(v.innerHTML=ds),as=e(s),A=p(s,"H2",{id:!0,"data-svelte-h":!0}),c(A)!=="svelte-1m2hw0c"&&(A.innerHTML=ms),ns=e(s),L=I(s,!1),P=xs(),this.h()},h(){j(y,"id","declarative-exception-handling"),j(i,"id","the-state-of-error-handling-in-js"),b.a=k,T.a=g,j(r,"id","what-we-want"),_.a=M,j(C,"id","resultmatcher-a-potential-solution"),S.a=R,j(A,"id","the-snippet"),L.a=P},m(s,l){a(s,y,l),a(s,q,l),a(s,D,l),a(s,W,l),a(s,i,l),a(s,z,l),a(s,f,l),a(s,J,l),b.m(Hs,s,l),a(s,k,l),a(s,B,l),a(s,O,l),a(s,F,l),a(s,G,l),T.m(vs,s,l),a(s,g,l),a(s,u,l),a(s,V,l),a(s,r,l),a(s,Y,l),a(s,h,l),a(s,K,l),_.m(bs,s,l),a(s,M,l),a(s,E,l),a(s,N,l),a(s,C,l),a(s,Q,l),a(s,d,l),a(s,X,l),S.m(ks,s,l),a(s,R,l),a(s,m,l),a(s,Z,l),a(s,x,l),a(s,$,l),a(s,w,l),a(s,ss,l),a(s,H,l),a(s,ls,l),a(s,v,l),a(s,as,l),a(s,A,l),a(s,ns,l),L.m(Ts,s,l),a(s,P,l)},p:ts,i:ts,o:ts,d(s){s&&(n(y),n(q),n(D),n(W),n(i),n(z),n(f),n(J),b.d(),n(k),n(B),n(O),n(F),n(G),T.d(),n(g),n(u),n(V),n(r),n(Y),n(h),n(K),_.d(),n(M),n(E),n(N),n(C),n(Q),n(d),n(X),S.d(),n(R),n(m),n(Z),n(x),n($),n(w),n(ss),n(H),n(ls),n(v),n(as),n(A),n(ns),n(P),L.d())}}}class Ps extends _s{constructor(y){super(),Ms(this,y,null,Ss,gs,{})}}export{Ps as component};
