import{s as B,n as C}from"../chunks/scheduler.IgQUtjbl.js";import{S as W,i as Y,g as e,s as l,h as o,C as f,c,j as U,f as a,k as M,a as t}from"../chunks/index.D4Vnkr5k.js";function z(E){let p,H='<a href="#a-neat-pattern-for-melt-ui">A neat pattern for Melt UI</a>',h,i,P="While working with Melt UI, I’ve stumbled upon a pattern that has been quite handy several times. Sharing stuff from the same builder between components using the <code>let:</code> directive. Here is an example:",y,u,I="I often find myself in the need for a generic Tooltip component, one where the Trigger is some outside object. Since I use Melt UI for my projects anyway, I really want to use it’s Tooltip builder. However, it’s not immediately obvious how you can do that. Melt UI’s docs always have one component that fully encapsulates all the behavior.",w,k,L="But it’s actually quite doable thanks to the <code>let:</code> directive. You can use it to pass the Tooltip’s <code>trigger</code> prop to the outside world. Ideally this would be as simple as:",T,r,$=`<code class="language-svelte"><span class="token comment">&lt;!--Tooltip.svelte--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createTooltip <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@melt-ui/svelte'</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">elements</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> trigger<span class="token punctuation">,</span> content<span class="token punctuation">,</span> arrow <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">states</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> open <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">createTooltip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>trigger<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>

<span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> open<span class="token punctuation">&#125;</span></span>
  ...
<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span>

<span class="token comment">&lt;!--App.svelte--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> Tooltip <span class="token keyword">from</span> <span class="token string">'./Tooltip.svelte'</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Tooltip</span> <span class="token attr-name"><span class="token namespace">let:</span>trigger</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">use:</span>trigger</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span>$trigger<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Do Something<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Tooltip</span><span class="token punctuation">></span></span></code>`,b,g,q="Unfortunately, this doesn’t work as of now. The problem is the <code>{...$trigger}</code> part. It’s not possible to bind to a store unless it comes from the component’s script tag. The workaround here is to bind the store inside the <code>Tooltip</code> component and pass it to the <code>trigger</code> slot.",x,m,D=`<code class="language-svelte"><span class="token comment">&lt;!--Tooltip.svelte--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createTooltip <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@melt-ui/svelte'</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">elements</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> trigger<span class="token punctuation">,</span> content<span class="token punctuation">,</span> arrow <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">states</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> open <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">createTooltip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">triggerAction=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>trigger<span class="token punctuation">&#125;</span></span> <span class="token attr-name">triggerProps=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>$trigger<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>

<span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> open<span class="token punctuation">&#125;</span></span>
  ...
<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span>

<span class="token comment">&lt;!--App.svelte--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> Tooltip <span class="token keyword">from</span> <span class="token string">'./Tooltip.svelte'</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Tooltip</span> <span class="token attr-name"><span class="token namespace">let:</span>triggerAction</span> <span class="token attr-name"><span class="token namespace">let:</span>triggerProps</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">use:</span>triggerAction</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span>triggerProps<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Do Something<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Tooltip</span><span class="token punctuation">></span></span></code>`,_,d,A="That’s it.",j,v,S="This pattern is has been useful to me a couple times so I wanted to share.";return{c(){p=e("h1"),p.innerHTML=H,h=l(),i=e("p"),i.innerHTML=P,y=l(),u=e("p"),u.textContent=I,w=l(),k=e("p"),k.innerHTML=L,T=l(),r=e("pre"),b=l(),g=e("p"),g.innerHTML=q,x=l(),m=e("pre"),_=l(),d=e("p"),d.textContent=A,j=l(),v=e("p"),v.textContent=S,this.h()},l(s){p=o(s,"H1",{id:!0,"data-svelte-h":!0}),f(p)!=="svelte-15fqgkm"&&(p.innerHTML=H),h=c(s),i=o(s,"P",{"data-svelte-h":!0}),f(i)!=="svelte-we6q8g"&&(i.innerHTML=P),y=c(s),u=o(s,"P",{"data-svelte-h":!0}),f(u)!=="svelte-sm233c"&&(u.textContent=I),w=c(s),k=o(s,"P",{"data-svelte-h":!0}),f(k)!=="svelte-fb05oo"&&(k.innerHTML=L),T=c(s),r=o(s,"PRE",{class:!0});var n=U(r);n.forEach(a),b=c(s),g=o(s,"P",{"data-svelte-h":!0}),f(g)!=="svelte-qcbyx"&&(g.innerHTML=q),x=c(s),m=o(s,"PRE",{class:!0});var R=U(m);R.forEach(a),_=c(s),d=o(s,"P",{"data-svelte-h":!0}),f(d)!=="svelte-jwgito"&&(d.textContent=A),j=c(s),v=o(s,"P",{"data-svelte-h":!0}),f(v)!=="svelte-1hcs8n2"&&(v.textContent=S),this.h()},h(){M(p,"id","a-neat-pattern-for-melt-ui"),M(r,"class","language-svelte"),M(m,"class","language-svelte")},m(s,n){t(s,p,n),t(s,h,n),t(s,i,n),t(s,y,n),t(s,u,n),t(s,w,n),t(s,k,n),t(s,T,n),t(s,r,n),r.innerHTML=$,t(s,b,n),t(s,g,n),t(s,x,n),t(s,m,n),m.innerHTML=D,t(s,_,n),t(s,d,n),t(s,j,n),t(s,v,n)},p:C,i:C,o:C,d(s){s&&(a(p),a(h),a(i),a(y),a(u),a(w),a(k),a(T),a(r),a(b),a(g),a(x),a(m),a(_),a(d),a(j),a(v))}}}class J extends W{constructor(p){super(),Y(this,p,null,z,B,{})}}export{J as component};
