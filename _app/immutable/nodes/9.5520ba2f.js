import{S as Ds,i as Ls,s as Ms,k as o,q as a,a as p,l,m as i,r as n,h as s,c as d,n as c,b as h,G as t,H as Wt}from"../chunks/index.ebd1f5b7.js";function Rs(Ss){let v,I,Ie,ue,P,G,O,Pe,K,qe,Fe,fe,E,Je,T,xe,Be,me,D,q,We,ge,w,Ue,_,Ye,je,Q,Ge,Ke,ye,u,Qe,N,Ne,ze,z,Ve,Xe,A,V,Ze,$e,X,et,tt,Z,st,at,we,F,nt,be,J,ot,ke,f,lt,$,it,rt,ee,ht,ct,te,pt,dt,se,ut,ft,ve,L,x,mt,Ee,g,gt,ae,yt,wt,ne,bt,kt,oe,vt,Et,Te,B,le,Tt,_e,M,Cs=`<code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
		...
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
			document<span class="token punctuation">.</span>documentElement
			<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"theme"</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">"light"</span><span class="token punctuation">)</span>
		</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code>`,Ae,m,_t,ie,At,St,re,Ct,Ot,he,Dt,Lt,ce,Mt,Rt,Se,W,R,Ht,pe,It,Pt,Ce,U,qt,Oe,H,Y,Ft,De,S,Jt,de,xt,Bt;return{c(){v=o("h1"),I=o("a"),Ie=a("Reliably avoiding Theme Flashes"),ue=p(),P=o("blockquote"),G=o("p"),O=o("strong"),Pe=a("TLDR: Add a non-deferred "),K=o("code"),qe=a("script"),Fe=a(" tag at the start of the document and react to the user’s theme preference there"),fe=p(),E=o("p"),Je=a("A common issue on sites with theme-toggles is a flash of the wrong theme when the page loads. In the hilariously titled post "),T=o("a"),xe=a("Flash of inAccurate coloR Theme (FART)"),Be=a(", Chris Coyier coined the term FART to describe this phenomenon. In this post, we will explore the cause of FARTs, and how to avoid them client-side only. Along the way we will be learning about how page-loading works in the browser."),me=p(),D=o("h2"),q=o("a"),We=a("Diagnosing the Problem"),ge=p(),w=o("p"),Ue=a("HTML is a streaming format. This is great, since we can display the content of a page before it has fully loaded. Even massive sites like the "),_=o("a"),Ye=a("HTML Specification"),je=a(" with it’s "),Q=o("strong"),Ge=a("13MB (!)"),Ke=a(" of raw HTML can be displayed almost instantly. This is one of the most underrated features of the web."),ye=p(),u=o("p"),Qe=a("But this poses a question when running Javascript. If the page has not fully loaded by the time our code runs, how does a selector like "),N=o("code"),Ne=a("document.getElementById"),ze=a(` behave? Well, it only gets run on the part that has already been loaded.
This is dangerous when trying to hydrate a page, since the elements your code is trying to hydrate might not be there yet. To avoid this, pretty much all sites run their JS `),z=o("em"),Ve=a("after"),Xe=a(" the HTML has been fully recieved and parsed. We used to do this with "),A=o("a"),V=o("code"),Ze=a("DOMContentLoaded"),$e=a(" or by putting our scripts at the bottom of the page, but today we usually use "),X=o("code"),et=a("defered"),tt=a(", or "),Z=o("code"),st=a("type=module"),at=a(" on the script tag to achieve this."),we=p(),F=o("p"),nt=a("There is also the additional problem that non-deferred scripts are render-blocking, meaning that the browser will not render anything that comes after them until they have finished running. Loading your frontend framework like this would completely negate the benefits of SSR or prerendering, the behaviour would be identical to pure client-side-rendering."),be=p(),J=o("p"),ot=a("For these reasons pretty much all sites load their JS code in a deferred manner."),ke=p(),f=o("p"),lt=a("Unfortunately this causes FARTs. In order to decide which theme we should display, we need to check some sort local persistence. That might be "),$=o("code"),it=a("localStorage"),rt=a(", "),ee=o("code"),ht=a("IndexedDB"),ct=a(" or a plain old "),te=o("code"),pt=a("cookie"),dt=a(". Either way, JS needs to run. If our JS runs "),se=o("em"),ut=a("after"),ft=a(" the page has been fully parsed, as is the default nowadays, we get a flash of the default theme. You might get lucky and the browser will run your JS between finishing parsing and rendering, but you can’t rely on that."),ve=p(),L=o("h2"),x=o("a"),mt=a("The Solution"),Ee=p(),g=o("p"),gt=a("We need to somehow determine the desired theme before the page gets rendered. The way we do this is by returning the web-development stone age. The primitive "),ae=o("code"),yt=a("<script>"),wt=a(" tag with no "),ne=o("code"),bt=a("defer"),kt=a(" or "),oe=o("code"),vt=a('type="module"'),Et=a(" attributes will block the page from rendering until it has run. If we put our theme code in such a script we will not get a FART."),Te=p(),B=o("blockquote"),le=o("p"),Tt=a("Tip: Most projects have a skeleton HTML file somewhere, which is used as a template for all pages. Add the script there."),_e=p(),M=o("pre"),Ae=p(),m=o("p"),_t=a("Beware though. Since the HTML is not yet fully parsed when this script runs you only have guaranteed access to the elements that come before it, not after it. In the above example we could not safely add a class to the "),ie=o("code"),At=a("body"),St=a(", only to the "),re=o("code"),Ct=a("html"),Ot=a(" tag. Any elements that come before the script could potentially be displayed before it has run. You also need to account for that. The best place to put the script is usually either in the "),he=o("code"),Dt=a("head"),Lt=a(", or as the first thing in the "),ce=o("code"),Mt=a("body"),Rt=a("."),Se=p(),W=o("blockquote"),R=o("p"),Ht=a("Warning: If the theme logic is more complex, it’s tempting to put the JS in a separate file and load it via "),pe=o("code"),It=a("src"),Pt=a(". That would require an additional HTTP request, during which the page cannot be rendered. Just inline it."),Ce=p(),U=o("p"),qt=a("There is another benefit to this. Elements with css transitions can often look awkward when switching themes, since they take longer than the rest of the page. This is especially noticeable during FARTs. By running the theme-switching code before the page has been rendered this problem is avoided, since the initial render will already be in the correct theme."),Oe=p(),H=o("h2"),Y=o("a"),Ft=a("Addressing the concerns"),De=p(),S=o("p"),Jt=a("Some developers will avoid blocking scripts like the plague, since they used to be common sources of performance issues. However, in our case, the page cannot safely be rendered before the code has run, so this is an exception. Understanding "),de=o("em"),xt=a("why"),Bt=a(" something is considered bad practice is key to knowing when it’s okay to break the rules. Think of it like this: The theme-checking code needs to run anyway, so we might as well run it as early as possible. There is no performance loss."),this.h()},l(e){v=l(e,"H1",{id:!0});var r=i(v);I=l(r,"A",{href:!0});var Ut=i(I);Ie=n(Ut,"Reliably avoiding Theme Flashes"),Ut.forEach(s),r.forEach(s),ue=d(e),P=l(e,"BLOCKQUOTE",{});var Yt=i(P);G=l(Yt,"P",{});var jt=i(G);O=l(jt,"STRONG",{});var Le=i(O);Pe=n(Le,"TLDR: Add a non-deferred "),K=l(Le,"CODE",{});var Gt=i(K);qe=n(Gt,"script"),Gt.forEach(s),Fe=n(Le," tag at the start of the document and react to the user’s theme preference there"),Le.forEach(s),jt.forEach(s),Yt.forEach(s),fe=d(e),E=l(e,"P",{});var Me=i(E);Je=n(Me,"A common issue on sites with theme-toggles is a flash of the wrong theme when the page loads. In the hilariously titled post "),T=l(Me,"A",{href:!0,rel:!0,target:!0});var Kt=i(T);xe=n(Kt,"Flash of inAccurate coloR Theme (FART)"),Kt.forEach(s),Be=n(Me,", Chris Coyier coined the term FART to describe this phenomenon. In this post, we will explore the cause of FARTs, and how to avoid them client-side only. Along the way we will be learning about how page-loading works in the browser."),Me.forEach(s),me=d(e),D=l(e,"H2",{id:!0});var Qt=i(D);q=l(Qt,"A",{href:!0});var Nt=i(q);We=n(Nt,"Diagnosing the Problem"),Nt.forEach(s),Qt.forEach(s),ge=d(e),w=l(e,"P",{});var j=i(w);Ue=n(j,"HTML is a streaming format. This is great, since we can display the content of a page before it has fully loaded. Even massive sites like the "),_=l(j,"A",{href:!0,rel:!0,target:!0});var zt=i(_);Ye=n(zt,"HTML Specification"),zt.forEach(s),je=n(j," with it’s "),Q=l(j,"STRONG",{});var Vt=i(Q);Ge=n(Vt,"13MB (!)"),Vt.forEach(s),Ke=n(j," of raw HTML can be displayed almost instantly. This is one of the most underrated features of the web."),j.forEach(s),ye=d(e),u=l(e,"P",{});var y=i(u);Qe=n(y,"But this poses a question when running Javascript. If the page has not fully loaded by the time our code runs, how does a selector like "),N=l(y,"CODE",{});var Xt=i(N);Ne=n(Xt,"document.getElementById"),Xt.forEach(s),ze=n(y,` behave? Well, it only gets run on the part that has already been loaded.
This is dangerous when trying to hydrate a page, since the elements your code is trying to hydrate might not be there yet. To avoid this, pretty much all sites run their JS `),z=l(y,"EM",{});var Zt=i(z);Ve=n(Zt,"after"),Zt.forEach(s),Xe=n(y," the HTML has been fully recieved and parsed. We used to do this with "),A=l(y,"A",{href:!0,rel:!0,target:!0});var $t=i(A);V=l($t,"CODE",{});var es=i(V);Ze=n(es,"DOMContentLoaded"),es.forEach(s),$t.forEach(s),$e=n(y," or by putting our scripts at the bottom of the page, but today we usually use "),X=l(y,"CODE",{});var ts=i(X);et=n(ts,"defered"),ts.forEach(s),tt=n(y,", or "),Z=l(y,"CODE",{});var ss=i(Z);st=n(ss,"type=module"),ss.forEach(s),at=n(y," on the script tag to achieve this."),y.forEach(s),we=d(e),F=l(e,"P",{});var as=i(F);nt=n(as,"There is also the additional problem that non-deferred scripts are render-blocking, meaning that the browser will not render anything that comes after them until they have finished running. Loading your frontend framework like this would completely negate the benefits of SSR or prerendering, the behaviour would be identical to pure client-side-rendering."),as.forEach(s),be=d(e),J=l(e,"P",{});var ns=i(J);ot=n(ns,"For these reasons pretty much all sites load their JS code in a deferred manner."),ns.forEach(s),ke=d(e),f=l(e,"P",{});var b=i(f);lt=n(b,"Unfortunately this causes FARTs. In order to decide which theme we should display, we need to check some sort local persistence. That might be "),$=l(b,"CODE",{});var os=i($);it=n(os,"localStorage"),os.forEach(s),rt=n(b,", "),ee=l(b,"CODE",{});var ls=i(ee);ht=n(ls,"IndexedDB"),ls.forEach(s),ct=n(b," or a plain old "),te=l(b,"CODE",{});var is=i(te);pt=n(is,"cookie"),is.forEach(s),dt=n(b,". Either way, JS needs to run. If our JS runs "),se=l(b,"EM",{});var rs=i(se);ut=n(rs,"after"),rs.forEach(s),ft=n(b," the page has been fully parsed, as is the default nowadays, we get a flash of the default theme. You might get lucky and the browser will run your JS between finishing parsing and rendering, but you can’t rely on that."),b.forEach(s),ve=d(e),L=l(e,"H2",{id:!0});var hs=i(L);x=l(hs,"A",{href:!0});var cs=i(x);mt=n(cs,"The Solution"),cs.forEach(s),hs.forEach(s),Ee=d(e),g=l(e,"P",{});var C=i(g);gt=n(C,"We need to somehow determine the desired theme before the page gets rendered. The way we do this is by returning the web-development stone age. The primitive "),ae=l(C,"CODE",{});var ps=i(ae);yt=n(ps,"<script>"),ps.forEach(s),wt=n(C," tag with no "),ne=l(C,"CODE",{});var ds=i(ne);bt=n(ds,"defer"),ds.forEach(s),kt=n(C," or "),oe=l(C,"CODE",{});var us=i(oe);vt=n(us,'type="module"'),us.forEach(s),Et=n(C," attributes will block the page from rendering until it has run. If we put our theme code in such a script we will not get a FART."),C.forEach(s),Te=d(e),B=l(e,"BLOCKQUOTE",{});var fs=i(B);le=l(fs,"P",{});var ms=i(le);Tt=n(ms,"Tip: Most projects have a skeleton HTML file somewhere, which is used as a template for all pages. Add the script there."),ms.forEach(s),fs.forEach(s),_e=d(e),M=l(e,"PRE",{class:!0});var Os=i(M);Os.forEach(s),Ae=d(e),m=l(e,"P",{});var k=i(m);_t=n(k,"Beware though. Since the HTML is not yet fully parsed when this script runs you only have guaranteed access to the elements that come before it, not after it. In the above example we could not safely add a class to the "),ie=l(k,"CODE",{});var gs=i(ie);At=n(gs,"body"),gs.forEach(s),St=n(k,", only to the "),re=l(k,"CODE",{});var ys=i(re);Ct=n(ys,"html"),ys.forEach(s),Ot=n(k," tag. Any elements that come before the script could potentially be displayed before it has run. You also need to account for that. The best place to put the script is usually either in the "),he=l(k,"CODE",{});var ws=i(he);Dt=n(ws,"head"),ws.forEach(s),Lt=n(k,", or as the first thing in the "),ce=l(k,"CODE",{});var bs=i(ce);Mt=n(bs,"body"),bs.forEach(s),Rt=n(k,"."),k.forEach(s),Se=d(e),W=l(e,"BLOCKQUOTE",{});var ks=i(W);R=l(ks,"P",{});var Re=i(R);Ht=n(Re,"Warning: If the theme logic is more complex, it’s tempting to put the JS in a separate file and load it via "),pe=l(Re,"CODE",{});var vs=i(pe);It=n(vs,"src"),vs.forEach(s),Pt=n(Re,". That would require an additional HTTP request, during which the page cannot be rendered. Just inline it."),Re.forEach(s),ks.forEach(s),Ce=d(e),U=l(e,"P",{});var Es=i(U);qt=n(Es,"There is another benefit to this. Elements with css transitions can often look awkward when switching themes, since they take longer than the rest of the page. This is especially noticeable during FARTs. By running the theme-switching code before the page has been rendered this problem is avoided, since the initial render will already be in the correct theme."),Es.forEach(s),Oe=d(e),H=l(e,"H2",{id:!0});var Ts=i(H);Y=l(Ts,"A",{href:!0});var _s=i(Y);Ft=n(_s,"Addressing the concerns"),_s.forEach(s),Ts.forEach(s),De=d(e),S=l(e,"P",{});var He=i(S);Jt=n(He,"Some developers will avoid blocking scripts like the plague, since they used to be common sources of performance issues. However, in our case, the page cannot safely be rendered before the code has run, so this is an exception. Understanding "),de=l(He,"EM",{});var As=i(de);xt=n(As,"why"),As.forEach(s),Bt=n(He," something is considered bad practice is key to knowing when it’s okay to break the rules. Think of it like this: The theme-checking code needs to run anyway, so we might as well run it as early as possible. There is no performance loss."),He.forEach(s),this.h()},h(){c(I,"href","#reliably-avoiding-theme-flashes"),c(v,"id","reliably-avoiding-theme-flashes"),c(T,"href","https://css-tricks.com/flash-of-inaccurate-color-theme-fart/"),c(T,"rel","noopener noreferrer"),c(T,"target","_blank"),c(q,"href","#diagnosing-the-problem"),c(D,"id","diagnosing-the-problem"),c(_,"href","https://html.spec.whatwg.org/"),c(_,"rel","noopener noreferrer"),c(_,"target","_blank"),c(A,"href","https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event"),c(A,"rel","noopener noreferrer"),c(A,"target","_blank"),c(x,"href","#the-solution"),c(L,"id","the-solution"),c(M,"class","language-html"),c(Y,"href","#addressing-the-concerns"),c(H,"id","addressing-the-concerns")},m(e,r){h(e,v,r),t(v,I),t(I,Ie),h(e,ue,r),h(e,P,r),t(P,G),t(G,O),t(O,Pe),t(O,K),t(K,qe),t(O,Fe),h(e,fe,r),h(e,E,r),t(E,Je),t(E,T),t(T,xe),t(E,Be),h(e,me,r),h(e,D,r),t(D,q),t(q,We),h(e,ge,r),h(e,w,r),t(w,Ue),t(w,_),t(_,Ye),t(w,je),t(w,Q),t(Q,Ge),t(w,Ke),h(e,ye,r),h(e,u,r),t(u,Qe),t(u,N),t(N,Ne),t(u,ze),t(u,z),t(z,Ve),t(u,Xe),t(u,A),t(A,V),t(V,Ze),t(u,$e),t(u,X),t(X,et),t(u,tt),t(u,Z),t(Z,st),t(u,at),h(e,we,r),h(e,F,r),t(F,nt),h(e,be,r),h(e,J,r),t(J,ot),h(e,ke,r),h(e,f,r),t(f,lt),t(f,$),t($,it),t(f,rt),t(f,ee),t(ee,ht),t(f,ct),t(f,te),t(te,pt),t(f,dt),t(f,se),t(se,ut),t(f,ft),h(e,ve,r),h(e,L,r),t(L,x),t(x,mt),h(e,Ee,r),h(e,g,r),t(g,gt),t(g,ae),t(ae,yt),t(g,wt),t(g,ne),t(ne,bt),t(g,kt),t(g,oe),t(oe,vt),t(g,Et),h(e,Te,r),h(e,B,r),t(B,le),t(le,Tt),h(e,_e,r),h(e,M,r),M.innerHTML=Cs,h(e,Ae,r),h(e,m,r),t(m,_t),t(m,ie),t(ie,At),t(m,St),t(m,re),t(re,Ct),t(m,Ot),t(m,he),t(he,Dt),t(m,Lt),t(m,ce),t(ce,Mt),t(m,Rt),h(e,Se,r),h(e,W,r),t(W,R),t(R,Ht),t(R,pe),t(pe,It),t(R,Pt),h(e,Ce,r),h(e,U,r),t(U,qt),h(e,Oe,r),h(e,H,r),t(H,Y),t(Y,Ft),h(e,De,r),h(e,S,r),t(S,Jt),t(S,de),t(de,xt),t(S,Bt)},p:Wt,i:Wt,o:Wt,d(e){e&&s(v),e&&s(ue),e&&s(P),e&&s(fe),e&&s(E),e&&s(me),e&&s(D),e&&s(ge),e&&s(w),e&&s(ye),e&&s(u),e&&s(we),e&&s(F),e&&s(be),e&&s(J),e&&s(ke),e&&s(f),e&&s(ve),e&&s(L),e&&s(Ee),e&&s(g),e&&s(Te),e&&s(B),e&&s(_e),e&&s(M),e&&s(Ae),e&&s(m),e&&s(Se),e&&s(W),e&&s(Ce),e&&s(U),e&&s(Oe),e&&s(H),e&&s(De),e&&s(S)}}}class Is extends Ds{constructor(v){super(),Ls(this,v,null,Rs,Ms,{})}}export{Is as component};
