import{s as js,n as ps}from"../chunks/scheduler.IgQUtjbl.js";import{S as Is,i as Ps,g as o,s as n,H as z,h as p,C as c,c as t,G as R,k as J,a,f as l}from"../chunks/index.BUVdxXQj.js";function Ss(gs){let i,cs='<a href="#dts-buddy-fixes-type-declarations">DTS-Buddy fixes Type-Declarations</a>',G,D,is="<code>dts-buddy</code> is one of those tools that’s hard to justify without encountering the problem they solve first. Here’s the story of how I ran into it.",Q,d,rs='If you don’t care why, you can <a href="#dts-buddy-the-savior">skip past the intro</a>',U,r,Cs='<a href="#a-horror-story-about-types-in-subpackages">A horror story about types in subpackages</a>',W,u,ys="I’ve been finding myself copying a lot of code between projects. To make this easier, I’ve been building a package where I keep all my commonly used code. Since it includes code from many domains, using subpackages seemed quite natural. <code>@sigrist.dev/framework/pdf</code> for all my PDF-related code, <code>@sigrist.dev/framework/ui</code> for all my UI-related code, and so on.",N,f,As="To keep editing convenient, I opted to use JSDoc types, and generate type-declarations from them.",O,h,Ds="While doing this, I quickly learned about the pitfalls of using subpackages. Using the TypeScript compiler means I was generating one <code>d.ts</code> file per <code>js</code> file. This caused a problems when importing a subpackage. Whenever I started typing <code>import {</code> the IDE would show me a list of all the types present in the package, including ones that were not meant to be public. This was very irritating.",Y,m,ds=`Another issue I ran into is that <code>go to definition</code> didn’t work. I couldn’t jump to the implementation of a type, because the IDE didn’t know how to map the type-declaration to the actual source code.
As the declarations were always colocated with the JS file it wasn’t that bad, but still inconveniet. I often have to glance at the implementation to recall what was going on, since the package isn’t documented well.`,K,C,us='<a href="#dts-buddy-the-savior">Dts-Buddy; The savior</a>',V,v,fs=`<code>dts-buddy</code> solves all these things in a very clever way. Instead of colocating each type-declaration with the JS file it belongs to, it generates just one <code>.d.ts</code> file for the entire package. This is then referenced by the <code>types</code> field in your <code>package.json</code>.
The file contains module declarations for the public interface of the package and it’s subpackages, using the <code>declare module</code> syntax.`,X,b,hs="Here’s an example output it generated for one of my (private, sorry) packages:",Z,H,Hs=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#5DE4C7">declare</span><span style="color:#91B4D5"> module</span><span style="color:#A6ACCD"> '</span><span style="color:#5DE4C7">@sigrist.dev/framework/pdf</span><span style="color:#A6ACCD">'</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">    * Adds a QR-ESR Invoice footer to the given PDF.</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">    * Assumes the current page has A4 portrait format.</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">    *</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">    * </span><span style="color:#A6ACCD;font-style:italic">@</span><span style="color:#91B4D5;font-style:italic">see</span><span style="color:#E4F0FB;font-style:italic"> https://www.swiss-qr-invoice.org/validator/?lang=de</span><span style="color:#767C9DB0;font-style:italic"> for a validator</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">    */</span></span>
<span class="line"><span style="color:#5DE4C7">    export</span><span style="color:#91B4D5"> function</span><span style="color:#ADD7FF"> addQrEsrFooter</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">pdf</span><span style="color:#91B4D5">:</span><span style="color:#91B4D5"> import</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">jspdf</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">).</span><span style="color:#A6ACCDC0">jsPDF</span><span style="color:#A6ACCD">, </span><span style="color:#E4F0FB">data</span><span style="color:#91B4D5">:</span><span style="color:#A6ACCDC0"> ESRData</span><span style="color:#A6ACCD">) </span><span style="color:#91B4D5">:</span><span style="color:#91B4D5"> import</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">jspdf</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">).</span><span style="color:#A6ACCDC0">jsPDF</span><span style="color:#A6ACCD">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#5DE4C7">    export</span><span style="color:#91B4D5"> type</span><span style="color:#A6ACCD"> ESRData</span><span style="color:#91B4D5"> =</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#ADD7FF">        amount</span><span style="color:#91B4D5">:</span><span style="color:#A6ACCDC0"> number</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#ADD7FF">        reference</span><span style="color:#91B4D5">:</span><span style="color:#A6ACCDC0"> string</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#91B4D5">        ...</span></span>
<span class="line"><span style="color:#A6ACCD">    &#125;</span></span>
<span class="line"><span style="color:#ADD7FF">    ...</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#5DE4C7">declare</span><span style="color:#91B4D5"> module</span><span style="color:#A6ACCD"> '</span><span style="color:#5DE4C7">@sigrist.dev/framework/ui</span><span style="color:#A6ACCD">'</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#91B4D5">  ...</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span></code></pre>`,_,x,ms="Alongside this, it also generates a <code>.map.d.ts</code> file, which maps the public types onto the actual source code. This allows the IDE to “go to definition” and “peek definition” reliably.",$,y,vs='<a href="#how-to-use-it">How to use it</a>',ss,w,bs="First install it:",es,E,_s='<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">pnpm</span><span style="color:#ADD7FF"> i</span><span style="color:#ADD7FF"> -D</span><span style="color:#ADD7FF"> dts-buddy</span></span></code></pre>',M,F,xs="Then create a <code>build.js</code> file in your project, and use it as your build script:",as,L,Es=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#A6ACCD">&#123;</span></span>
<span class="line"><span style="color:#A6ACCD">	"</span><span style="color:#E4F0FB">scripts</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">: &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">		"</span><span style="color:#ADD7FF">build</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">: </span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">node build.js</span><span style="color:#A6ACCD">"</span></span>
<span class="line"><span style="color:#A6ACCD">	&#125;</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span></code></pre>`,j,I,Ms=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#767C9DB0;font-style:italic">// build.js</span></span>
<span class="line"><span style="color:#5DE4C7">import </span><span style="color:#A6ACCD">&#123;</span><span style="color:#ADD7FF"> createBundle</span><span style="color:#A6ACCD"> &#125;</span><span style="color:#A6ACCD"> from</span><span style="color:#A6ACCD"> '</span><span style="color:#5DE4C7">dts-buddy</span><span style="color:#A6ACCD">'</span><span style="color:#A6ACCD">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">//Generate a bundle of all type-declarations</span></span>
<span class="line"><span style="color:#5DE4C7C0">await</span><span style="color:#E4F0FBD0"> createBundle</span><span style="color:#A6ACCD">(&#123;</span></span>
<span class="line"><span style="color:#ADD7FF">	project</span><span style="color:#A6ACCD">:</span><span style="color:#A6ACCD"> '</span><span style="color:#5DE4C7">tsconfig.json</span><span style="color:#A6ACCD">'</span><span style="color:#A6ACCD">,</span><span style="color:#767C9DB0;font-style:italic"> //Your tsconfig.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">	//Map subpackages to their entrypoints</span></span>
<span class="line"><span style="color:#ADD7FF">	modules</span><span style="color:#A6ACCD">:</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">		'</span><span style="color:#5DE4C7">@sigrist.dev/framework/pdf</span><span style="color:#A6ACCD">'</span><span style="color:#A6ACCD">:</span><span style="color:#A6ACCD"> '</span><span style="color:#5DE4C7">src/pdf/index.js</span><span style="color:#A6ACCD">'</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#A6ACCD">		'</span><span style="color:#5DE4C7">@sigrist.dev/framework/ui</span><span style="color:#A6ACCD">'</span><span style="color:#A6ACCD">:</span><span style="color:#A6ACCD"> '</span><span style="color:#5DE4C7">src/ui/index.js</span><span style="color:#A6ACCD">'</span></span>
<span class="line"><span style="color:#A6ACCD">	&#125;,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADD7FF">	include</span><span style="color:#A6ACCD">:</span><span style="color:#A6ACCD"> [</span><span style="color:#A6ACCD">'</span><span style="color:#5DE4C7">src</span><span style="color:#A6ACCD">'</span><span style="color:#A6ACCD">],</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADD7FF">	output</span><span style="color:#A6ACCD">:</span><span style="color:#A6ACCD"> '</span><span style="color:#5DE4C7">types/index.d.ts</span><span style="color:#A6ACCD">'</span><span style="color:#767C9DB0;font-style:italic"> //The resulting type-declaration file</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;);</span></span></code></pre>`,P,B,ws="The only thing left to do is to tell the module-resolution to actually use the generated file. So, in your <code>package.json</code>, add a <code>types</code> field, and also register it in each <code>exports</code> field.",ls,S,Ls=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#A6ACCD">&#123;</span></span>
<span class="line"><span style="color:#A6ACCD">	"</span><span style="color:#E4F0FB">types</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">: </span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">types/index.d.ts</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">, </span><span style="color:#767C9DB0;font-style:italic">//here</span></span>
<span class="line"><span style="color:#A6ACCD">	"</span><span style="color:#E4F0FB">exports</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">: &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">		"</span><span style="color:#ADD7FF">.</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">: &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">			"</span><span style="color:#91B4D5">types</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">: </span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">types/index.d.ts</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">, </span><span style="color:#767C9DB0;font-style:italic">//here</span></span>
<span class="line"><span style="color:#A6ACCD">			"</span><span style="color:#91B4D5">import</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">: </span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">./src/index.js</span><span style="color:#A6ACCD">"</span></span>
<span class="line"><span style="color:#A6ACCD">		&#125;,</span></span>
<span class="line"><span style="color:#A6ACCD">		"</span><span style="color:#ADD7FF">./pdf</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">: &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">			"</span><span style="color:#91B4D5">types</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">: </span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">types/index.d.ts</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">, </span><span style="color:#767C9DB0;font-style:italic">//here</span></span>
<span class="line"><span style="color:#A6ACCD">			"</span><span style="color:#91B4D5">import</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">: </span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">./src/pdf/index.js</span><span style="color:#A6ACCD">"</span></span>
<span class="line"><span style="color:#A6ACCD">		&#125;,</span></span>
<span class="line"><span style="color:#A6ACCD">		"</span><span style="color:#ADD7FF">./ui</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">: &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">			"</span><span style="color:#91B4D5">types</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">: </span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">types/index.d.ts</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">, </span><span style="color:#767C9DB0;font-style:italic">//here</span></span>
<span class="line"><span style="color:#A6ACCD">			"</span><span style="color:#91B4D5">import</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">: </span><span style="color:#A6ACCD">"</span><span style="color:#5DE4C7">./src/ui/index.js</span><span style="color:#A6ACCD">"</span></span>
<span class="line"><span style="color:#A6ACCD">		&#125;</span></span>
<span class="line"><span style="color:#A6ACCD">	&#125;</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span></code></pre>`,q,k,Fs="That’s it! Now you can run <code>npm run build</code> and it’ll generate a single type-declaration file (+map) for your entire package.",ns,A,Bs='<a href="#should-you-use-it">Should you use it?</a>',ts,T,ks="<code>dts-buddy</code> is a tool that solves the subpackage-problem very very well. Outside of that, the regular TypeScript compiler is good enough. It’s going to be more familiar to most developers and is maintained more actively. But when you do need <code>dts-buddy</code>, it’s a lifesaver.",os,g,Ts="I for one have really enjoyed it and am very likely to choose it again.";return{c(){i=o("h1"),i.innerHTML=cs,G=n(),D=o("p"),D.innerHTML=is,Q=n(),d=o("p"),d.innerHTML=rs,U=n(),r=o("h2"),r.innerHTML=Cs,W=n(),u=o("p"),u.innerHTML=ys,N=n(),f=o("p"),f.textContent=As,O=n(),h=o("p"),h.innerHTML=Ds,Y=n(),m=o("p"),m.innerHTML=ds,K=n(),C=o("h2"),C.innerHTML=us,V=n(),v=o("p"),v.innerHTML=fs,X=n(),b=o("p"),b.textContent=hs,Z=n(),H=new z(!1),_=n(),x=o("p"),x.innerHTML=ms,$=n(),y=o("h2"),y.innerHTML=vs,ss=n(),w=o("p"),w.textContent=bs,es=n(),E=new z(!1),M=n(),F=o("p"),F.innerHTML=xs,as=n(),L=new z(!1),j=n(),I=new z(!1),P=n(),B=o("p"),B.innerHTML=ws,ls=n(),S=new z(!1),q=n(),k=o("p"),k.innerHTML=Fs,ns=n(),A=o("h2"),A.innerHTML=Bs,ts=n(),T=o("p"),T.innerHTML=ks,os=n(),g=o("p"),g.textContent=Ts,this.h()},l(s){i=p(s,"H1",{id:!0,"data-svelte-h":!0}),c(i)!=="svelte-6meor9"&&(i.innerHTML=cs),G=t(s),D=p(s,"P",{"data-svelte-h":!0}),c(D)!=="svelte-13kfg1b"&&(D.innerHTML=is),Q=t(s),d=p(s,"P",{"data-svelte-h":!0}),c(d)!=="svelte-1x748i3"&&(d.innerHTML=rs),U=t(s),r=p(s,"H2",{id:!0,"data-svelte-h":!0}),c(r)!=="svelte-v1ttt0"&&(r.innerHTML=Cs),W=t(s),u=p(s,"P",{"data-svelte-h":!0}),c(u)!=="svelte-15olzmx"&&(u.innerHTML=ys),N=t(s),f=p(s,"P",{"data-svelte-h":!0}),c(f)!=="svelte-198lpmg"&&(f.textContent=As),O=t(s),h=p(s,"P",{"data-svelte-h":!0}),c(h)!=="svelte-11jzph8"&&(h.innerHTML=Ds),Y=t(s),m=p(s,"P",{"data-svelte-h":!0}),c(m)!=="svelte-1x2j3qn"&&(m.innerHTML=ds),K=t(s),C=p(s,"H2",{id:!0,"data-svelte-h":!0}),c(C)!=="svelte-y603ka"&&(C.innerHTML=us),V=t(s),v=p(s,"P",{"data-svelte-h":!0}),c(v)!=="svelte-b8cecc"&&(v.innerHTML=fs),X=t(s),b=p(s,"P",{"data-svelte-h":!0}),c(b)!=="svelte-2h5g6c"&&(b.textContent=hs),Z=t(s),H=R(s,!1),_=t(s),x=p(s,"P",{"data-svelte-h":!0}),c(x)!=="svelte-vsvpk2"&&(x.innerHTML=ms),$=t(s),y=p(s,"H2",{id:!0,"data-svelte-h":!0}),c(y)!=="svelte-1l1k7cz"&&(y.innerHTML=vs),ss=t(s),w=p(s,"P",{"data-svelte-h":!0}),c(w)!=="svelte-14wigas"&&(w.textContent=bs),es=t(s),E=R(s,!1),M=t(s),F=p(s,"P",{"data-svelte-h":!0}),c(F)!=="svelte-h4o59e"&&(F.innerHTML=xs),as=t(s),L=R(s,!1),j=t(s),I=R(s,!1),P=t(s),B=p(s,"P",{"data-svelte-h":!0}),c(B)!=="svelte-11fftnk"&&(B.innerHTML=ws),ls=t(s),S=R(s,!1),q=t(s),k=p(s,"P",{"data-svelte-h":!0}),c(k)!=="svelte-4gj9lj"&&(k.innerHTML=Fs),ns=t(s),A=p(s,"H2",{id:!0,"data-svelte-h":!0}),c(A)!=="svelte-13u71ln"&&(A.innerHTML=Bs),ts=t(s),T=p(s,"P",{"data-svelte-h":!0}),c(T)!=="svelte-p7dlfn"&&(T.innerHTML=ks),os=t(s),g=p(s,"P",{"data-svelte-h":!0}),c(g)!=="svelte-yzmwae"&&(g.textContent=Ts),this.h()},h(){J(i,"id","dts-buddy-fixes-type-declarations"),J(r,"id","a-horror-story-about-types-in-subpackages"),J(C,"id","dts-buddy-the-savior"),H.a=_,J(y,"id","how-to-use-it"),E.a=M,L.a=j,I.a=P,S.a=q,J(A,"id","should-you-use-it")},m(s,e){a(s,i,e),a(s,G,e),a(s,D,e),a(s,Q,e),a(s,d,e),a(s,U,e),a(s,r,e),a(s,W,e),a(s,u,e),a(s,N,e),a(s,f,e),a(s,O,e),a(s,h,e),a(s,Y,e),a(s,m,e),a(s,K,e),a(s,C,e),a(s,V,e),a(s,v,e),a(s,X,e),a(s,b,e),a(s,Z,e),H.m(Hs,s,e),a(s,_,e),a(s,x,e),a(s,$,e),a(s,y,e),a(s,ss,e),a(s,w,e),a(s,es,e),E.m(_s,s,e),a(s,M,e),a(s,F,e),a(s,as,e),L.m(Es,s,e),a(s,j,e),I.m(Ms,s,e),a(s,P,e),a(s,B,e),a(s,ls,e),S.m(Ls,s,e),a(s,q,e),a(s,k,e),a(s,ns,e),a(s,A,e),a(s,ts,e),a(s,T,e),a(s,os,e),a(s,g,e)},p:ps,i:ps,o:ps,d(s){s&&(l(i),l(G),l(D),l(Q),l(d),l(U),l(r),l(W),l(u),l(N),l(f),l(O),l(h),l(Y),l(m),l(K),l(C),l(V),l(v),l(X),l(b),l(Z),H.d(),l(_),l(x),l($),l(y),l(ss),l(w),l(es),E.d(),l(M),l(F),l(as),L.d(),l(j),I.d(),l(P),l(B),l(ls),S.d(),l(q),l(k),l(ns),l(A),l(ts),l(T),l(os),l(g))}}}class Rs extends Is{constructor(i){super(),Ps(this,i,null,Ss,js,{})}}export{Rs as component};
