import{s as Ms,n as ps}from"../chunks/scheduler.IgQUtjbl.js";import{S as _s,i as Rs,g as e,s as p,H as U,e as xs,h as t,C as c,c as o,G as I,k as j,a as n,f as l}from"../chunks/index.BUVdxXQj.js";function Ss(ks){let r,os='<a href="#declarative-exception-handling">Declarative Exception Handling</a>',q,d,es="In this article we will explore a potential remedy to the nightmare that is error handling in JS.",W,y,ts='<a href="#the-state-of-error-handling-in-js">The State of Error Handling in JS</a>',z,h,cs="If you have a function that might fail, you would probably do something like this.",J,g,bs=`<pre class="shiki vitesse-dark twoslash lsp" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">let </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">let </span><span style="color:#BD976A">result</span><span style="color:#666666">: </span><span style="color:#5DA994">any</span></code></span>result</span></span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#4D9375">try</span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#CB7676">  const </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A">user</span><span style="color:#666666">: &#123;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">&#125;</span></span></code></pre></code></span>user</span></span><span style="color:#666666"> =</span><span style="color:#80A665"> </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">const </span><span style="color:#80A665">unsafe</span><span style="color:#666666">: () => &#123;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">&#125;</span></span></code></pre></code></span>unsafe</span></span><span style="color:#666666">();</span></span>
<span class="line"><span style="color:#BD976A">  </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">let </span><span style="color:#BD976A">result</span><span style="color:#666666">: </span><span style="color:#5DA994">any</span></code></span>result</span></span><span style="color:#666666"> =</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A">user</span><span style="color:#666666">: &#123;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">&#125;</span></span></code></pre></code></span>user</span></span><span style="color:#666666">.</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">name</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span></code></span>name</span></span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">&#125;</span><span style="color:#4D9375"> catch</span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">var </span><span style="color:#BD976A">e</span><span style="color:#666666">: </span><span style="color:#5DA994">unknown</span></code></span>e</span></span><span style="color:#666666">)</span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#BD976A">  </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">let </span><span style="color:#BD976A">result</span><span style="color:#666666">: </span><span style="color:#5DA994">any</span></code></span>result</span></span><span style="color:#666666"> =</span><span style="color:#CB7676"> null</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">&#125;</span></span></code></pre>`,H,A,rs=`This very common implementation has a bug though. It handles all exceptions, not just the ones we expect to happen during normal operation.
If <code>unsafe</code> has a Syntax error in it’s implementation this would silently swallow it. We don’t want that.`,O,B,ys=`A better implementation would be to throw custom error-types for all your expected exceptions
and test anything that’s thrown against those.`,G,T,Es=`<pre class="shiki vitesse-dark twoslash lsp" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">class</span><span style="color:#5DA994"> </span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">class</span><span style="color:#5DA994"> CustomException1</span></code></span>CustomException1</span></span><span style="color:#CB7676"> extends</span><span style="color:#80A665"> </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">var </span><span style="color:#BD976A">Error</span><span style="color:#666666">: </span><span style="color:#5DA994">ErrorConstructor</span></code></span>Error</span></span><span style="color:#666666"> &#123;&#125;</span></span>
<span class="line"><span style="color:#CB7676">class</span><span style="color:#5DA994"> </span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">class</span><span style="color:#5DA994"> CustomException2</span></code></span>CustomException2</span></span><span style="color:#CB7676"> extends</span><span style="color:#80A665"> </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">var </span><span style="color:#BD976A">Error</span><span style="color:#666666">: </span><span style="color:#5DA994">ErrorConstructor</span></code></span>Error</span></span><span style="color:#666666"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676">let </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">let </span><span style="color:#BD976A">result</span><span style="color:#666666">: </span><span style="color:#5DA994">any</span></code></span>result</span></span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#4D9375">try</span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#CB7676">   const </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A">user</span><span style="color:#666666">: &#123;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">&#125;</span></span></code></pre></code></span>user</span></span><span style="color:#666666"> =</span><span style="color:#80A665"> </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">const </span><span style="color:#80A665">unsafe</span><span style="color:#666666">: () => &#123;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">&#125;</span></span></code></pre></code></span>unsafe</span></span><span style="color:#666666">();</span><span style="color:#758575DD"> //throws CustomException1 &#x26; 2</span></span>
<span class="line"><span style="color:#BD976A">   </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">let </span><span style="color:#BD976A">result</span><span style="color:#666666">: </span><span style="color:#5DA994">any</span></code></span>result</span></span><span style="color:#666666"> =</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A">user</span><span style="color:#666666">: &#123;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">&#125;</span></span></code></pre></code></span>user</span></span><span style="color:#666666">.</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">name</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span></code></span>name</span></span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">&#125;</span><span style="color:#4D9375"> catch</span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">var </span><span style="color:#BD976A">e</span><span style="color:#666666">: </span><span style="color:#5DA994">unknown</span></code></span>e</span></span><span style="color:#666666">)</span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#4D9375">  if</span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">var </span><span style="color:#BD976A">e</span><span style="color:#666666">: </span><span style="color:#5DA994">unknown</span></code></span>e</span></span><span style="color:#CB7676"> instanceof</span><span style="color:#5DA994"> </span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">class</span><span style="color:#5DA994"> CustomException1</span></code></span>CustomException1</span></span><span style="color:#666666">)</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">let </span><span style="color:#BD976A">result</span><span style="color:#666666">: </span><span style="color:#5DA994">any</span></code></span>result</span></span><span style="color:#666666"> =</span><span style="color:#CB7676"> null</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#4D9375">  else</span><span style="color:#4D9375"> if</span><span style="color:#666666"> (</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">var </span><span style="color:#BD976A">e</span><span style="color:#666666">: </span><span style="color:#5DA994">unknown</span></code></span>e</span></span><span style="color:#CB7676"> instanceof</span><span style="color:#5DA994"> </span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">class</span><span style="color:#5DA994"> CustomException2</span></code></span>CustomException2</span></span><span style="color:#666666">)</span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#BD976A">    </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">var </span><span style="color:#BD976A">console</span><span style="color:#666666">: </span><span style="color:#5DA994">Console</span></code></span>console</span></span><span style="color:#666666">.</span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">Console</span><span style="color:#666666">.</span><span style="color:#80A665">warn</span><span style="color:#666666">(...</span><span style="color:#BD976A">data</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">any</span><span style="color:#666666">[])</span><span style="color:#DBD7CAEE">: </span><span style="color:#CB7676">void</span></code></span>warn</span></span><span style="color:#666666">(</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">CustomeException2</span><span style="color:#C98A7D99">"</span><span style="color:#666666">);</span></span>
<span class="line"><span style="color:#BD976A">    </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">let </span><span style="color:#BD976A">result</span><span style="color:#666666">: </span><span style="color:#5DA994">any</span></code></span>result</span></span><span style="color:#666666"> =</span><span style="color:#CB7676"> null</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">  &#125;</span></span>
<span class="line"><span style="color:#4D9375">  else</span><span style="color:#4D9375"> throw</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">var </span><span style="color:#BD976A">e</span><span style="color:#666666">: </span><span style="color:#5DA994">unknown</span></code></span>e</span></span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">&#125;</span></span></code></pre>`,M,w,is=`But the code here gets really really ugly really really fast. We have to imperatively check which Execution path we should take,
opening up the door to many silly bugs.`,V,i,Ds='<a href="#what-we-want">What we want</a>',Y,C,us=`Wouldn’t it be really nice if we could declaratively define each execution path an the right thing just happened?
Other languages like Rust would make this pretty easy using Errors-As-Values and <code>match</code> statements. Something like this:`,K,_,gs=`<pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">let</span><span style="color:#BD976A"> result</span><span style="color:#666666"> =</span><span style="color:#4D9375"> match</span><span style="color:#80A665"> unsafe_fn</span><span style="color:#666666">()</span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#5DA994">    Ok</span><span style="color:#666666">(</span><span style="color:#BD976A">user</span><span style="color:#666666">)</span><span style="color:#CB7676"> =></span><span style="color:#BD976A"> user</span><span style="color:#CB7676">.</span><span style="color:#DBD7CAEE">name</span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#5DA994">    Err</span><span style="color:#666666">(</span><span style="color:#5DA994">CustomExceptions</span><span style="color:#CB7676">::</span><span style="color:#4C9A91">1</span><span style="color:#666666">)</span><span style="color:#CB7676"> =></span><span style="color:#BD976A"> null</span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#5DA994">    Err</span><span style="color:#666666">(</span><span style="color:#5DA994">CustomExceptions</span><span style="color:#CB7676">::</span><span style="color:#4C9A91">2</span><span style="color:#666666">)</span><span style="color:#CB7676"> =></span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#80A665">      print!</span><span style="color:#666666">(</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">CustomeException2</span><span style="color:#C98A7D99">"</span><span style="color:#666666">);</span></span>
<span class="line"><span style="color:#BD976A">      null</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">    &#125;,</span></span>
<span class="line"><span style="color:#5DA994">    Err</span><span style="color:#666666">(</span><span style="color:#BD976A">error</span><span style="color:#666666">)</span><span style="color:#CB7676"> =></span><span style="color:#80A665"> panic!</span><span style="color:#666666">(</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">Unexpected Error: </span><span style="color:#666666">&#123;</span><span style="color:#C98A7D">:?</span><span style="color:#666666">&#125;</span><span style="color:#C98A7D99">"</span><span style="color:#666666">,</span><span style="color:#BD976A"> error</span><span style="color:#666666">),</span></span>
<span class="line"><span style="color:#666666">&#125;;</span></span></code></pre>`,R,m,ds="This way we can declaratively define each possible execution branch, drastically reducing the chance of bugs.",N,D,hs='<a href="#resultmatcher-a-potential-solution"><code>ResultMatcher</code> a potential solution</a>',Q,v,As="I took a stab at implementing a similar API in JS, and I came up with the <code>ResultMatcher</code> class. You can find the full source code at the bottom of this article. It is used like this:",X,S,Hs=`<pre class="shiki vitesse-dark twoslash lsp" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">result</span><span style="color:#666666">: </span><span style="color:#5DA994">void</span></code></span>result</span></span><span style="color:#666666"> =</span><span style="color:#CB7676"> new </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">constructor</span><span style="color:#80A665"> ResultMatcher</span><span style="color:#666666">(</span><span style="color:#BD976A">data</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">any</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">ResultMatcher</span></code></span>ResultMatcher</span></span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">const </span><span style="color:#80A665">unsafe</span><span style="color:#666666">: () => &#123;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">&#125;</span></span></code></pre></code></span>unsafe</span></span><span style="color:#666666">)</span></span>
<span class="line"><span style="color:#666666">    .</span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#BD976A">ResultMatcher</span><span style="color:#666666">.</span><span style="color:#80A665">ok</span><span style="color:#666666">(</span><span style="color:#BD976A">cb</span><span style="color:#DBD7CAEE">: </span><span style="color:#666666">(</span><span style="color:#BD976A">user</span><span style="color:#666666">: &#123;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">&#125;)</span><span style="color:#666666"> =></span><span style="color:#BD976A"> any</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">ResultMatcher</span></span></code></pre></code></span>ok</span></span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">user</span><span style="color:#666666">:</span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#80A665">    name</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">&#125;</span></span></code></pre></code></span>user</span></span><span style="color:#666666"> =></span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">user</span><span style="color:#666666">:</span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#80A665">    name</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">&#125;</span></span></code></pre></code></span>user</span></span><span style="color:#666666">.</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">name</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span></code></span>name</span></span><span style="color:#666666">)</span></span>
<span class="line"><span style="color:#666666">    .</span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#BD976A">ResultMatcher</span><span style="color:#666666">.</span><span style="color:#80A665">catch</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">CustomException1</span><span style="color:#666666">>(</span><span style="color:#BD976A">prototype</span><span style="color:#DBD7CAEE">: </span><span style="color:#666666">(</span><span style="color:#CB7676">new</span><span style="color:#666666"> ()</span><span style="color:#666666"> =></span><span style="color:#BD976A"> CustomException1</span><span style="color:#666666">)</span><span style="color:#CB7676"> |</span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#B8A965">    prototype</span><span style="color:#666666">: </span><span style="color:#BD976A">CustomException1</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">&#125;,</span><span style="color:#BD976A"> cb</span><span style="color:#DBD7CAEE">: </span><span style="color:#666666">(</span><span style="color:#BD976A">instance</span><span style="color:#666666">: </span><span style="color:#5DA994">CustomException1</span><span style="color:#666666">)</span><span style="color:#666666"> =></span><span style="color:#BD976A"> any</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">ResultMatcher</span></span></code></pre></code></span>catch</span></span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">class</span><span style="color:#5DA994"> CustomException1</span></code></span>CustomException1</span></span><span style="color:#666666">,</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">e</span><span style="color:#666666">:</span><span style="color:#BD976A"> CustomException1</span></code></span>e</span></span><span style="color:#666666"> =></span><span style="color:#CB7676"> null</span><span style="color:#666666">)</span></span>
<span class="line"><span style="color:#666666">    .</span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#BD976A">ResultMatcher</span><span style="color:#666666">.</span><span style="color:#80A665">catch</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">CustomException2</span><span style="color:#666666">>(</span><span style="color:#BD976A">prototype</span><span style="color:#DBD7CAEE">: </span><span style="color:#666666">(</span><span style="color:#CB7676">new</span><span style="color:#666666"> ()</span><span style="color:#666666"> =></span><span style="color:#BD976A"> CustomException2</span><span style="color:#666666">)</span><span style="color:#CB7676"> |</span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#B8A965">    prototype</span><span style="color:#666666">: </span><span style="color:#BD976A">CustomException2</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">&#125;,</span><span style="color:#BD976A"> cb</span><span style="color:#DBD7CAEE">: </span><span style="color:#666666">(</span><span style="color:#BD976A">instance</span><span style="color:#666666">: </span><span style="color:#5DA994">CustomException2</span><span style="color:#666666">)</span><span style="color:#666666"> =></span><span style="color:#BD976A"> any</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">ResultMatcher</span></span></code></pre></code></span>catch</span></span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">class</span><span style="color:#5DA994"> CustomException2</span></code></span>CustomException2</span></span><span style="color:#666666">,</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">e</span><span style="color:#666666">:</span><span style="color:#BD976A"> CustomException2</span></code></span>e</span></span><span style="color:#666666"> =></span><span style="color:#666666"> &#123;</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">var </span><span style="color:#BD976A">console</span><span style="color:#666666">: </span><span style="color:#5DA994">Console</span></code></span>console</span></span><span style="color:#666666">.</span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">Console</span><span style="color:#666666">.</span><span style="color:#80A665">warn</span><span style="color:#666666">(...</span><span style="color:#BD976A">data</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">any</span><span style="color:#666666">[])</span><span style="color:#DBD7CAEE">: </span><span style="color:#CB7676">void</span></code></span>warn</span></span><span style="color:#666666">(</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">CustomException2</span><span style="color:#C98A7D99">"</span><span style="color:#666666">);</span><span style="color:#4D9375"> return</span><span style="color:#CB7676"> null</span><span style="color:#666666">&#125;)</span></span>
<span class="line"><span style="color:#666666">    .</span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">ResultMatcher</span><span style="color:#666666">.</span><span style="color:#80A665">run</span><span style="color:#666666">()</span><span style="color:#DBD7CAEE">: </span><span style="color:#CB7676">void</span></code></span>run</span></span><span style="color:#666666">()</span></span></code></pre>`,L,f,Bs="It is fully typesafe making it a breeze to work with.",Z,x,ws="Let’s take a look at each part:",$,k,Cs="<li><code>const result</code> will be the return value of whatever execution branch is taken. In the snippet above the return type would be <code>string | null</code></li> <li><code>ResultMatcher(unsafe)</code> constructs a matcher instance for the function <code>unsafe</code></li> <li><code>.ok()</code> takes a callback that handles the return value of <code>unsafe</code> if it succeeds. If <code>.ok</code> is not used on the Matcher it will default to the identity function.</li> <li><code>.catch(CustomException1, e =&gt; null)</code> Will only run if <code>unsafe</code> throws a <code>CustomException1</code>. It may return a value.</li> <li><code>.run()</code> Actually calls <code>unsafe</code>. If unsafe takes args, you will pass them here (Eg: <code>run(&quot;Hello&quot;, {option: &quot;a&quot;})</code>). TS will enforce this.</li>",ss,b,ms="Sometimes you <em>do</em> want to react to all errors that are thrown. Maybe just to log them. For that we have the <code>catchAll</code> method.",as,E,vs="<li><code>.catchAll(e =&gt; {console.error(e); throw e})</code></li>",ns,u,fs='<a href="#the-snippet">The Snippet</a>',ls,F,Ts=`<pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#758575DD">/**</span></span>
<span class="line"><span style="color:#758575DD"> * The configuration for a ResultMatcher Strategy.</span></span>
<span class="line"><span style="color:#758575DD"> *</span></span>
<span class="line"><span style="color:#758575DD"> * </span><span style="color:#666666">@</span><span style="color:#4D9375">template</span><span style="color:#BD976A"> Prototype</span></span>
<span class="line"><span style="color:#758575DD"> * </span><span style="color:#666666">@</span><span style="color:#4D9375">template</span><span style="color:#BD976A"> ReturnType</span></span>
<span class="line"><span style="color:#758575DD"> * </span><span style="color:#666666">@</span><span style="color:#4D9375">typedef</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">&#123;</span></span>
<span class="line"><span style="color:#5DA994"> *    prototype: &#123; new (): Prototype;  &#125; | &#123; prototype: Prototype; &#125;,</span></span>
<span class="line"><span style="color:#5DA994"> *    handler: (instance: Prototype) => ReturnType;</span></span>
<span class="line"><span style="color:#5DA994"> * &#125;</span><span style="color:#666666">&#125;</span><span style="color:#5DA994"> Strategy</span></span>
<span class="line"><span style="color:#758575DD"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD">/**</span></span>
<span class="line"><span style="color:#758575DD"> * Declaratively define what should happen for all the possible outcomes of a function.</span></span>
<span class="line"><span style="color:#758575DD"> * This follows an immutable builder pattern, so each method returns a new instance of the ResultMatcher class.</span></span>
<span class="line"><span style="color:#758575DD"> *</span></span>
<span class="line"><span style="color:#758575DD"> * </span><span style="color:#666666">@</span><span style="color:#4D9375">template</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">(...args: any) => any</span><span style="color:#666666">&#125;</span><span style="color:#BD976A"> UnsafeFunc</span></span>
<span class="line"><span style="color:#758575DD"> * </span><span style="color:#666666">@</span><span style="color:#4D9375">template</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">(result: ReturnType&#x3C;UnsafeFunc>) => any</span><span style="color:#666666">&#125;</span><span style="color:#758575DD"> [</span><span style="color:#BD976A">SuccessHandler</span><span style="color:#758575DD">=((result: ReturnType&#x3C;UnsafeFunc>) => ReturnType&#x3C;UnsafeFunc>)]</span></span>
<span class="line"><span style="color:#758575DD"> * </span><span style="color:#666666">@</span><span style="color:#4D9375">template</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">Strategy&#x3C;any, any>[]</span><span style="color:#666666">&#125;</span><span style="color:#758575DD"> [</span><span style="color:#BD976A">Strategies</span><span style="color:#758575DD">=[]]</span></span>
<span class="line"><span style="color:#758575DD"> * </span><span style="color:#666666">@</span><span style="color:#4D9375">template</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">((e: unknown) => any)</span><span style="color:#666666">&#125;</span><span style="color:#758575DD"> [</span><span style="color:#BD976A">FallbackHandler</span><span style="color:#758575DD">=(e: unknown) => never]</span></span>
<span class="line"><span style="color:#758575DD"> */</span></span>
<span class="line"><span style="color:#4D9375">export</span><span style="color:#CB7676"> class</span><span style="color:#5DA994"> ResultMatcher</span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#758575DD">  /** </span><span style="color:#666666">@</span><span style="color:#4D9375">type</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">UnsafeFunc</span><span style="color:#666666">&#125;</span><span style="color:#758575DD"> */</span></span>
<span class="line"><span style="color:#BD976A">  #unsafeFunction</span><span style="color:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD">  /** </span><span style="color:#666666">@</span><span style="color:#4D9375">type</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">Strategies</span><span style="color:#666666">&#125;</span><span style="color:#758575DD"> */</span></span>
<span class="line"><span style="color:#BD976A">  #strategies</span><span style="color:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD">  /** </span><span style="color:#666666">@</span><span style="color:#4D9375">type</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">SuccessHandler</span><span style="color:#666666">&#125;</span><span style="color:#758575DD"> */</span></span>
<span class="line"><span style="color:#BD976A">  #successHandler</span><span style="color:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD">  /** </span><span style="color:#666666">@</span><span style="color:#4D9375">type</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">FallbackHandler</span><span style="color:#666666">&#125;</span><span style="color:#758575DD"> */</span></span>
<span class="line"><span style="color:#BD976A">  #fallbackHandler</span><span style="color:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD">  /**</span></span>
<span class="line"><span style="color:#758575DD">   * </span><span style="color:#666666">@</span><span style="color:#4D9375">param</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">UnsafeFunc</span><span style="color:#666666">&#125;</span><span style="color:#BD976A"> func</span></span>
<span class="line"><span style="color:#758575DD">   * </span><span style="color:#666666">@</span><span style="color:#4D9375">param</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">Strategies</span><span style="color:#666666">&#125;</span><span style="color:#BD976A"> strategies</span></span>
<span class="line"><span style="color:#758575DD">   * </span><span style="color:#666666">@</span><span style="color:#4D9375">param</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">SuccessHandler</span><span style="color:#666666">&#125;</span><span style="color:#BD976A"> successHandler</span></span>
<span class="line"><span style="color:#758575DD">   * </span><span style="color:#666666">@</span><span style="color:#4D9375">param</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">FallbackHandler</span><span style="color:#666666">&#125;</span><span style="color:#BD976A"> fallbackHandler</span></span>
<span class="line"><span style="color:#758575DD">   */</span></span>
<span class="line"><span style="color:#CB7676">  constructor</span><span style="color:#666666">(</span></span>
<span class="line"><span style="color:#BD976A">    func</span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#BD976A">    strategies</span><span style="color:#666666"> =</span><span style="color:#758575DD"> /** </span><span style="color:#666666">@</span><span style="color:#4D9375">type</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">any</span><span style="color:#666666">&#125;</span><span style="color:#758575DD"> */</span><span style="color:#666666"> ([]),</span></span>
<span class="line"><span style="color:#BD976A">    successHandler</span><span style="color:#666666"> =</span><span style="color:#758575DD"> /** </span><span style="color:#666666">@</span><span style="color:#4D9375">type</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">any</span><span style="color:#666666">&#125;</span><span style="color:#758575DD"> */</span><span style="color:#666666"> (</span><span style="color:#BD976A">identity</span><span style="color:#666666">),</span></span>
<span class="line"><span style="color:#BD976A">    fallbackHandler</span><span style="color:#666666"> =</span><span style="color:#758575DD"> /** </span><span style="color:#666666">@</span><span style="color:#4D9375">type</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">any</span><span style="color:#666666">&#125;</span><span style="color:#758575DD"> */</span><span style="color:#666666"> (</span><span style="color:#BD976A">raise</span><span style="color:#666666">),</span></span>
<span class="line"><span style="color:#666666">  )</span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#C99076">    this</span><span style="color:#666666">.</span><span style="color:#BD976A">#unsafeFunction</span><span style="color:#666666"> =</span><span style="color:#BD976A"> func</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#C99076">    this</span><span style="color:#666666">.</span><span style="color:#BD976A">#strategies</span><span style="color:#666666"> =</span><span style="color:#BD976A"> strategies</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#C99076">    this</span><span style="color:#666666">.</span><span style="color:#BD976A">#successHandler</span><span style="color:#666666"> =</span><span style="color:#BD976A"> successHandler</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#C99076">    this</span><span style="color:#666666">.</span><span style="color:#BD976A">#fallbackHandler</span><span style="color:#666666"> =</span><span style="color:#BD976A"> fallbackHandler</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD">  /**</span></span>
<span class="line"><span style="color:#758575DD">   * Defines a strategy for a given error type.</span></span>
<span class="line"><span style="color:#758575DD">   *</span></span>
<span class="line"><span style="color:#758575DD">   * </span><span style="color:#666666">@</span><span style="color:#4D9375">template</span><span style="color:#BD976A"> Prototype</span></span>
<span class="line"><span style="color:#758575DD">   * </span><span style="color:#666666">@</span><span style="color:#4D9375">template</span><span style="color:#BD976A"> StrategyReturnType</span></span>
<span class="line"><span style="color:#758575DD">   *</span></span>
<span class="line"><span style="color:#758575DD">   * </span><span style="color:#666666">@</span><span style="color:#4D9375">param</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">&#123; new (): Prototype;&#125; | &#123; prototype: Prototype; &#125;</span><span style="color:#666666">&#125;</span><span style="color:#BD976A"> prototype</span><span style="color:#758575DD"> - The error type to handle. Thrown things will be compared against this with &#96;instanceof&#96;.</span></span>
<span class="line"><span style="color:#758575DD">   * </span><span style="color:#666666">@</span><span style="color:#4D9375">param</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">(instance: Prototype) => StrategyReturnType</span><span style="color:#666666">&#125;</span><span style="color:#BD976A"> handler</span><span style="color:#758575DD"> - Callback to handle the error.</span></span>
<span class="line"><span style="color:#758575DD">   * </span><span style="color:#666666">@</span><span style="color:#4D9375">returns</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">ResultMatcher&#x3C;UnsafeFunc, SuccessHandler, [...Strategies, Strategy&#x3C;Prototype, StrategyReturnType>], FallbackHandler></span><span style="color:#666666">&#125;</span></span>
<span class="line"><span style="color:#758575DD">   */</span></span>
<span class="line"><span style="color:#80A665">  catch</span><span style="color:#666666">(</span><span style="color:#BD976A">prototype</span><span style="color:#666666">,</span><span style="color:#BD976A"> handler</span><span style="color:#666666">)</span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#CB7676">    const</span><span style="color:#BD976A"> registeredStrategy</span><span style="color:#666666"> =</span><span style="color:#666666"> &#123;</span><span style="color:#BD976A"> prototype</span><span style="color:#666666">,</span><span style="color:#BD976A"> handler</span><span style="color:#666666"> &#125;;</span></span>
<span class="line"><span style="color:#4D9375">    return</span><span style="color:#CB7676"> new</span><span style="color:#80A665"> ResultMatcher</span><span style="color:#666666">(</span></span>
<span class="line"><span style="color:#C99076">      this</span><span style="color:#666666">.</span><span style="color:#BD976A">#unsafeFunction</span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#666666">      [...</span><span style="color:#C99076">this</span><span style="color:#666666">.</span><span style="color:#BD976A">#strategies</span><span style="color:#666666">,</span><span style="color:#BD976A"> registeredStrategy</span><span style="color:#666666">],</span></span>
<span class="line"><span style="color:#C99076">      this</span><span style="color:#666666">.</span><span style="color:#BD976A">#successHandler</span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#C99076">      this</span><span style="color:#666666">.</span><span style="color:#BD976A">#fallbackHandler</span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#666666">    );</span></span>
<span class="line"><span style="color:#666666">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD">  /**</span></span>
<span class="line"><span style="color:#758575DD">   * </span><span style="color:#666666">@</span><span style="color:#4D9375">template</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">(e:unknown) => any</span><span style="color:#666666">&#125;</span><span style="color:#BD976A"> Handler</span></span>
<span class="line"><span style="color:#758575DD">   *</span></span>
<span class="line"><span style="color:#758575DD">   * </span><span style="color:#666666">@</span><span style="color:#4D9375">param</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">Handler</span><span style="color:#666666">&#125;</span><span style="color:#BD976A"> handler</span></span>
<span class="line"><span style="color:#758575DD">   * </span><span style="color:#666666">@</span><span style="color:#4D9375">returns</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">ResultMatcher&#x3C;UnsafeFunc, SuccessHandler, Strategies, Handler></span><span style="color:#666666">&#125;</span></span>
<span class="line"><span style="color:#758575DD">   */</span></span>
<span class="line"><span style="color:#80A665">  catchAll</span><span style="color:#666666">(</span><span style="color:#BD976A">handler</span><span style="color:#666666">)</span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#4D9375">    return</span><span style="color:#CB7676"> new</span><span style="color:#80A665"> ResultMatcher</span><span style="color:#666666">(</span></span>
<span class="line"><span style="color:#C99076">      this</span><span style="color:#666666">.</span><span style="color:#BD976A">#unsafeFunction</span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#C99076">      this</span><span style="color:#666666">.</span><span style="color:#BD976A">#strategies</span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#C99076">      this</span><span style="color:#666666">.</span><span style="color:#BD976A">#successHandler</span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#BD976A">      handler</span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#666666">    );</span></span>
<span class="line"><span style="color:#666666">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD">  /**</span></span>
<span class="line"><span style="color:#758575DD">   * Handle the happy path</span></span>
<span class="line"><span style="color:#758575DD">   *</span></span>
<span class="line"><span style="color:#758575DD">   * </span><span style="color:#666666">@</span><span style="color:#4D9375">template</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">(result: ReturnType&#x3C;UnsafeFunc>) => any</span><span style="color:#666666">&#125;</span><span style="color:#BD976A"> Handler</span></span>
<span class="line"><span style="color:#758575DD">   * </span><span style="color:#666666">@</span><span style="color:#4D9375">param</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">Handler</span><span style="color:#666666">&#125;</span><span style="color:#BD976A"> handler</span></span>
<span class="line"><span style="color:#758575DD">   * </span><span style="color:#666666">@</span><span style="color:#4D9375">returns</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">ResultMatcher&#x3C;UnsafeFunc, Handler, Strategies, FallbackHandler></span><span style="color:#666666">&#125;</span></span>
<span class="line"><span style="color:#758575DD">   */</span></span>
<span class="line"><span style="color:#80A665">  ok</span><span style="color:#666666">(</span><span style="color:#BD976A">handler</span><span style="color:#666666">)</span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#4D9375">    return</span><span style="color:#CB7676"> new</span><span style="color:#80A665"> ResultMatcher</span><span style="color:#666666">(</span></span>
<span class="line"><span style="color:#C99076">      this</span><span style="color:#666666">.</span><span style="color:#BD976A">#unsafeFunction</span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#C99076">      this</span><span style="color:#666666">.</span><span style="color:#BD976A">#strategies</span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#BD976A">      handler</span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#C99076">      this</span><span style="color:#666666">.</span><span style="color:#BD976A">#fallbackHandler</span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#666666">    );</span></span>
<span class="line"><span style="color:#666666">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD">  /**</span></span>
<span class="line"><span style="color:#758575DD">   * Calls the unsafe function with the given parameters and handles any errors that may be thrown</span></span>
<span class="line"><span style="color:#758575DD">   * according to the registered strategies.</span></span>
<span class="line"><span style="color:#758575DD">   *</span></span>
<span class="line"><span style="color:#758575DD">   * </span><span style="color:#666666">@</span><span style="color:#4D9375">param</span><span style="color:#666666">  &#123;</span><span style="color:#5DA994">Parameters&#x3C;UnsafeFunc></span><span style="color:#666666">&#125;</span><span style="color:#BD976A"> params</span></span>
<span class="line"><span style="color:#758575DD">   * </span><span style="color:#666666">@</span><span style="color:#4D9375">returns</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">ReturnType&#x3C;SuccessHandler> | ReturnType&#x3C;Strategies[number]["handler"]> | ReturnType&#x3C;FallbackHandler></span><span style="color:#666666">&#125;</span></span>
<span class="line"><span style="color:#758575DD">   */</span></span>
<span class="line"><span style="color:#80A665">  run</span><span style="color:#666666">(...</span><span style="color:#BD976A">params</span><span style="color:#666666">)</span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#CB7676">    let</span><span style="color:#BD976A"> successResult</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#4D9375">    try</span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#758575DD">      // @ts-ignore</span></span>
<span class="line"><span style="color:#BD976A">      successResult</span><span style="color:#666666"> =</span><span style="color:#C99076"> this</span><span style="color:#666666">.</span><span style="color:#80A665">#unsafeFunction</span><span style="color:#666666">(...</span><span style="color:#BD976A">params</span><span style="color:#666666">);</span></span>
<span class="line"><span style="color:#666666">    &#125;</span><span style="color:#4D9375"> catch</span><span style="color:#666666"> (</span><span style="color:#BD976A">e</span><span style="color:#666666">)</span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#4D9375">      for</span><span style="color:#666666"> (</span><span style="color:#CB7676">const</span><span style="color:#BD976A"> strategy</span><span style="color:#CB7676"> of</span><span style="color:#C99076"> this</span><span style="color:#666666">.</span><span style="color:#BD976A">#strategies</span><span style="color:#666666">)</span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#4D9375">        if</span><span style="color:#666666"> (</span><span style="color:#BD976A">e</span><span style="color:#CB7676"> instanceof</span><span style="color:#758575DD"> /** </span><span style="color:#666666">@</span><span style="color:#4D9375">type</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">any</span><span style="color:#666666">&#125;</span><span style="color:#758575DD"> */</span><span style="color:#666666"> (</span><span style="color:#5DA994">strategy</span><span style="color:#666666">.</span><span style="color:#5DA994">prototype</span><span style="color:#666666">))</span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#4D9375">          return</span><span style="color:#BD976A"> strategy</span><span style="color:#666666">.</span><span style="color:#80A665">handler</span><span style="color:#666666">(</span><span style="color:#BD976A">e</span><span style="color:#666666">);</span></span>
<span class="line"><span style="color:#666666">        &#125;</span></span>
<span class="line"><span style="color:#666666">      &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375">      return</span><span style="color:#C99076"> this</span><span style="color:#666666">.</span><span style="color:#80A665">#fallbackHandler</span><span style="color:#666666">(</span><span style="color:#BD976A">e</span><span style="color:#666666">);</span></span>
<span class="line"><span style="color:#666666">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375">    return</span><span style="color:#C99076"> this</span><span style="color:#666666">.</span><span style="color:#80A665">#successHandler</span><span style="color:#666666">(</span><span style="color:#BD976A">successResult</span><span style="color:#666666">);</span></span>
<span class="line"><span style="color:#666666">  &#125;</span></span>
<span class="line"><span style="color:#666666">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD">/**</span></span>
<span class="line"><span style="color:#758575DD"> * The identity function</span></span>
<span class="line"><span style="color:#758575DD"> * </span><span style="color:#666666">@</span><span style="color:#4D9375">template</span><span style="color:#BD976A"> T</span></span>
<span class="line"><span style="color:#758575DD"> * </span><span style="color:#666666">@</span><span style="color:#4D9375">param</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">T</span><span style="color:#666666">&#125;</span><span style="color:#BD976A"> x</span></span>
<span class="line"><span style="color:#758575DD"> * </span><span style="color:#666666">@</span><span style="color:#4D9375">returns</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">T</span><span style="color:#666666">&#125;</span></span>
<span class="line"><span style="color:#758575DD"> */</span></span>
<span class="line"><span style="color:#CB7676">const</span><span style="color:#80A665"> identity</span><span style="color:#666666"> =</span><span style="color:#666666"> (</span><span style="color:#BD976A">x</span><span style="color:#666666">)</span><span style="color:#666666"> =></span><span style="color:#BD976A"> x</span><span style="color:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD">/**</span></span>
<span class="line"><span style="color:#758575DD"> * </span><span style="color:#666666">@</span><span style="color:#4D9375">template</span><span style="color:#BD976A"> T</span></span>
<span class="line"><span style="color:#758575DD"> * </span><span style="color:#666666">@</span><span style="color:#4D9375">param</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">T</span><span style="color:#666666">&#125;</span><span style="color:#BD976A"> e</span></span>
<span class="line"><span style="color:#758575DD"> * </span><span style="color:#666666">@</span><span style="color:#4D9375">returns</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">never</span><span style="color:#666666">&#125;</span></span>
<span class="line"><span style="color:#758575DD"> * </span><span style="color:#666666">@</span><span style="color:#4D9375">throws</span><span style="color:#666666"> &#123;</span><span style="color:#5DA994">T</span><span style="color:#666666">&#125;</span></span>
<span class="line"><span style="color:#758575DD"> */</span></span>
<span class="line"><span style="color:#CB7676">const</span><span style="color:#80A665"> raise</span><span style="color:#666666"> =</span><span style="color:#666666"> (</span><span style="color:#BD976A">e</span><span style="color:#666666">)</span><span style="color:#666666"> =></span><span style="color:#666666"> &#123;</span></span>
<span class="line"><span style="color:#4D9375">  throw</span><span style="color:#BD976A"> e</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">&#125;;</span></span></code></pre>`,P;return{c(){r=e("h1"),r.innerHTML=os,q=p(),d=e("p"),d.textContent=es,W=p(),y=e("h2"),y.innerHTML=ts,z=p(),h=e("p"),h.textContent=cs,J=p(),g=new U(!1),H=p(),A=e("p"),A.innerHTML=rs,O=p(),B=e("p"),B.textContent=ys,G=p(),T=new U(!1),M=p(),w=e("p"),w.textContent=is,V=p(),i=e("h2"),i.innerHTML=Ds,Y=p(),C=e("p"),C.innerHTML=us,K=p(),_=new U(!1),R=p(),m=e("p"),m.textContent=ds,N=p(),D=e("h2"),D.innerHTML=hs,Q=p(),v=e("p"),v.innerHTML=As,X=p(),S=new U(!1),L=p(),f=e("p"),f.textContent=Bs,Z=p(),x=e("p"),x.textContent=ws,$=p(),k=e("ul"),k.innerHTML=Cs,ss=p(),b=e("p"),b.innerHTML=ms,as=p(),E=e("ul"),E.innerHTML=vs,ns=p(),u=e("h2"),u.innerHTML=fs,ls=p(),F=new U(!1),P=xs(),this.h()},l(s){r=t(s,"H1",{id:!0,"data-svelte-h":!0}),c(r)!=="svelte-z0u4rw"&&(r.innerHTML=os),q=o(s),d=t(s,"P",{"data-svelte-h":!0}),c(d)!=="svelte-xe0fn0"&&(d.textContent=es),W=o(s),y=t(s,"H2",{id:!0,"data-svelte-h":!0}),c(y)!=="svelte-xa1j4"&&(y.innerHTML=ts),z=o(s),h=t(s,"P",{"data-svelte-h":!0}),c(h)!=="svelte-j0y3la"&&(h.textContent=cs),J=o(s),g=I(s,!1),H=o(s),A=t(s,"P",{"data-svelte-h":!0}),c(A)!=="svelte-1o7ycng"&&(A.innerHTML=rs),O=o(s),B=t(s,"P",{"data-svelte-h":!0}),c(B)!=="svelte-7telbu"&&(B.textContent=ys),G=o(s),T=I(s,!1),M=o(s),w=t(s,"P",{"data-svelte-h":!0}),c(w)!=="svelte-1kgaj31"&&(w.textContent=is),V=o(s),i=t(s,"H2",{id:!0,"data-svelte-h":!0}),c(i)!=="svelte-kzejms"&&(i.innerHTML=Ds),Y=o(s),C=t(s,"P",{"data-svelte-h":!0}),c(C)!=="svelte-dvkkc4"&&(C.innerHTML=us),K=o(s),_=I(s,!1),R=o(s),m=t(s,"P",{"data-svelte-h":!0}),c(m)!=="svelte-xy7f4b"&&(m.textContent=ds),N=o(s),D=t(s,"H2",{id:!0,"data-svelte-h":!0}),c(D)!=="svelte-9hqu1k"&&(D.innerHTML=hs),Q=o(s),v=t(s,"P",{"data-svelte-h":!0}),c(v)!=="svelte-tiiv16"&&(v.innerHTML=As),X=o(s),S=I(s,!1),L=o(s),f=t(s,"P",{"data-svelte-h":!0}),c(f)!=="svelte-h0ke80"&&(f.textContent=Bs),Z=o(s),x=t(s,"P",{"data-svelte-h":!0}),c(x)!=="svelte-aex9p"&&(x.textContent=ws),$=o(s),k=t(s,"UL",{"data-svelte-h":!0}),c(k)!=="svelte-1rlehpz"&&(k.innerHTML=Cs),ss=o(s),b=t(s,"P",{"data-svelte-h":!0}),c(b)!=="svelte-12ouq9h"&&(b.innerHTML=ms),as=o(s),E=t(s,"UL",{"data-svelte-h":!0}),c(E)!=="svelte-1fgu1t0"&&(E.innerHTML=vs),ns=o(s),u=t(s,"H2",{id:!0,"data-svelte-h":!0}),c(u)!=="svelte-1m2hw0c"&&(u.innerHTML=fs),ls=o(s),F=I(s,!1),P=xs(),this.h()},h(){j(r,"id","declarative-exception-handling"),j(y,"id","the-state-of-error-handling-in-js"),g.a=H,T.a=M,j(i,"id","what-we-want"),_.a=R,j(D,"id","resultmatcher-a-potential-solution"),S.a=L,j(u,"id","the-snippet"),F.a=P},m(s,a){n(s,r,a),n(s,q,a),n(s,d,a),n(s,W,a),n(s,y,a),n(s,z,a),n(s,h,a),n(s,J,a),g.m(bs,s,a),n(s,H,a),n(s,A,a),n(s,O,a),n(s,B,a),n(s,G,a),T.m(Es,s,a),n(s,M,a),n(s,w,a),n(s,V,a),n(s,i,a),n(s,Y,a),n(s,C,a),n(s,K,a),_.m(gs,s,a),n(s,R,a),n(s,m,a),n(s,N,a),n(s,D,a),n(s,Q,a),n(s,v,a),n(s,X,a),S.m(Hs,s,a),n(s,L,a),n(s,f,a),n(s,Z,a),n(s,x,a),n(s,$,a),n(s,k,a),n(s,ss,a),n(s,b,a),n(s,as,a),n(s,E,a),n(s,ns,a),n(s,u,a),n(s,ls,a),F.m(Ts,s,a),n(s,P,a)},p:ps,i:ps,o:ps,d(s){s&&(l(r),l(q),l(d),l(W),l(y),l(z),l(h),l(J),g.d(),l(H),l(A),l(O),l(B),l(G),T.d(),l(M),l(w),l(V),l(i),l(Y),l(C),l(K),_.d(),l(R),l(m),l(N),l(D),l(Q),l(v),l(X),S.d(),l(L),l(f),l(Z),l(x),l($),l(k),l(ss),l(b),l(as),l(E),l(ns),l(u),l(ls),l(P),F.d())}}}class Ps extends _s{constructor(r){super(),Rs(this,r,null,Ss,Ms,{})}}export{Ps as component};
