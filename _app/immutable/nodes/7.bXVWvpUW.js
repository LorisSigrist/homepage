import{s as de,n as X}from"../chunks/scheduler.IgQUtjbl.js";import{S as ge,i as fe,g as s,s as i,h as l,C as r,c as o,j as ve,f as n,k as L,a}from"../chunks/index.D4Vnkr5k.js";function ye(me){let p,$='<a href="#building-an-i18n-library-for-the-modern-web">Building an i18n library for the modern Web</a>',P,h,K="Over the last few years we’ve seen the emergence of “partial hydration” patterns across many frameworks. The idea is that most rendering happens on the server, with only the interactive parts of a page actually shipping code to the client. The client and server <em>cooperate</em> to show a user a site. This idea has come in many iterations, be it React Server Components, Astro Islands, or even HTMX.",S,d,N="This has some interesting implications for i18n libraries.",j,g,V='<li><ol><li>Since the server-rendered and client-rendered parts always share the same language, language state is <em>global</em>. The only way to switch languages is to rerender everything, including the server-rendered parts, which  can only be done by fully reloading the page. Thus, any form of message reactivity or language lazy-loading is useless.</li></ol></li> <li><ol start="2"><li>Most Translations are rendered on the server &amp; don’t depend on client side state</li></ol> <ul><li>On the server, any i18n library really serves as a templating helper, so they should excel at doing that!</li> <li>Since only a minority of messages will include client side state, the bundle shipped by an i18n library should only include those messages and the code they require.</li></ul></li>',J,u,Y='<a href="#the-status-quo">The Status Quo</a>',z,f,Z="Most i18n libraries are still conceptualised as monoliths that do all the work in the same place. Language Detection, Message Fallbacks, Lazy Loading &amp; so many more features. However, doing all the work in one place usually means doing it <strong>twice</strong>! Once on the server and again on the client. This has resulted in some truly impressive bundle sizes. <code>i18next</code>, one of the most popular i18n libraries needs over 40kB to render a single message. This is after bundling.",q,v,ee="Clearly there is a lot of room for improvement.",B,c,te='<a href="#a-modern-i18n-library">A modern i18n library</a>',O,y,ne="What would an i18n library look like that embraces the cooperation between Server and Client, that’s built for partial hydration?",E,k,ae='That’s exactly what <a href="https://www.inlang.com" rel="noopener noreferrer" target="_blank">we</a> tried to accomplish with <a href="https://inlang.com/m/gerre34r/library-inlang-paraglideJs" rel="noopener noreferrer" target="_blank">ParaglideJS</a>',W,b,se="Paraglide is a compiler that <em>compiles</em> your messages into JS modules. Each message is it’s own export.",A,w,he=`<code class="language-js"><span class="token comment">//Paraglide's output</span>

<span class="token comment">/**
 * @param &#123;&#123; name: string &#125;&#125; params
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">greeting</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>params<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">my_other_message</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">My Other Message</span><span class="token template-punctuation string">&#96;</span></span>
<span class="token comment">// ...</span></code>`,I,T,le="This takes advantage of modern tooling.",R,x,ie="<li>TypeScript. Messages are fully type-safe, including any parameters they take. This makes Paraglide a joy to use for templating.</li> <li>Modern Build tools remove JS code that isn’t used automatically. Because messages are individual JS exports, they can individually be removed if they aren’t used. This automatically only ships messages that are needed on the client. This results in some <em>tiny</em> bundle-sizes, starting as low as 100 bytes.</li>",D,H,re="We can further take advantage of the cooperation between server and client to skip language detection on the client entirely. Because the server already decided which language to render, the client bundle can just read which language was used from the HTML.",F,M,oe='Because <a href="https://inlang.com/m/gerre34r/library-inlang-paraglideJs" rel="noopener noreferrer" target="_blank">ParaglideJS</a>is a compiler, fallback messages can be resolved at build time, so no runtime code is needed for that.',G,C,pe='So far, this approach is working very well in any partial-hydration setting. However, even in frameworks without partial hydration <a href="https://inlang.com/m/gerre34r/library-inlang-paraglideJs" rel="noopener noreferrer" target="_blank">ParaglideJS</a> can still be useful. It still only ships messages that are used on a given <em>page</em> without you needing to manually split messages into namespaces as you usually would.',Q,m,ue='<a href="#conclusion">Conclusion</a>',U,_,ce='Going forward, scaling <em>down</em> and integration with modern tooling is going to be increasingly important for i18n libraries. <a href="https://inlang.com/m/gerre34r/library-inlang-paraglideJs" rel="noopener noreferrer" target="_blank">ParaglideJS</a> is one attempt at this which can be used <em>today</em>. Clearly there is a lot of room for innovation in this space &amp; we’re interested in how it will develop over the next few months and years.';return{c(){p=s("h1"),p.innerHTML=$,P=i(),h=s("p"),h.innerHTML=K,S=i(),d=s("p"),d.textContent=N,j=i(),g=s("ul"),g.innerHTML=V,J=i(),u=s("h2"),u.innerHTML=Y,z=i(),f=s("p"),f.innerHTML=Z,q=i(),v=s("p"),v.textContent=ee,B=i(),c=s("h2"),c.innerHTML=te,O=i(),y=s("p"),y.textContent=ne,E=i(),k=s("p"),k.innerHTML=ae,W=i(),b=s("p"),b.innerHTML=se,A=i(),w=s("pre"),I=i(),T=s("p"),T.textContent=le,R=i(),x=s("ol"),x.innerHTML=ie,D=i(),H=s("p"),H.textContent=re,F=i(),M=s("p"),M.innerHTML=oe,G=i(),C=s("p"),C.innerHTML=pe,Q=i(),m=s("h2"),m.innerHTML=ue,U=i(),_=s("p"),_.innerHTML=ce,this.h()},l(e){p=l(e,"H1",{id:!0,"data-svelte-h":!0}),r(p)!=="svelte-nwsd6t"&&(p.innerHTML=$),P=o(e),h=l(e,"P",{"data-svelte-h":!0}),r(h)!=="svelte-1c1bczr"&&(h.innerHTML=K),S=o(e),d=l(e,"P",{"data-svelte-h":!0}),r(d)!=="svelte-j92q2m"&&(d.textContent=N),j=o(e),g=l(e,"UL",{"data-svelte-h":!0}),r(g)!=="svelte-1b02cmv"&&(g.innerHTML=V),J=o(e),u=l(e,"H2",{id:!0,"data-svelte-h":!0}),r(u)!=="svelte-1uw3kpc"&&(u.innerHTML=Y),z=o(e),f=l(e,"P",{"data-svelte-h":!0}),r(f)!=="svelte-8g4jzw"&&(f.innerHTML=Z),q=o(e),v=l(e,"P",{"data-svelte-h":!0}),r(v)!=="svelte-ia1wab"&&(v.textContent=ee),B=o(e),c=l(e,"H2",{id:!0,"data-svelte-h":!0}),r(c)!=="svelte-vrr57j"&&(c.innerHTML=te),O=o(e),y=l(e,"P",{"data-svelte-h":!0}),r(y)!=="svelte-9lzziv"&&(y.textContent=ne),E=o(e),k=l(e,"P",{"data-svelte-h":!0}),r(k)!=="svelte-j89qxe"&&(k.innerHTML=ae),W=o(e),b=l(e,"P",{"data-svelte-h":!0}),r(b)!=="svelte-ft7ejr"&&(b.innerHTML=se),A=o(e),w=l(e,"PRE",{class:!0});var t=ve(w);t.forEach(n),I=o(e),T=l(e,"P",{"data-svelte-h":!0}),r(T)!=="svelte-1mu4d2v"&&(T.textContent=le),R=o(e),x=l(e,"OL",{"data-svelte-h":!0}),r(x)!=="svelte-1gandop"&&(x.innerHTML=ie),D=o(e),H=l(e,"P",{"data-svelte-h":!0}),r(H)!=="svelte-fcnch1"&&(H.textContent=re),F=o(e),M=l(e,"P",{"data-svelte-h":!0}),r(M)!=="svelte-pfgajt"&&(M.innerHTML=oe),G=o(e),C=l(e,"P",{"data-svelte-h":!0}),r(C)!=="svelte-1tgratn"&&(C.innerHTML=pe),Q=o(e),m=l(e,"H2",{id:!0,"data-svelte-h":!0}),r(m)!=="svelte-kmpttn"&&(m.innerHTML=ue),U=o(e),_=l(e,"P",{"data-svelte-h":!0}),r(_)!=="svelte-kvpqci"&&(_.innerHTML=ce),this.h()},h(){L(p,"id","building-an-i18n-library-for-the-modern-web"),L(u,"id","the-status-quo"),L(c,"id","a-modern-i18n-library"),L(w,"class","language-js"),L(m,"id","conclusion")},m(e,t){a(e,p,t),a(e,P,t),a(e,h,t),a(e,S,t),a(e,d,t),a(e,j,t),a(e,g,t),a(e,J,t),a(e,u,t),a(e,z,t),a(e,f,t),a(e,q,t),a(e,v,t),a(e,B,t),a(e,c,t),a(e,O,t),a(e,y,t),a(e,E,t),a(e,k,t),a(e,W,t),a(e,b,t),a(e,A,t),a(e,w,t),w.innerHTML=he,a(e,I,t),a(e,T,t),a(e,R,t),a(e,x,t),a(e,D,t),a(e,H,t),a(e,F,t),a(e,M,t),a(e,G,t),a(e,C,t),a(e,Q,t),a(e,m,t),a(e,U,t),a(e,_,t)},p:X,i:X,o:X,d(e){e&&(n(p),n(P),n(h),n(S),n(d),n(j),n(g),n(J),n(u),n(z),n(f),n(q),n(v),n(B),n(c),n(O),n(y),n(E),n(k),n(W),n(b),n(A),n(w),n(I),n(T),n(R),n(x),n(D),n(H),n(F),n(M),n(G),n(C),n(Q),n(m),n(U),n(_))}}}class we extends ge{constructor(p){super(),fe(this,p,null,ye,de,{})}}export{we as component};
