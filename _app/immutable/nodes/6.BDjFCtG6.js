import{s as mt,n as ps}from"../chunks/scheduler.IgQUtjbl.js";import{S as ft,i as vt,g as e,s as o,h as p,C as c,c as l,j as u,f as s,k as i,a}from"../chunks/index.D4Vnkr5k.js";function ht($s){let r,os='<a href="#adding-devtools-to-vite-plugins">Adding Devtools to Vite plugins</a>',cn,g,ls="One of my favorite features in any framework is the <em>Svelte Inspector</em>. It allows you to click on a component and then it magically opens the relevant file in your editor.",un,w,cs="In order to accomplish this, without the user’s having to do additional setup, they have to inject their devtool code into the browser during development. Today we will learn how to do that, so that you too can build great devtools!",rn,k,is='<a href="#getting-a-foothold---injecting-js-into-the-browser">Getting a Foothold - Injecting JS into the Browser</a>',kn,x,us="The key is to inject code into vite’s client side entry point. This is surprisingly straight forward since a vite-plugin can just modify any js file using the <code>transform</code> hook.",dn,_,Ks=`<code class="language-js"><span class="token comment">/** @returns &#123;import('vite').Plugin&#125; */</span>
<span class="token keyword">const</span> <span class="token function-variable function">devtoolsPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"devtools"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">enforce</span><span class="token operator">:</span> <span class="token string">"pre"</span><span class="token punctuation">,</span> <span class="token comment">//run before the vite's built-in transformations</span>
  <span class="token literal-property property">apply</span><span class="token operator">:</span> <span class="token string">"serve"</span><span class="token punctuation">,</span> <span class="token comment">//only run in dev mode</span>
  <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> id<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>options<span class="token operator">?.</span>ssr<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">//Don't run in SSR mode</span>

    <span class="token comment">//Inject some code into the vite's client side entry point</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"vite/dist/client/client.mjs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">code</span><span class="token operator">:</span> code <span class="token operator">+</span> <span class="token string">"&#92;n"</span> <span class="token operator">+</span> <span class="token string">"console.log('Hello World!')"</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`,mn,C,rs=`Opening the dev-site now shows the message in the console.
That’s the foothold we need.`,fn,d,ks='<a href="#importing-our-own-modules">Importing our own modules</a>',vn,T,ds="But to ship non-trivial devtools, we need more than just a foothold. We need more than just appending some code at the end of a file. We need to import our own modules.",hn,M,ms="Unfortunately, this isn’t so straight forward. Our plugin is likely part of an external package and we don’t know where that package will be installed, so we can’t import our own modules using relative paths.",yn,L,Qs=`<code class="language-js"><span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> id<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"vite/dist/client/client.mjs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//How do we import our own modules?</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">code</span><span class="token operator">:</span> code <span class="token operator">+</span> <span class="token string">"&#92;n"</span> <span class="token operator">+</span> <span class="token string">"import(????)"</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,gn,H,fs="I offer a few solutions here:",wn,j,vs="<li>Export the devtools browser code from the plugin package</li> <li>Use a sub-package</li> <li>Magic Module Resolution (preferred)</li>",xn,m,hs='<a href="#option-1-exporting-the-runtime-code-from-the-package">Option 1: Exporting the runtime code from the package</a>',_n,b,ys="This one is very straight forward. We just export the entry point of our devtools from our package. This way all we need to do is to inject an import statement to it in the client side js.",Cn,P,Ys=`<code class="language-js"><span class="token comment">//in the entry point of our package</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">bootstrapDevtools</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Devtool Browser code here</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//in the plugin</span>
<span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> id<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"vite/dist/client/client.mjs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">code</span><span class="token operator">:</span> code <span class="token operator">+</span> <span class="token string">"&#92;n"</span> <span class="token operator">+</span> <span class="token string">'import("my-devtools-plugin").then(module => module.bootstrapDevtools())'</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Tn,E,gs="This works and is very simple, but it has some downsides.",Mn,I,ws="<li>It clutters up the exports of our package.</li> <li>It mixes browser code with plugin code.</li>",Ln,D,xs="<p>It’s probably possible to hide the export from the IDE by modifying the package’s type definitions, but that’s more work than the other solutions.</p>",Hn,f,_s='<a href="#option-2-using-a-sub-package">Option 2: Using a sub-package</a>',jn,R,Cs="Sub packages are a feature of npm that allow you to have multiple entry points in a single package. For example, the <code>svelte</code> package has a sub-package <code>svelte/stores</code> which contains store implementations.",bn,O,Ts="In this approach, we still export the runtime code from our package, but we give it it’s own entry point. This way we don’t clutter up the exports and we don’t mix concerns.",Pn,q,Ms="Here is the setup:",En,U,Js=`<code class="language-undefined">src
|- plugin.js
|- devtools
   |- entry.js</code>`,In,F,Ls="Then, in the <code>package.json</code>, add an exports field with two entries: one for the plugin and one for the devtools.",Dn,W,Vs=`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"my-devtools-plugin"</span><span class="token punctuation">,</span>
  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"."</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"import"</span><span class="token operator">:</span> <span class="token string">"./plugin.js"</span>
        <span class="token property">"types"</span><span class="token operator">:</span> <span class="token string">"./plugin.d.ts"</span> <span class="token comment">//If you have types. link to them here</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"./internal"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"import"</span><span class="token operator">:</span> <span class="token string">"./devtools/entry.js"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Rn,z,Hs="You can then inject an import statement to <code>my-devtools-plugin/internal</code> in the client side js.",On,A,Ns=`<code class="language-js"><span class="token comment">//in the plugin</span>
<span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> id<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"vite/dist/client/client.mjs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">code</span><span class="token operator">:</span> code <span class="token operator">+</span> <span class="token string">"&#92;n"</span> <span class="token operator">+</span> <span class="token string">'import("my-devtools-plugin/internal").then(module => module.bootstrap())'</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,qn,G,js=`This eliminates the code-mixing problem, but does not quite eliminated the import cluttering.
While the <code>my-devtools-plugin</code> package does not have private exports, IDEs might still suggest <code>my-devtools-plugin/internal</code> as an import option. Developers are unlikely to use it, but it’s still a bit annoying.`,Un,S,bs='<p>If you generate your type definitions using <a href="https://www.github.com/Rich-Harris/dts-buddy" rel="noopener noreferrer" target="_blank"><code>dts-buddy</code></a> instead of <code>tsc</code>, you can sidestep this problem by not generating type declarations for the <code>internal</code> sub-package. Otherwise use Option 3.</p>',Fn,v,Ps='<a href="#option-3-magic-module-resolution-preferred">Option 3: Magic Module Resolution (preferred)</a>',Wn,B,Es="If you <em>really</em> don’t want to clutter your exports, this is the best way to go, but it’s a bit of work to set up.",zn,X,Is="The idea is to define a magic module-id that our plugin resolves to the absolute path of our entry point.",An,$,Ds="(Eg: <code>import(&quot;my-package:devtools&quot;)</code> resolves to <code>import(&quot;/home/user/project/node_modules/my-package/devtools/entry.js&quot;)</code> or whatever)",Gn,K,Rs="But how can we know the absolute path of our entry point? The trick is that we know the relative path to the entry point <em>from</em> our plugin file.",Sn,Q,Os="We can get the absolute path of our plugin’s file using <code>import.meta.url</code>. We can then combine that with the relative path to our entry point to get the absolute path to our entry point.",Bn,Y,Zs=`<code class="language-undefined">src
|- plugin.js
|- devtools
   |- entry.js</code>`,Xn,J,nt=`<code class="language-js"><span class="token comment">//plugin.js </span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> dirname <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"node:path"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fileURLToPath <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"node:url"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> normalizePath <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vite"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">getDevtoolsEntryPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> srcFolderPath <span class="token operator">=</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token function">fileURLToPath</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> srcFolderPath <span class="token operator">+</span> <span class="token string">"/devtools/entry.js"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,$n,V,qs="Using this, we can then resolve our magic module id to the absolute path of our entry point.",Kn,N,st=`<code class="language-js"><span class="token comment">//plugin.js</span>
<span class="token comment">//...</span>

<span class="token keyword">const</span> <span class="token constant">MAGIC_MODULE_ID</span> <span class="token operator">=</span> <span class="token string">"my-package:devtools"</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">devtoolsPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"devtools"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enforce</span><span class="token operator">:</span> <span class="token string">"pre"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">apply</span><span class="token operator">:</span> <span class="token string">"serve"</span><span class="token punctuation">,</span>
    <span class="token function">resolveId</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">===</span> <span class="token constant">MAGIC_MODULE_ID</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token function">getDevtoolsEntryPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 
    <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> id<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"vite/dist/client/client.mjs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">code</span><span class="token operator">:</span> code <span class="token operator">+</span> <span class="token string">"&#92;n"</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">import("</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">MAGIC_MODULE_ID</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">").then(module => module.bootstrapDevtools())</span><span class="token template-punctuation string">&#96;</span></span> <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`,Qn,Z,Us="If you’re going to use this, make sure that the relative path to your entry point is correct. Compiling or Bundling your plugin code may change the relative path.",Yn,h,Fs='<a href="#addendum-dealing-with-fsallow">Addendum: Dealing with <code>fs.allow</code></a>',Jn,nn,Ws="<code>vite</code> has a configuration option called <code>fs.allow</code>. It decides which paths vite’s file-imports are allowed to read. This prevents path-traversal attacks. If your user’s use this and haven’t allowed paths inside your package folder the above code will break. You could just instruct them to allow these paths, but that’s not very user friendly.",Vn,sn,zs="We can sidestep this by loading the code ourselves using the <code>load</code> hook and <code>fs.readFile</code>. We need to do this for all devtool files, not just the entry point.",Nn,tn,As="To do this, we will not use a <em>magic id</em>, but a <em>magic prefix</em>. We will check if an import id starts with the prefix, and if it does, replace the prefix with the path to our <em>src/devtools/</em> folder and load the files ourselves.",Zn,an,tt=`<code class="language-undefined">src
|- plugin.js
|- devtools
   |- entry.js
   |- imported-by-entry.js</code>`,ns,en,Gs="Eg:",ss,pn,Ss="<li>“my-package:devtools/entry.js” -&gt; “/home/user/project/node_modules/my-package/devtools/entry.js”</li> <li>“my-package:devtools/imported-by-entry.js” -&gt; “/home/user/project/node_modules/my-package/devtools/imported-by-entry.js</li>",ts,on,at=`<code class="language-js"><span class="token comment">//...</span>
<span class="token keyword">const</span> srcFolderPath <span class="token operator">=</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token function">fileURLToPath</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> devtoolsFolderPath <span class="token operator">=</span> srcFolderPath <span class="token operator">+</span> <span class="token string">"/devtools"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">MAGIC_MODULE_PREFIX</span> <span class="token operator">=</span> <span class="token string">"my-package:devtools"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">devtoolsPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"devtools"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enforce</span><span class="token operator">:</span> <span class="token string">"pre"</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">apply</span><span class="token operator">:</span> <span class="token string">"serve"</span><span class="token punctuation">,</span>

    <span class="token function">resolveId</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token constant">MAGIC_MODULE_PREFIX</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> id<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">MAGIC_MODULE_PREFIX</span><span class="token punctuation">,</span> devtoolsFolderPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 

    <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>devtoolsFolderPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> cleanPath <span class="token operator">=</span> id<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">//remove query params</span>
            cleanPath <span class="token operator">=</span> cleanId<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">//remove hash</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>cleanPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>cleanPath<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Could not find file </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>cleanPath<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> id<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"vite/dist/client/client.mjs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">code</span><span class="token operator">:</span> code <span class="token operator">+</span> <span class="token string">"&#92;n"</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">import("</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">MAGIC_MODULE_ID</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/entry.js").then(module => module.bootstrap())</span><span class="token template-punctuation string">&#96;</span></span> <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`,as,y,Bs='<a href="#in-conclusion">In Conclusion</a>',es,ln,Xs="It’s not hard, but it’s a hassle. Fortunately, you only need to do this once.";return{c(){r=e("h1"),r.innerHTML=os,cn=o(),g=e("p"),g.innerHTML=ls,un=o(),w=e("p"),w.textContent=cs,rn=o(),k=e("h2"),k.innerHTML=is,kn=o(),x=e("p"),x.innerHTML=us,dn=o(),_=e("pre"),mn=o(),C=e("p"),C.textContent=rs,fn=o(),d=e("h2"),d.innerHTML=ks,vn=o(),T=e("p"),T.textContent=ds,hn=o(),M=e("p"),M.textContent=ms,yn=o(),L=e("pre"),gn=o(),H=e("p"),H.textContent=fs,wn=o(),j=e("ol"),j.innerHTML=vs,xn=o(),m=e("h3"),m.innerHTML=hs,_n=o(),b=e("p"),b.textContent=ys,Cn=o(),P=e("pre"),Tn=o(),E=e("p"),E.textContent=gs,Mn=o(),I=e("ul"),I.innerHTML=ws,Ln=o(),D=e("blockquote"),D.innerHTML=xs,Hn=o(),f=e("h3"),f.innerHTML=_s,jn=o(),R=e("p"),R.innerHTML=Cs,bn=o(),O=e("p"),O.textContent=Ts,Pn=o(),q=e("p"),q.textContent=Ms,En=o(),U=e("pre"),In=o(),F=e("p"),F.innerHTML=Ls,Dn=o(),W=e("pre"),Rn=o(),z=e("p"),z.innerHTML=Hs,On=o(),A=e("pre"),qn=o(),G=e("p"),G.innerHTML=js,Un=o(),S=e("blockquote"),S.innerHTML=bs,Fn=o(),v=e("h3"),v.innerHTML=Ps,Wn=o(),B=e("p"),B.innerHTML=Es,zn=o(),X=e("p"),X.textContent=Is,An=o(),$=e("p"),$.innerHTML=Ds,Gn=o(),K=e("p"),K.innerHTML=Rs,Sn=o(),Q=e("p"),Q.innerHTML=Os,Bn=o(),Y=e("pre"),Xn=o(),J=e("pre"),$n=o(),V=e("p"),V.textContent=qs,Kn=o(),N=e("pre"),Qn=o(),Z=e("p"),Z.textContent=Us,Yn=o(),h=e("h4"),h.innerHTML=Fs,Jn=o(),nn=e("p"),nn.innerHTML=Ws,Vn=o(),sn=e("p"),sn.innerHTML=zs,Nn=o(),tn=e("p"),tn.innerHTML=As,Zn=o(),an=e("pre"),ns=o(),en=e("p"),en.textContent=Gs,ss=o(),pn=e("ul"),pn.innerHTML=Ss,ts=o(),on=e("pre"),as=o(),y=e("h2"),y.innerHTML=Bs,es=o(),ln=e("p"),ln.textContent=Xs,this.h()},l(n){r=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(r)!=="svelte-149hxn8"&&(r.innerHTML=os),cn=l(n),g=p(n,"P",{"data-svelte-h":!0}),c(g)!=="svelte-f4e11x"&&(g.innerHTML=ls),un=l(n),w=p(n,"P",{"data-svelte-h":!0}),c(w)!=="svelte-1gnlx2z"&&(w.textContent=cs),rn=l(n),k=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(k)!=="svelte-13bm82k"&&(k.innerHTML=is),kn=l(n),x=p(n,"P",{"data-svelte-h":!0}),c(x)!=="svelte-139m8pm"&&(x.innerHTML=us),dn=l(n),_=p(n,"PRE",{class:!0});var t=u(_);t.forEach(s),mn=l(n),C=p(n,"P",{"data-svelte-h":!0}),c(C)!=="svelte-dykwd4"&&(C.textContent=rs),fn=l(n),d=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(d)!=="svelte-wuufpu"&&(d.innerHTML=ks),vn=l(n),T=p(n,"P",{"data-svelte-h":!0}),c(T)!=="svelte-1q4s0sc"&&(T.textContent=ds),hn=l(n),M=p(n,"P",{"data-svelte-h":!0}),c(M)!=="svelte-1kcsokb"&&(M.textContent=ms),yn=l(n),L=p(n,"PRE",{class:!0});var et=u(L);et.forEach(s),gn=l(n),H=p(n,"P",{"data-svelte-h":!0}),c(H)!=="svelte-ujsyuk"&&(H.textContent=fs),wn=l(n),j=p(n,"OL",{"data-svelte-h":!0}),c(j)!=="svelte-1de6fwn"&&(j.innerHTML=vs),xn=l(n),m=p(n,"H3",{id:!0,"data-svelte-h":!0}),c(m)!=="svelte-hi4waj"&&(m.innerHTML=hs),_n=l(n),b=p(n,"P",{"data-svelte-h":!0}),c(b)!=="svelte-18yov4n"&&(b.textContent=ys),Cn=l(n),P=p(n,"PRE",{class:!0});var pt=u(P);pt.forEach(s),Tn=l(n),E=p(n,"P",{"data-svelte-h":!0}),c(E)!=="svelte-d8lfxd"&&(E.textContent=gs),Mn=l(n),I=p(n,"UL",{"data-svelte-h":!0}),c(I)!=="svelte-8xnolz"&&(I.innerHTML=ws),Ln=l(n),D=p(n,"BLOCKQUOTE",{"data-svelte-h":!0}),c(D)!=="svelte-1mtvoal"&&(D.innerHTML=xs),Hn=l(n),f=p(n,"H3",{id:!0,"data-svelte-h":!0}),c(f)!=="svelte-13xa7ud"&&(f.innerHTML=_s),jn=l(n),R=p(n,"P",{"data-svelte-h":!0}),c(R)!=="svelte-ok68q6"&&(R.innerHTML=Cs),bn=l(n),O=p(n,"P",{"data-svelte-h":!0}),c(O)!=="svelte-anwskw"&&(O.textContent=Ts),Pn=l(n),q=p(n,"P",{"data-svelte-h":!0}),c(q)!=="svelte-hih30e"&&(q.textContent=Ms),En=l(n),U=p(n,"PRE",{class:!0});var ot=u(U);ot.forEach(s),In=l(n),F=p(n,"P",{"data-svelte-h":!0}),c(F)!=="svelte-tqh44r"&&(F.innerHTML=Ls),Dn=l(n),W=p(n,"PRE",{class:!0});var lt=u(W);lt.forEach(s),Rn=l(n),z=p(n,"P",{"data-svelte-h":!0}),c(z)!=="svelte-zeazju"&&(z.innerHTML=Hs),On=l(n),A=p(n,"PRE",{class:!0});var ct=u(A);ct.forEach(s),qn=l(n),G=p(n,"P",{"data-svelte-h":!0}),c(G)!=="svelte-mk2ame"&&(G.innerHTML=js),Un=l(n),S=p(n,"BLOCKQUOTE",{"data-svelte-h":!0}),c(S)!=="svelte-4otrga"&&(S.innerHTML=bs),Fn=l(n),v=p(n,"H3",{id:!0,"data-svelte-h":!0}),c(v)!=="svelte-1vol08d"&&(v.innerHTML=Ps),Wn=l(n),B=p(n,"P",{"data-svelte-h":!0}),c(B)!=="svelte-d4i2kr"&&(B.innerHTML=Es),zn=l(n),X=p(n,"P",{"data-svelte-h":!0}),c(X)!=="svelte-1bug3ei"&&(X.textContent=Is),An=l(n),$=p(n,"P",{"data-svelte-h":!0}),c($)!=="svelte-1kdpnj3"&&($.innerHTML=Ds),Gn=l(n),K=p(n,"P",{"data-svelte-h":!0}),c(K)!=="svelte-qoqrfj"&&(K.innerHTML=Rs),Sn=l(n),Q=p(n,"P",{"data-svelte-h":!0}),c(Q)!=="svelte-m7512w"&&(Q.innerHTML=Os),Bn=l(n),Y=p(n,"PRE",{class:!0});var it=u(Y);it.forEach(s),Xn=l(n),J=p(n,"PRE",{class:!0});var ut=u(J);ut.forEach(s),$n=l(n),V=p(n,"P",{"data-svelte-h":!0}),c(V)!=="svelte-zni08o"&&(V.textContent=qs),Kn=l(n),N=p(n,"PRE",{class:!0});var rt=u(N);rt.forEach(s),Qn=l(n),Z=p(n,"P",{"data-svelte-h":!0}),c(Z)!=="svelte-l3cmum"&&(Z.textContent=Us),Yn=l(n),h=p(n,"H4",{id:!0,"data-svelte-h":!0}),c(h)!=="svelte-1185fxd"&&(h.innerHTML=Fs),Jn=l(n),nn=p(n,"P",{"data-svelte-h":!0}),c(nn)!=="svelte-koxrm5"&&(nn.innerHTML=Ws),Vn=l(n),sn=p(n,"P",{"data-svelte-h":!0}),c(sn)!=="svelte-16494hq"&&(sn.innerHTML=zs),Nn=l(n),tn=p(n,"P",{"data-svelte-h":!0}),c(tn)!=="svelte-1lbja3y"&&(tn.innerHTML=As),Zn=l(n),an=p(n,"PRE",{class:!0});var kt=u(an);kt.forEach(s),ns=l(n),en=p(n,"P",{"data-svelte-h":!0}),c(en)!=="svelte-yave0q"&&(en.textContent=Gs),ss=l(n),pn=p(n,"UL",{"data-svelte-h":!0}),c(pn)!=="svelte-1yfszir"&&(pn.innerHTML=Ss),ts=l(n),on=p(n,"PRE",{class:!0});var dt=u(on);dt.forEach(s),as=l(n),y=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(y)!=="svelte-oyeq2k"&&(y.innerHTML=Bs),es=l(n),ln=p(n,"P",{"data-svelte-h":!0}),c(ln)!=="svelte-3f38rf"&&(ln.textContent=Xs),this.h()},h(){i(r,"id","adding-devtools-to-vite-plugins"),i(k,"id","getting-a-foothold---injecting-js-into-the-browser"),i(_,"class","language-js"),i(d,"id","importing-our-own-modules"),i(L,"class","language-js"),i(m,"id","option-1-exporting-the-runtime-code-from-the-package"),i(P,"class","language-js"),i(f,"id","option-2-using-a-sub-package"),i(U,"class","language-undefined"),i(W,"class","language-json"),i(A,"class","language-js"),i(v,"id","option-3-magic-module-resolution-preferred"),i(Y,"class","language-undefined"),i(J,"class","language-js"),i(N,"class","language-js"),i(h,"id","addendum-dealing-with-fsallow"),i(an,"class","language-undefined"),i(on,"class","language-js"),i(y,"id","in-conclusion")},m(n,t){a(n,r,t),a(n,cn,t),a(n,g,t),a(n,un,t),a(n,w,t),a(n,rn,t),a(n,k,t),a(n,kn,t),a(n,x,t),a(n,dn,t),a(n,_,t),_.innerHTML=Ks,a(n,mn,t),a(n,C,t),a(n,fn,t),a(n,d,t),a(n,vn,t),a(n,T,t),a(n,hn,t),a(n,M,t),a(n,yn,t),a(n,L,t),L.innerHTML=Qs,a(n,gn,t),a(n,H,t),a(n,wn,t),a(n,j,t),a(n,xn,t),a(n,m,t),a(n,_n,t),a(n,b,t),a(n,Cn,t),a(n,P,t),P.innerHTML=Ys,a(n,Tn,t),a(n,E,t),a(n,Mn,t),a(n,I,t),a(n,Ln,t),a(n,D,t),a(n,Hn,t),a(n,f,t),a(n,jn,t),a(n,R,t),a(n,bn,t),a(n,O,t),a(n,Pn,t),a(n,q,t),a(n,En,t),a(n,U,t),U.innerHTML=Js,a(n,In,t),a(n,F,t),a(n,Dn,t),a(n,W,t),W.innerHTML=Vs,a(n,Rn,t),a(n,z,t),a(n,On,t),a(n,A,t),A.innerHTML=Ns,a(n,qn,t),a(n,G,t),a(n,Un,t),a(n,S,t),a(n,Fn,t),a(n,v,t),a(n,Wn,t),a(n,B,t),a(n,zn,t),a(n,X,t),a(n,An,t),a(n,$,t),a(n,Gn,t),a(n,K,t),a(n,Sn,t),a(n,Q,t),a(n,Bn,t),a(n,Y,t),Y.innerHTML=Zs,a(n,Xn,t),a(n,J,t),J.innerHTML=nt,a(n,$n,t),a(n,V,t),a(n,Kn,t),a(n,N,t),N.innerHTML=st,a(n,Qn,t),a(n,Z,t),a(n,Yn,t),a(n,h,t),a(n,Jn,t),a(n,nn,t),a(n,Vn,t),a(n,sn,t),a(n,Nn,t),a(n,tn,t),a(n,Zn,t),a(n,an,t),an.innerHTML=tt,a(n,ns,t),a(n,en,t),a(n,ss,t),a(n,pn,t),a(n,ts,t),a(n,on,t),on.innerHTML=at,a(n,as,t),a(n,y,t),a(n,es,t),a(n,ln,t)},p:ps,i:ps,o:ps,d(n){n&&(s(r),s(cn),s(g),s(un),s(w),s(rn),s(k),s(kn),s(x),s(dn),s(_),s(mn),s(C),s(fn),s(d),s(vn),s(T),s(hn),s(M),s(yn),s(L),s(gn),s(H),s(wn),s(j),s(xn),s(m),s(_n),s(b),s(Cn),s(P),s(Tn),s(E),s(Mn),s(I),s(Ln),s(D),s(Hn),s(f),s(jn),s(R),s(bn),s(O),s(Pn),s(q),s(En),s(U),s(In),s(F),s(Dn),s(W),s(Rn),s(z),s(On),s(A),s(qn),s(G),s(Un),s(S),s(Fn),s(v),s(Wn),s(B),s(zn),s(X),s(An),s($),s(Gn),s(K),s(Sn),s(Q),s(Bn),s(Y),s(Xn),s(J),s($n),s(V),s(Kn),s(N),s(Qn),s(Z),s(Yn),s(h),s(Jn),s(nn),s(Vn),s(sn),s(Nn),s(tn),s(Zn),s(an),s(ns),s(en),s(ss),s(pn),s(ts),s(on),s(as),s(y),s(es),s(ln))}}}class wt extends ft{constructor(r){super(),vt(this,r,null,ht,mt,{})}}export{wt as component};
