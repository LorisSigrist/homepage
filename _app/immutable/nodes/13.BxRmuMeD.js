import{s as Gs,n as As}from"../chunks/scheduler.IgQUtjbl.js";import{S as Os,i as Ns,g as o,s as l,H as G,h as p,C as r,c as t,G as O,k as m,a,f as n}from"../chunks/index.BUVdxXQj.js";function Rs(Ss){let c,Ds='<a href="#never-write-mock-data-again-with-zocker">Never write Mock-Data again, with Zocker</a>',N,d,Fs=`The trend of zod-driven-development continues! This time, we’re going to use zod to generate
sensible mock-data for our tests.`,R,i,us='<a href="#writing-mock-data-is-the-worst">Writing Mock Data is the worst</a>',Y,f,ms="When writing tests, you often need to provide some mock-data to test your code against. This can be a real pain, especially if you need lot’s of it, and if it’s complex.",$,h,ds='Most mock-data generation libraries, such as the excellent <a href="https://www.npmjs.com/package/@faker-js/faker" rel="noopener noreferrer" target="_blank">faker</a>, supply only individual fields, not entire data-structures.',K,B,fs="Manually assembling these fields into a data-structure is tedious, and maintenance-heavy.",Q,y,hs='<a href="#enter-zocker">Enter Zocker</a>',U,v,Bs=`<a href="https://zocker.sigrist.dev" rel="noopener noreferrer" target="_blank">Zocker</a> is a library I’ve built to forever
eliminate the pain of writing and maintaining mock-data. It uses your zod-schemas as a guide to generate sensible and realistic mock-data for you. This way you can focus on writing tests, not on writing mock-data. Data generation does not get harder if you need more data, or if your data gets more complex. It’s all handled for you.`,V,C,vs='<a href="#getting-started">Getting Started</a>',X,E,Es="Obviously, install it first:",ss,M,Is='<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">npm</span><span style="color:#ADD7FF"> install</span><span style="color:#ADD7FF"> --save-dev</span><span style="color:#ADD7FF"> zocker</span></span></code></pre>',L,x,xs="Then, in your test-file, import the <code>zocker</code> function and pass it your zod-schema:",es,P,qs=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#5DE4C7">import </span><span style="color:#A6ACCD">&#123;</span><span style="color:#ADD7FF"> z</span><span style="color:#A6ACCD"> &#125;</span><span style="color:#A6ACCD"> from</span><span style="color:#A6ACCD"> '</span><span style="color:#5DE4C7">zod</span><span style="color:#A6ACCD">'</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#5DE4C7">import </span><span style="color:#A6ACCD">&#123;</span><span style="color:#ADD7FF"> zocker</span><span style="color:#A6ACCD"> &#125;</span><span style="color:#A6ACCD"> from</span><span style="color:#A6ACCD"> '</span><span style="color:#5DE4C7">zocker</span><span style="color:#A6ACCD">'</span><span style="color:#A6ACCD">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">const</span><span style="color:#E4F0FB"> schema</span><span style="color:#91B4D5"> =</span><span style="color:#E4F0FB"> z</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">object</span><span style="color:#A6ACCD">(&#123;</span></span>
<span class="line"><span style="color:#ADD7FF">	name</span><span style="color:#A6ACCD">:</span><span style="color:#E4F0FB"> z</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">string</span><span style="color:#A6ACCD">(),</span></span>
<span class="line"><span style="color:#ADD7FF">	age</span><span style="color:#A6ACCD">:</span><span style="color:#E4F0FB"> z</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">number</span><span style="color:#A6ACCD">(),</span></span>
<span class="line"><span style="color:#ADD7FF">	isAwesome</span><span style="color:#A6ACCD">:</span><span style="color:#E4F0FB"> z</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">boolean</span><span style="color:#A6ACCD">()</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">const</span><span style="color:#E4F0FB"> mockData</span><span style="color:#91B4D5"> =</span><span style="color:#E4F0FBD0"> zocker</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">schema</span><span style="color:#A6ACCD">).</span><span style="color:#E4F0FBD0">generate</span><span style="color:#A6ACCD">();</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">// &#123; name: "Jimmy Smith", age: 42, isAwesome: true &#125;</span></span></code></pre>`,j,k,ks="And voilà! You have your mock-data.",as,w,ws=`That was obviously a very simple example. Zocker can handle much more complex schemas, including
cyclic schemas, anys, unkowns, regular expressions, and much more. This here works just fine:`,ns,S,Zs=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">const</span><span style="color:#E4F0FB"> difficult_schema</span><span style="color:#91B4D5"> =</span><span style="color:#E4F0FB"> z</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">object</span><span style="color:#A6ACCD">(&#123;</span></span>
<span class="line"><span style="color:#ADD7FF">	id</span><span style="color:#A6ACCD">:</span><span style="color:#E4F0FB"> z</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">string</span><span style="color:#A6ACCD">().</span><span style="color:#E4F0FBD0">uuid</span><span style="color:#A6ACCD">(),</span></span>
<span class="line"><span style="color:#ADD7FF">	name</span><span style="color:#A6ACCD">:</span><span style="color:#E4F0FB"> z</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">string</span><span style="color:#A6ACCD">().</span><span style="color:#E4F0FBD0">min</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">3</span><span style="color:#A6ACCD">).</span><span style="color:#E4F0FBD0">max</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">20</span><span style="color:#A6ACCD">),</span></span>
<span class="line"><span style="color:#ADD7FF">	age</span><span style="color:#A6ACCD">:</span><span style="color:#E4F0FB"> z</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">number</span><span style="color:#A6ACCD">().</span><span style="color:#E4F0FBD0">int</span><span style="color:#A6ACCD">().</span><span style="color:#E4F0FBD0">min</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">0</span><span style="color:#A6ACCD">).</span><span style="color:#E4F0FBD0">max</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">120</span><span style="color:#A6ACCD">).</span><span style="color:#E4F0FBD0">multipleOf</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">10</span><span style="color:#A6ACCD">),</span></span>
<span class="line"><span style="color:#ADD7FF">	isAwesome</span><span style="color:#A6ACCD">:</span><span style="color:#E4F0FB"> z</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">boolean</span><span style="color:#A6ACCD">().</span><span style="color:#E4F0FBD0">optional</span><span style="color:#A6ACCD">(),</span></span>
<span class="line"><span style="color:#ADD7FF">	friends</span><span style="color:#A6ACCD">:</span><span style="color:#E4F0FB"> z</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">array</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">z</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">string</span><span style="color:#A6ACCD">().</span><span style="color:#E4F0FBD0">min</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">3</span><span style="color:#A6ACCD">).</span><span style="color:#E4F0FBD0">max</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">20</span><span style="color:#A6ACCD">)).</span><span style="color:#E4F0FBD0">min</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">1</span><span style="color:#A6ACCD">).</span><span style="color:#E4F0FBD0">max</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">10</span><span style="color:#A6ACCD">),</span></span>
<span class="line"><span style="color:#ADD7FF">	zip</span><span style="color:#A6ACCD">:</span><span style="color:#E4F0FB"> z</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">string</span><span style="color:#A6ACCD">().</span><span style="color:#E4F0FBD0">regex</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCD">/^[</span><span style="color:#5FB3A1">0-9</span><span style="color:#A6ACCD">]</span><span style="color:#91B4D5">&#123;5&#125;</span><span style="color:#A6ACCD">$/</span><span style="color:#A6ACCD">),</span></span>
<span class="line"><span style="color:#ADD7FF">	children</span><span style="color:#A6ACCD">:</span><span style="color:#E4F0FB"> z</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">map</span><span style="color:#A6ACCD">(</span></span>
<span class="line"><span style="color:#E4F0FB">		z</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">string</span><span style="color:#A6ACCD">(),</span></span>
<span class="line"><span style="color:#E4F0FB">		z</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">lazy</span><span style="color:#A6ACCD">(()</span><span style="color:#91B4D5"> =></span><span style="color:#E4F0FB"> difficult_schema</span><span style="color:#A6ACCD">)</span></span>
<span class="line"><span style="color:#A6ACCD">	)</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">const</span><span style="color:#E4F0FB"> mockData</span><span style="color:#91B4D5"> =</span><span style="color:#E4F0FBD0"> zocker</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">schema</span><span style="color:#A6ACCD">).</span><span style="color:#E4F0FBD0">generate</span><span style="color:#A6ACCD">();</span></span></code></pre>`,I,A,_s='<a href="#supplying-values">Supplying values</a>',ls,_,bs="When testing specific edge-cases, you often want to supply your own values for certain fields.",ts,b,zs=`This can be done by “supplying” your own value, or generator function, for a schema. That value is then
used whenever a value is needed for a (sub)schema that matches the given schema by reference.`,os,z,Ts="This is easier to undestand with an example:",ps,q,Ws=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">const</span><span style="color:#E4F0FB"> user</span><span style="color:#91B4D5"> =</span><span style="color:#E4F0FB"> z</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">object</span><span style="color:#A6ACCD">(&#123;</span></span>
<span class="line"><span style="color:#ADD7FF">	name</span><span style="color:#A6ACCD">:</span><span style="color:#E4F0FB"> z</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">string</span><span style="color:#A6ACCD">(),</span></span>
<span class="line"><span style="color:#ADD7FF">	age</span><span style="color:#A6ACCD">:</span><span style="color:#E4F0FB"> z</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">number</span><span style="color:#A6ACCD">()</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">const</span><span style="color:#E4F0FB"> mockData</span><span style="color:#91B4D5"> =</span><span style="color:#E4F0FBD0"> zocker</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">schema</span><span style="color:#A6ACCD">).</span><span style="color:#E4F0FBD0">supply</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">user</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">shape</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FB">name</span><span style="color:#A6ACCD">, </span><span style="color:#A6ACCD">'</span><span style="color:#5DE4C7">Jimmy Smith</span><span style="color:#A6ACCD">'</span><span style="color:#A6ACCD">).</span><span style="color:#E4F0FBD0">generate</span><span style="color:#A6ACCD">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">// &#123; name: "Jimmy Smith", age: 42 &#125; - The name is now fixed</span></span></code></pre>`,Z,D,Hs='<a href="#limitations">Limitations</a>',rs,T,gs=`There are a few limitations though. Zocker will never be able to generate data for preprocess or
refinement functions. At least not out of the box. We can however supply our own values for those
(sub)schemas, and side-step the issue.`,cs,F,Ms='<a href="#repeatability">Repeatability</a>',is,H,Ls=`By default, zocker will generate a new random value for each schema. This is great for most cases,
but can lead to flaky tests if you’re not careful. If you want to generate the same data every
time, you can set a seed using the <code>setSeed</code> method. This will generate the same data every time.`,ys,W,Js='<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">const</span><span style="color:#E4F0FB"> mockData</span><span style="color:#91B4D5"> =</span><span style="color:#E4F0FBD0"> zocker</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">schema</span><span style="color:#A6ACCD">).</span><span style="color:#E4F0FBD0">setSeed</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">42</span><span style="color:#A6ACCD">).</span><span style="color:#E4F0FBD0">generate</span><span style="color:#A6ACCD">();</span></span></code></pre>',J,u,Ps='<a href="#conclusion">Conclusion</a>',Cs,g,js=`I hope this article has given you a taste of what zocker can do. If you want to learn more, check out
the <a href="https://zocker.sigrist.dev" rel="noopener noreferrer" target="_blank">documentation</a>. In my own use, zocker has
been a huge time-saver. I hope it can help you too!`;return{c(){c=o("h1"),c.innerHTML=Ds,N=l(),d=o("p"),d.textContent=Fs,R=l(),i=o("h2"),i.innerHTML=us,Y=l(),f=o("p"),f.textContent=ms,$=l(),h=o("p"),h.innerHTML=ds,K=l(),B=o("p"),B.textContent=fs,Q=l(),y=o("h2"),y.innerHTML=hs,U=l(),v=o("p"),v.innerHTML=Bs,V=l(),C=o("h3"),C.innerHTML=vs,X=l(),E=o("p"),E.textContent=Es,ss=l(),M=new G(!1),L=l(),x=o("p"),x.innerHTML=xs,es=l(),P=new G(!1),j=l(),k=o("p"),k.textContent=ks,as=l(),w=o("p"),w.textContent=ws,ns=l(),S=new G(!1),I=l(),A=o("h3"),A.innerHTML=_s,ls=l(),_=o("p"),_.textContent=bs,ts=l(),b=o("p"),b.textContent=zs,os=l(),z=o("p"),z.textContent=Ts,ps=l(),q=new G(!1),Z=l(),D=o("h3"),D.innerHTML=Hs,rs=l(),T=o("p"),T.textContent=gs,cs=l(),F=o("h3"),F.innerHTML=Ms,is=l(),H=o("p"),H.innerHTML=Ls,ys=l(),W=new G(!1),J=l(),u=o("h2"),u.innerHTML=Ps,Cs=l(),g=o("p"),g.innerHTML=js,this.h()},l(s){c=p(s,"H1",{id:!0,"data-svelte-h":!0}),r(c)!=="svelte-6rd6lw"&&(c.innerHTML=Ds),N=t(s),d=p(s,"P",{"data-svelte-h":!0}),r(d)!=="svelte-xaqg6a"&&(d.textContent=Fs),R=t(s),i=p(s,"H2",{id:!0,"data-svelte-h":!0}),r(i)!=="svelte-12hcv5e"&&(i.innerHTML=us),Y=t(s),f=p(s,"P",{"data-svelte-h":!0}),r(f)!=="svelte-ds87us"&&(f.textContent=ms),$=t(s),h=p(s,"P",{"data-svelte-h":!0}),r(h)!=="svelte-e7jizo"&&(h.innerHTML=ds),K=t(s),B=p(s,"P",{"data-svelte-h":!0}),r(B)!=="svelte-185h9dq"&&(B.textContent=fs),Q=t(s),y=p(s,"H2",{id:!0,"data-svelte-h":!0}),r(y)!=="svelte-19r7qfc"&&(y.innerHTML=hs),U=t(s),v=p(s,"P",{"data-svelte-h":!0}),r(v)!=="svelte-1675m96"&&(v.innerHTML=Bs),V=t(s),C=p(s,"H3",{id:!0,"data-svelte-h":!0}),r(C)!=="svelte-1qdh62n"&&(C.innerHTML=vs),X=t(s),E=p(s,"P",{"data-svelte-h":!0}),r(E)!=="svelte-x0pe8q"&&(E.textContent=Es),ss=t(s),M=O(s,!1),L=t(s),x=p(s,"P",{"data-svelte-h":!0}),r(x)!=="svelte-1kxxt3y"&&(x.innerHTML=xs),es=t(s),P=O(s,!1),j=t(s),k=p(s,"P",{"data-svelte-h":!0}),r(k)!=="svelte-1t97pvt"&&(k.textContent=ks),as=t(s),w=p(s,"P",{"data-svelte-h":!0}),r(w)!=="svelte-zuacy1"&&(w.textContent=ws),ns=t(s),S=O(s,!1),I=t(s),A=p(s,"H3",{id:!0,"data-svelte-h":!0}),r(A)!=="svelte-lnzl37"&&(A.innerHTML=_s),ls=t(s),_=p(s,"P",{"data-svelte-h":!0}),r(_)!=="svelte-zmnaun"&&(_.textContent=bs),ts=t(s),b=p(s,"P",{"data-svelte-h":!0}),r(b)!=="svelte-106zx7x"&&(b.textContent=zs),os=t(s),z=p(s,"P",{"data-svelte-h":!0}),r(z)!=="svelte-vje499"&&(z.textContent=Ts),ps=t(s),q=O(s,!1),Z=t(s),D=p(s,"H3",{id:!0,"data-svelte-h":!0}),r(D)!=="svelte-lt9ef1"&&(D.innerHTML=Hs),rs=t(s),T=p(s,"P",{"data-svelte-h":!0}),r(T)!=="svelte-jajpvn"&&(T.textContent=gs),cs=t(s),F=p(s,"H3",{id:!0,"data-svelte-h":!0}),r(F)!=="svelte-6ps6eb"&&(F.innerHTML=Ms),is=t(s),H=p(s,"P",{"data-svelte-h":!0}),r(H)!=="svelte-13lyt9w"&&(H.innerHTML=Ls),ys=t(s),W=O(s,!1),J=t(s),u=p(s,"H2",{id:!0,"data-svelte-h":!0}),r(u)!=="svelte-kmpttn"&&(u.innerHTML=Ps),Cs=t(s),g=p(s,"P",{"data-svelte-h":!0}),r(g)!=="svelte-14m8bhx"&&(g.innerHTML=js),this.h()},h(){m(c,"id","never-write-mock-data-again-with-zocker"),m(i,"id","writing-mock-data-is-the-worst"),m(y,"id","enter-zocker"),m(C,"id","getting-started"),M.a=L,P.a=j,S.a=I,m(A,"id","supplying-values"),q.a=Z,m(D,"id","limitations"),m(F,"id","repeatability"),W.a=J,m(u,"id","conclusion")},m(s,e){a(s,c,e),a(s,N,e),a(s,d,e),a(s,R,e),a(s,i,e),a(s,Y,e),a(s,f,e),a(s,$,e),a(s,h,e),a(s,K,e),a(s,B,e),a(s,Q,e),a(s,y,e),a(s,U,e),a(s,v,e),a(s,V,e),a(s,C,e),a(s,X,e),a(s,E,e),a(s,ss,e),M.m(Is,s,e),a(s,L,e),a(s,x,e),a(s,es,e),P.m(qs,s,e),a(s,j,e),a(s,k,e),a(s,as,e),a(s,w,e),a(s,ns,e),S.m(Zs,s,e),a(s,I,e),a(s,A,e),a(s,ls,e),a(s,_,e),a(s,ts,e),a(s,b,e),a(s,os,e),a(s,z,e),a(s,ps,e),q.m(Ws,s,e),a(s,Z,e),a(s,D,e),a(s,rs,e),a(s,T,e),a(s,cs,e),a(s,F,e),a(s,is,e),a(s,H,e),a(s,ys,e),W.m(Js,s,e),a(s,J,e),a(s,u,e),a(s,Cs,e),a(s,g,e)},p:As,i:As,o:As,d(s){s&&(n(c),n(N),n(d),n(R),n(i),n(Y),n(f),n($),n(h),n(K),n(B),n(Q),n(y),n(U),n(v),n(V),n(C),n(X),n(E),n(ss),M.d(),n(L),n(x),n(es),P.d(),n(j),n(k),n(as),n(w),n(ns),S.d(),n(I),n(A),n(ls),n(_),n(ts),n(b),n(os),n(z),n(ps),q.d(),n(Z),n(D),n(rs),n(T),n(cs),n(F),n(is),n(H),n(ys),W.d(),n(J),n(u),n(Cs),n(g))}}}class Ks extends Os{constructor(c){super(),Ns(this,c,null,Rs,Gs,{})}}export{Ks as component};
