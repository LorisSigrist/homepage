import{s as F,n as M}from"../chunks/scheduler.BdRfwDxj.js";import{S as G,i as J,e,s as l,H as D,c as o,k as f,f as c,a as R,l as B,d as a,m as P,g as t}from"../chunks/index.DLvNlD75.js";function K(W){let p,I='<a href="#a-neat-pattern-for-melt-ui">A neat pattern for Melt UI</a>',h,i,L="While working with Melt UI, I’ve stumbled upon a pattern that has been quite handy several times. Sharing stuff from the same builder between components using the <code>let:</code> directive. Here is an example:",y,u,q="I often find myself in the need for a generic Tooltip component, one where the Trigger is some outside object. Since I use Melt UI for my projects anyway, I really want to use it’s Tooltip builder. However, it’s not immediately obvious how you can do that. Melt UI’s docs always have one component that fully encapsulates all the behavior.",w,k,A="But it’s actually quite doable thanks to the <code>let:</code> directive. You can use it to pass the Tooltip’s <code>trigger</code> prop to the outside world. Ideally this would be as simple as:",T,r,_,Y=`<code class="language-svelte"><span class="token comment">&lt;!--Tooltip.svelte--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createTooltip <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@melt-ui/svelte'</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">elements</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> trigger<span class="token punctuation">,</span> content<span class="token punctuation">,</span> arrow <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">states</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> open <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">createTooltip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>trigger<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>

<span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> open<span class="token punctuation">&#125;</span></span>
  ...
<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span>

<span class="token comment">&lt;!--App.svelte--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> Tooltip <span class="token keyword">from</span> <span class="token string">'./Tooltip.svelte'</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Tooltip</span> <span class="token attr-name"><span class="token namespace">let:</span>trigger</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">use:</span>trigger</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span>$trigger<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Do Something<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Tooltip</span><span class="token punctuation">></span></span></code>`,b,g,S="Unfortunately, this doesn’t work as of now. The problem is the <code>{...$trigger}</code> part. It’s not possible to bind to a store unless it comes from the component’s script tag. The workaround here is to bind the store inside the <code>Tooltip</code> component and pass it to the <code>trigger</code> slot.",x,m,j,z=`<code class="language-svelte"><span class="token comment">&lt;!--Tooltip.svelte--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createTooltip <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@melt-ui/svelte'</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">elements</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> trigger<span class="token punctuation">,</span> content<span class="token punctuation">,</span> arrow <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">states</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> open <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">createTooltip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">triggerAction=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>trigger<span class="token punctuation">&#125;</span></span> <span class="token attr-name">triggerProps=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>$trigger<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>

<span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> open<span class="token punctuation">&#125;</span></span>
  ...
<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span>

<span class="token comment">&lt;!--App.svelte--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> Tooltip <span class="token keyword">from</span> <span class="token string">'./Tooltip.svelte'</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Tooltip</span> <span class="token attr-name"><span class="token namespace">let:</span>triggerAction</span> <span class="token attr-name"><span class="token namespace">let:</span>triggerProps</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">use:</span>triggerAction</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span>triggerProps<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Do Something<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Tooltip</span><span class="token punctuation">></span></span></code>`,C,d,U="That’s it.",H,v,E="This pattern is has been useful to me a couple times so I wanted to share.";return{c(){p=e("h1"),p.innerHTML=I,h=l(),i=e("p"),i.innerHTML=L,y=l(),u=e("p"),u.textContent=q,w=l(),k=e("p"),k.innerHTML=A,T=l(),r=e("pre"),_=new D(!1),b=l(),g=e("p"),g.innerHTML=S,x=l(),m=e("pre"),j=new D(!1),C=l(),d=e("p"),d.textContent=U,H=l(),v=e("p"),v.textContent=E,this.h()},l(s){p=o(s,"H1",{id:!0,"data-svelte-h":!0}),f(p)!=="svelte-15fqgkm"&&(p.innerHTML=I),h=c(s),i=o(s,"P",{"data-svelte-h":!0}),f(i)!=="svelte-we6q8g"&&(i.innerHTML=L),y=c(s),u=o(s,"P",{"data-svelte-h":!0}),f(u)!=="svelte-sm233c"&&(u.textContent=q),w=c(s),k=o(s,"P",{"data-svelte-h":!0}),f(k)!=="svelte-fb05oo"&&(k.innerHTML=A),T=c(s),r=o(s,"PRE",{class:!0});var n=R(r);_=B(n,!1),n.forEach(a),b=c(s),g=o(s,"P",{"data-svelte-h":!0}),f(g)!=="svelte-qcbyx"&&(g.innerHTML=S),x=c(s),m=o(s,"PRE",{class:!0});var $=R(m);j=B($,!1),$.forEach(a),C=c(s),d=o(s,"P",{"data-svelte-h":!0}),f(d)!=="svelte-jwgito"&&(d.textContent=U),H=c(s),v=o(s,"P",{"data-svelte-h":!0}),f(v)!=="svelte-1hcs8n2"&&(v.textContent=E),this.h()},h(){P(p,"id","a-neat-pattern-for-melt-ui"),_.a=null,P(r,"class","language-svelte"),j.a=null,P(m,"class","language-svelte")},m(s,n){t(s,p,n),t(s,h,n),t(s,i,n),t(s,y,n),t(s,u,n),t(s,w,n),t(s,k,n),t(s,T,n),t(s,r,n),_.m(Y,r),t(s,b,n),t(s,g,n),t(s,x,n),t(s,m,n),j.m(z,m),t(s,C,n),t(s,d,n),t(s,H,n),t(s,v,n)},p:M,i:M,o:M,d(s){s&&(a(p),a(h),a(i),a(y),a(u),a(w),a(k),a(T),a(r),a(b),a(g),a(x),a(m),a(C),a(d),a(H),a(v))}}}class Q extends G{constructor(p){super(),J(this,p,null,K,F,{})}}export{Q as component};
