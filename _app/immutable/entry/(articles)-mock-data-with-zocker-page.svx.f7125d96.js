import{S as gs,i as As,s as Ws,k as p,q as u,a as i,l as o,m as c,r as l,h as s,c as r,n as k,b as t,D as e,E as Xn}from"../chunks/index.76514a08.js";function js(_s){let f,_n,N,x,En,Y,P,Tn,$,I,xn,F,H,Pn,K,S,In,Q,D,Hn,U,v,w,Sn,Dn,V,M,Mn,X,Z,Zn,nn,d,Es='<code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev zocker</code>',sn,m,gn,B,An,Wn,an,b,Ts=`<code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> z <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'zod'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> zocker <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'zocker'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> schema <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
	name<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	age<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	isAwesome<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> mockData <span class="token operator">=</span> <span class="token function">zocker</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#123; name: "Jimmy Smith", age: 42, isAwesome: true &#125;</span></code>`,tn,g,jn,en,A,Ln,pn,z,xs=`<code class="language-typescript"><span class="token keyword">const</span> difficult_schema <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
	id<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	name<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	age<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multipleOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	isAwesome<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	friends<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	zip<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">regex</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]&#123;5&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	children<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
		z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		z<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> difficult_schema<span class="token punctuation">)</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> mockData <span class="token operator">=</span> <span class="token function">zocker</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,on,W,Rn,cn,j,Cn,un,L,On,ln,R,qn,rn,_,Ps=`<code class="language-typescript"><span class="token keyword">const</span> user <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
	name<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	age<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> mockData <span class="token operator">=</span> <span class="token function">zocker</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">supply</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>shape<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'Jimmy Smith'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// &#123; name: "Jimmy Smith", age: 42 &#125; - The name is now fixed</span></code>`,kn,C,Jn,fn,O,Bn,mn,q,Gn,yn,y,Nn,G,Yn,$n,hn,E,Is='<code class="language-typescript"><span class="token keyword">const</span> mockData <span class="token operator">=</span> <span class="token function">zocker</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSeed</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',vn,J,Fn,wn,h,Kn,T,Qn,Un;return{c(){f=p("h1"),_n=u("Never write Mock-Data again, with Zocker"),N=i(),x=p("p"),En=u(`The trend of zod-driven-development continues! This time, we’re going to use zod to generate
sensible mock-data for our tests.`),Y=i(),P=p("h2"),Tn=u("Writing Mock Data is the worst"),$=i(),I=p("p"),xn=u(`When writing tests, you often need to provide some mock-data to test your code against. This can
be a real pain, especially if you’re working with large data-structures.`),F=i(),H=p("p"),Pn=u("Most mock-data generation libraries supply only individual fields, not entire data-structures."),K=i(),S=p("p"),In=u(`These manual mock-data structures are often brittle, and prone to get out of sync with your code
as your project evolves. They quickly become a maintenance burden slowing you down to a crawl.`),Q=i(),D=p("h2"),Hn=u("Enter Zocker"),U=i(),v=p("p"),w=p("a"),Sn=u("Zocker"),Dn=u(` is a library I’ve built to forever
eliminate the pain of writing and maintaining mock-data. It uses your zod-schemas to generate sensible mock-data for
you. That way, the data will always be in sync with your code.`),V=i(),M=p("h3"),Mn=u("Getting Started"),X=i(),Z=p("p"),Zn=u("Obviously, install it first:"),nn=i(),d=p("pre"),sn=i(),m=p("p"),gn=u("Then, in your test-file, import the "),B=p("code"),An=u("zocker"),Wn=u(" function and pass it your zod-schema:"),an=i(),b=p("pre"),tn=i(),g=p("p"),jn=u("And voilà! You have your mock-data."),en=i(),A=p("p"),Ln=u(`That was obviously a very simple example. Zocker can handle much more complex schemas, including
cyclic schemas, anys, unkowns, regular expressions, and much more. This here works just fine:`),pn=i(),z=p("pre"),on=i(),W=p("h3"),Rn=u("Supplying values"),cn=i(),j=p("p"),Cn=u("When testing specific edge-cases, you often want to supply your own values for certain fields."),un=i(),L=p("p"),On=u(`This can be done by “supplying” your own value, or generator function, for a schema. That value is then
used whenever a value is needed for a (sub)schema that matches the given schema by reference.`),ln=i(),R=p("p"),qn=u("This is easier to undestand with an example:"),rn=i(),_=p("pre"),kn=i(),C=p("h3"),Jn=u("Limitations"),fn=i(),O=p("p"),Bn=u(`There are a few limitations though. Zocker will never be able to generate data for preprocess or
refinement functions. At least not out of the box. We can however supply our own values for those
(sub)schemas, and side-step the issue.`),mn=i(),q=p("h3"),Gn=u("Repeatability"),yn=i(),y=p("p"),Nn=u(`By default, zocker will generate a new random value for each schema. This is great for most cases,
but can lead to flaky tests if you’re not careful. If you want to generate the same data every
time, you can set a seed using the `),G=p("code"),Yn=u("setSeed"),$n=u(" method. This will generate the same data every time."),hn=i(),E=p("pre"),vn=i(),J=p("h2"),Fn=u("Conclusion"),wn=i(),h=p("p"),Kn=u(`I hope this article has given you a taste of what zocker can do. If you want to learn more, check out
the `),T=p("a"),Qn=u("documentation"),Un=u(`. In my own use, zocker has
been a huge time-saver. I hope it can help you too!`),this.h()},l(n){f=o(n,"H1",{});var a=c(f);_n=l(a,"Never write Mock-Data again, with Zocker"),a.forEach(s),N=r(n),x=o(n,"P",{});var ns=c(x);En=l(ns,`The trend of zod-driven-development continues! This time, we’re going to use zod to generate
sensible mock-data for our tests.`),ns.forEach(s),Y=r(n),P=o(n,"H2",{});var ss=c(P);Tn=l(ss,"Writing Mock Data is the worst"),ss.forEach(s),$=r(n),I=o(n,"P",{});var as=c(I);xn=l(as,`When writing tests, you often need to provide some mock-data to test your code against. This can
be a real pain, especially if you’re working with large data-structures.`),as.forEach(s),F=r(n),H=o(n,"P",{});var ts=c(H);Pn=l(ts,"Most mock-data generation libraries supply only individual fields, not entire data-structures."),ts.forEach(s),K=r(n),S=o(n,"P",{});var es=c(S);In=l(es,`These manual mock-data structures are often brittle, and prone to get out of sync with your code
as your project evolves. They quickly become a maintenance burden slowing you down to a crawl.`),es.forEach(s),Q=r(n),D=o(n,"H2",{});var ps=c(D);Hn=l(ps,"Enter Zocker"),ps.forEach(s),U=r(n),v=o(n,"P",{});var Vn=c(v);w=o(Vn,"A",{href:!0,rel:!0});var os=c(w);Sn=l(os,"Zocker"),os.forEach(s),Dn=l(Vn,` is a library I’ve built to forever
eliminate the pain of writing and maintaining mock-data. It uses your zod-schemas to generate sensible mock-data for
you. That way, the data will always be in sync with your code.`),Vn.forEach(s),V=r(n),M=o(n,"H3",{});var cs=c(M);Mn=l(cs,"Getting Started"),cs.forEach(s),X=r(n),Z=o(n,"P",{});var us=c(Z);Zn=l(us,"Obviously, install it first:"),us.forEach(s),nn=r(n),d=o(n,"PRE",{class:!0});var Hs=c(d);Hs.forEach(s),sn=r(n),m=o(n,"P",{});var dn=c(m);gn=l(dn,"Then, in your test-file, import the "),B=o(dn,"CODE",{});var ls=c(B);An=l(ls,"zocker"),ls.forEach(s),Wn=l(dn," function and pass it your zod-schema:"),dn.forEach(s),an=r(n),b=o(n,"PRE",{class:!0});var Ss=c(b);Ss.forEach(s),tn=r(n),g=o(n,"P",{});var is=c(g);jn=l(is,"And voilà! You have your mock-data."),is.forEach(s),en=r(n),A=o(n,"P",{});var rs=c(A);Ln=l(rs,`That was obviously a very simple example. Zocker can handle much more complex schemas, including
cyclic schemas, anys, unkowns, regular expressions, and much more. This here works just fine:`),rs.forEach(s),pn=r(n),z=o(n,"PRE",{class:!0});var Ds=c(z);Ds.forEach(s),on=r(n),W=o(n,"H3",{});var ks=c(W);Rn=l(ks,"Supplying values"),ks.forEach(s),cn=r(n),j=o(n,"P",{});var fs=c(j);Cn=l(fs,"When testing specific edge-cases, you often want to supply your own values for certain fields."),fs.forEach(s),un=r(n),L=o(n,"P",{});var ms=c(L);On=l(ms,`This can be done by “supplying” your own value, or generator function, for a schema. That value is then
used whenever a value is needed for a (sub)schema that matches the given schema by reference.`),ms.forEach(s),ln=r(n),R=o(n,"P",{});var ys=c(R);qn=l(ys,"This is easier to undestand with an example:"),ys.forEach(s),rn=r(n),_=o(n,"PRE",{class:!0});var Ms=c(_);Ms.forEach(s),kn=r(n),C=o(n,"H3",{});var hs=c(C);Jn=l(hs,"Limitations"),hs.forEach(s),fn=r(n),O=o(n,"P",{});var vs=c(O);Bn=l(vs,`There are a few limitations though. Zocker will never be able to generate data for preprocess or
refinement functions. At least not out of the box. We can however supply our own values for those
(sub)schemas, and side-step the issue.`),vs.forEach(s),mn=r(n),q=o(n,"H3",{});var ws=c(q);Gn=l(ws,"Repeatability"),ws.forEach(s),yn=r(n),y=o(n,"P",{});var bn=c(y);Nn=l(bn,`By default, zocker will generate a new random value for each schema. This is great for most cases,
but can lead to flaky tests if you’re not careful. If you want to generate the same data every
time, you can set a seed using the `),G=o(bn,"CODE",{});var ds=c(G);Yn=l(ds,"setSeed"),ds.forEach(s),$n=l(bn," method. This will generate the same data every time."),bn.forEach(s),hn=r(n),E=o(n,"PRE",{class:!0});var Zs=c(E);Zs.forEach(s),vn=r(n),J=o(n,"H2",{});var bs=c(J);Fn=l(bs,"Conclusion"),bs.forEach(s),wn=r(n),h=o(n,"P",{});var zn=c(h);Kn=l(zn,`I hope this article has given you a taste of what zocker can do. If you want to learn more, check out
the `),T=o(zn,"A",{href:!0,rel:!0});var zs=c(T);Qn=l(zs,"documentation"),zs.forEach(s),Un=l(zn,`. In my own use, zocker has
been a huge time-saver. I hope it can help you too!`),zn.forEach(s),this.h()},h(){k(w,"href","https://zocker.sigrist.dev"),k(w,"rel","nofollow"),k(d,"class","language-bash"),k(b,"class","language-typescript"),k(z,"class","language-typescript"),k(_,"class","language-typescript"),k(E,"class","language-typescript"),k(T,"href","https://zocker.sigrist.dev"),k(T,"rel","nofollow")},m(n,a){t(n,f,a),e(f,_n),t(n,N,a),t(n,x,a),e(x,En),t(n,Y,a),t(n,P,a),e(P,Tn),t(n,$,a),t(n,I,a),e(I,xn),t(n,F,a),t(n,H,a),e(H,Pn),t(n,K,a),t(n,S,a),e(S,In),t(n,Q,a),t(n,D,a),e(D,Hn),t(n,U,a),t(n,v,a),e(v,w),e(w,Sn),e(v,Dn),t(n,V,a),t(n,M,a),e(M,Mn),t(n,X,a),t(n,Z,a),e(Z,Zn),t(n,nn,a),t(n,d,a),d.innerHTML=Es,t(n,sn,a),t(n,m,a),e(m,gn),e(m,B),e(B,An),e(m,Wn),t(n,an,a),t(n,b,a),b.innerHTML=Ts,t(n,tn,a),t(n,g,a),e(g,jn),t(n,en,a),t(n,A,a),e(A,Ln),t(n,pn,a),t(n,z,a),z.innerHTML=xs,t(n,on,a),t(n,W,a),e(W,Rn),t(n,cn,a),t(n,j,a),e(j,Cn),t(n,un,a),t(n,L,a),e(L,On),t(n,ln,a),t(n,R,a),e(R,qn),t(n,rn,a),t(n,_,a),_.innerHTML=Ps,t(n,kn,a),t(n,C,a),e(C,Jn),t(n,fn,a),t(n,O,a),e(O,Bn),t(n,mn,a),t(n,q,a),e(q,Gn),t(n,yn,a),t(n,y,a),e(y,Nn),e(y,G),e(G,Yn),e(y,$n),t(n,hn,a),t(n,E,a),E.innerHTML=Is,t(n,vn,a),t(n,J,a),e(J,Fn),t(n,wn,a),t(n,h,a),e(h,Kn),e(h,T),e(T,Qn),e(h,Un)},p:Xn,i:Xn,o:Xn,d(n){n&&s(f),n&&s(N),n&&s(x),n&&s(Y),n&&s(P),n&&s($),n&&s(I),n&&s(F),n&&s(H),n&&s(K),n&&s(S),n&&s(Q),n&&s(D),n&&s(U),n&&s(v),n&&s(V),n&&s(M),n&&s(X),n&&s(Z),n&&s(nn),n&&s(d),n&&s(sn),n&&s(m),n&&s(an),n&&s(b),n&&s(tn),n&&s(g),n&&s(en),n&&s(A),n&&s(pn),n&&s(z),n&&s(on),n&&s(W),n&&s(cn),n&&s(j),n&&s(un),n&&s(L),n&&s(ln),n&&s(R),n&&s(rn),n&&s(_),n&&s(kn),n&&s(C),n&&s(fn),n&&s(O),n&&s(mn),n&&s(q),n&&s(yn),n&&s(y),n&&s(hn),n&&s(E),n&&s(vn),n&&s(J),n&&s(wn),n&&s(h)}}}class Rs extends gs{constructor(f){super(),As(this,f,null,js,Ws,{})}}export{Rs as default};
